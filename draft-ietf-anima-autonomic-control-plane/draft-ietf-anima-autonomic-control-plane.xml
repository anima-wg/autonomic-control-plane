<?xml version="1.0" encoding="UTF-8"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
    which is available here: http://xml.resource.org. -->

<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
    please see http://xml.resource.org/authoring/README.html. -->

<rfc
      xmlns:xi="http://www.w3.org/2001/XInclude"
      category="std"
      docName="draft-ietf-anima-autonomic-control-plane-29"
      ipr="trust200902"
      obsoletes=""
      updates=""
      submissionType="IETF"
      xml:lang="en"
      tocInclude="true"
      tocDepth="5"
      symRefs="true"
      sortRefs="true"
      consensus="true"
      version="3">

<!-- REMOVED in version 12: updates="4291,4193" -->

 <!-- ***** FRONT MATTER ***** -->

  <front>
    <title abbrev="An Autonomic Control Plane (ACP)">An Autonomic Control Plane (ACP)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-anima-autonomic-control-plane-29"/>
    <author role="editor" fullname="Toerless Eckert" surname="Eckert">
      <organization abbrev="Futurewei USA">
                                Futurewei Technologies Inc. USA</organization>
      <address>
        <postal>
          <street>2330 Central Expy</street>
          <city>Santa Clara</city>
          <code>95050</code>
          <country>USA</country>
        </postal>
        <email>tte+ietf@cs.fau.de</email>
      </address>
    </author>
    <author role="editor" fullname="Michael H. Behringer" initials="M." surname="Behringer">
      <address>
        <email>michael.h.behringer@gmail.com</email>
      </address>
    </author>
    <author fullname="Steinthor Bjarnason" initials="S." surname="Bjarnason">
      <organization>Arbor Networks</organization>
      <address>
        <postal>
          <street>2727 South State Street, Suite 200</street>
          <city>Ann Arbor</city>
          <code>MI 48104</code>
          <country>United States</country>
        </postal>
        <email>sbjarnason@arbor.net</email>
      </address>
    </author>
    <date month="Sep" day="10" year="2020"/>
    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    <abstract>
      <t>
                                Autonomic functions need a control plane to communicate, which depends on some addressing and routing.  This Autonomic Control Plane should ideally be self-managing, and as independent as possible of configuration.  This document defines such a plane and calls it the "Autonomic Control Plane", with the primary use as a control plane for autonomic functions.  It also serves as a "virtual out-of-band channel" for Operations, Administration and Management (OAM) communications over a network that provides automatically configured hop-by-hop authenticated and encrypted communications via  automatically configured IPv6 even when the network is not configured, or misconfigured.
                        </t>
    </abstract>
  </front>
  <middle>
    <section anchor="intro" numbered="true" toc="default">
      <name>Introduction (Informative)</name>
      <t>Autonomic Networking is a concept of self-management: Autonomic functions self-configure, and negotiate parameters and settings across the network. <xref target="RFC7575" format="default"/> defines the fundamental ideas and design goals of Autonomic Networking.  A gap analysis of Autonomic Networking is given in <xref target="RFC7576" format="default"/>.  The reference architecture for Autonomic Networking in the IETF is specified in the document <xref target="I-D.ietf-anima-reference-model" format="default"/>.</t>
      <t>Autonomic functions need an autonomically built communications infrastructure.  This infrastructure needs to be secure, resilient and re-usable by all autonomic functions.  Section 5 of <xref target="RFC7575" format="default"/> introduces that infrastructure and calls it the Autonomic Control Plane (ACP).  More descriptively it would be the "Autonomic communications infrastructure for OAM and Control".  For naming consistency with that prior document, this document continues to use the name ACP though.</t>
      <t>Today, the OAM and control plane of IP networks is what is typically called in-band management/signaling: Its management and control protocol traffic depends on the routing and forwarding tables, security, policy, QoS and potentially other configuration that first has to be established through the very same management and control protocols. Misconfigurations including unexpected side effects or mutual dependences can disrupt OAM and control operations and especially disrupt remote management access to the affected node itself and potentially a much larger number of nodes for whom the affected node is on the network path.  Traditionally, physically separate, so-called out-of-band (management) networks have been used to avoid these problems or at least to allow recovery from such problems. Worst case, personnel are sent on site to access devices through out-of-band management ports (also called craft ports, serial console, management ethernet port).  However, both options are expensive.</t>
      <t>In increasingly automated networks either centralized management systems or distributed autonomic service agents in the network require a control plane which is independent of the configuration of the network they manage, to avoid impacting their own operations through the configuration actions they take.</t>

      <t>This document describes a modular design for a self-forming, self-managing and self-protecting ACP,  which is a virtual out-of-band network designed to be as independent as possible of configuration, addressing and routing to avoid the self-dependency problems of current IP  networks while still operating in-band on the same physical network that it is controlling and managing. The ACP design is therefore intended to combine as well as possible the resilience of out-of-band management networks with the low-cost of traditional IP in-band network management.  The details how this is achieved are described in <xref target="self-creation" format="default"/>.</t>
      <t>In a fully autonomic network node without legacy control or management functions/protocols, the Data-Plane would be for example just a forwarding plane for "Data" IPv6 packets, aka: packets other than the control and  management plane packets that are forwarded by the ACP itself.  In such networks/nodes, there would be no non-autonomous control or non-autonomous management plane.</t>
      <t>Routing protocols for example would be built inside the ACP as so-called autonomous functions via autonomous service agents, leveraging the ACPs functions instead of implementing them seperately for each protocol: discovery, automatically established authenticated and encrypted local and distant peer connectivity for control and management traffic, and common control/management protocol session and presentation functions.</t>
      <t>When ACP functionality is added to nodes that have non-autonomous management plane and/or control plane functions (henceforth called non-autonomous nodes), the ACP instead is best abstracted as a special Virtual Routing and Forwarding (VRF) instance (or virtual router) and the complete pre-existing non-autonomous management and/or control plane is considered to be part of the Data-Plane to avoid introduction of more complex, new terminology only for this case.</t>
      <t>Like the forwarding plane for "Data" packets, the non-autonomous control and management plane functions can then be managed/used via the ACP. This terminology is consistent with pre-existing documents such as <xref target="RFC8368" format="default"/>.</t>
      <t>In both instances (autonomous and non-autonomous nodes), the ACP is built such that it is operating in the absence of the Data-Plane, and in the case of existing non-autonomous (management, control) components in the Data-Plane also in the presence of any (mis-)configuration thereof.</t>
      <t>The Autonomic Control Plane serves several purposes at the same time:
                        </t>
      <ol type="1" spacing="compact">
        <li>Autonomic functions communicate over the ACP.  The ACP therefore directly supports Autonomic Networking functions, as described in <xref target="I-D.ietf-anima-reference-model" format="default"/>.  For example, Generic Autonomic Signaling Protocol (GRASP - <xref target="I-D.ietf-anima-grasp" format="default"/>) runs securely inside the ACP and depends on the ACP as its "security and transport substrate".</li>
        <li>A controller or network management system can use it to securely bootstrap network devices in remote locations, even if the (Data-Plane) network in between is not yet configured; no Data-Plane dependent bootstrap configuration is required.  An example of such a secure bootstrap process is described in <xref target="I-D.ietf-anima-bootstrapping-keyinfra" format="default"/>.</li>
        <li>An operator can use it to access remote devices using protocols such as Secure SHell (SSH) or Network Configuration Protocol (NETCONF) running across the ACP, even if the network is misconfigured or not configured.</li>
      </ol>
      <t>This document describes these purposes as use cases for the ACP in <xref target="usage" format="default"/>, it defines the requirements in <xref target="requirements" format="default"/>. <xref target="overview" format="default"/> gives an overview how the ACP is constructed.</t>
      <t>The normative part of this document starts with <xref target="self-creation" format="default"/>, where the ACP is specified. <xref target="acp-l2-switches" format="default"/> explains how to support ACP on L2 switches (normative). <xref target="workarounds" format="default"/> explains how non-ACP nodes and networks can be integrated (normative).</t>
      <t>The remaining sections are non-normative: <xref target="benefit" format="default"/> reviews benefits of the ACP (after all the details have been defined), <xref target="operational" format="default"/> provides operational recommendations, <xref target="further" format="default"/> provides additional explanations and describes additional details or future standard or propriety extensions that were considered not to be appropriate for standardization in this document but were considered important to document. There are no dependencies against <xref target="further" format="default"/> to build a complete working and interoperable
ACP according to this document.</t>
      <t>The ACP provides secure IPv6 connectivity, therefore it can be used not only as the secure connectivity for self-management as required for the ACP in <xref target="RFC7575" format="default"/>, but it can also be used as the secure connectivity for traditional (centralized) management. The ACP can be implemented and operated without any other components of autonomic networks, except for the GRASP protocol. ACP relies on per-link DULL GRASP (see <xref target="discovery-grasp" format="default"/>) to autodiscover ACP neighbors, and includes the ACP GRASP instance to provide service discovery for clients of the ACP (see <xref target="GRASP" format="default"/>) including for its own maintenance of ACP certificates.</t>
      <t>The document <xref target="RFC8368" format="default">"Using Autonomic Control Plane for Stable Connectivity of Network OAM"</xref> describes how the ACP alone can be used to provide secure and stable connectivity for autonomic and non-autonomic OAM applications, specifically for the case of current non-autonomic networks/nodes. That document also explains how existing management solutions can leverage the ACP in parallel with traditional management models, when to use the ACP and how to integrate with potentially IPv4 only OAM backends.</t>
      <t>Combining ACP with Bootstrapping Remote Secure Key Infrastructures (BRSKI), see <xref target="I-D.ietf-anima-bootstrapping-keyinfra" format="default"/>) results in the "Autonomic Network Infrastructure" (ANI) as defined in <xref target="I-D.ietf-anima-reference-model" format="default"/>, which provides autonomic connectivity (from ACP) with secure zero-touch (automated) bootstrap from BRSKI.  The ANI itself does not constitute an Autonomic Network, but it allows the building of more or less autonomic networks on top of it - using either centralized, Software Defined Networking- (SDN-)style (see <xref target="RFC7426" format="default"/>) automation or distributed automation via Autonomic Service Agents (ASA) / Autonomic Functions (AF) - or a mixture of both.  See <xref target="I-D.ietf-anima-reference-model" format="default"/> for more information.</t>
      <section anchor="applicability" numbered="true" toc="default">
        <name>Applicability and Scope</name>
        <t>Please see the following Terminology section (<xref target="terminology" format="default"/>) for explanations of terms used in this section.</t>
        <t>The design of the ACP as defined in this document is considered to be applicable to all types of "professionally managed" networks: Service Provider, Local Area Network (LAN), Metro(politan networks), Wide Area Network (WAN), Enterprise Information Technology (IT) and <xref target="ot" format="none">-&gt;"Operational Technology"</xref> (OT) networks. The ACP can operate equally on layer 3 equipment and on layer 2 equipment such as bridges (see <xref target="acp-l2-switches" format="default"/>). The hop-by-hop authentication, integrity-protection and confidentiality mechanism used by the ACP is defined to be negotiable, therefore it can be extended  to environments with different protocol preferences. The minimum implementation requirements in this document attempt to achieve maximum interoperability by requiring support for multiple options depending on the type of device: IPsec, see <xref target="RFC4301" format="default"/>, and Datagram Transport Layer Security (DTLS, see <xref target="DTLS" format="default"/>).</t>
        <t>The implementation footprint of the ACP consists of Public Key Infrastructure (PKI) code for the ACP certificate including "Enrollment over Secure Transport (EST, see <xref target="RFC7030" format="default"/>), the GRASP protocol, UDP, TCP and Transport Layer Security (TLS, see <xref target="tls" format="default"/>), for security and reliability of GRASP and for EST, the ACP secure channel protocol used (such as IPsec or DTLS), and an instance of IPv6 packet forwarding and routing via the Routing Protocol for Low-power and Lossy Networks (RPL), see <xref target="RFC6550" format="default"/>, that is separate from routing and forwarding for the Data-Plane (user traffic).</t>
        <t>The ACP uses only IPv6 to avoid complexity of dual-stack ACP operations (IPv6/IPv4). Nevertheless, it can without any changes be integrated into even otherwise IPv4-only network devices. The Data-Plane itself would not need to change and it could continue to be IPv4 only. For such IPv4-only devices, the IPv6 protocol itself would be additional implementation footprint that is only required for the ACP.</t>
        <t>The protocol choices of the ACP are primarily based on wide use and support in networks and devices, well understood security properties and required scalability. The ACP design is an attempt to produce the lowest risk combination of existing technologies and protocols to build a widely applicable operational network management solution.</t>
        <t>RPL was chosen because it requires a smaller routing table footprint in large networks compared to other routing protocols with an autonomically configured single area. The deployment experience of large scale Internet of Things (IoT) networks serves as the basis for wide deployment experience with RPL. The profile chosen for RPL in the ACP does not leverage any RPL specific forwarding plane features (IPv6 extension headers), making its implementation a pure control plane software requirement.</t>
        <t>GRASP is the only completely novel protocol used in the ACP, and this choice was necessary because there is no existing suitable protocol to provide the necessary functions to the ACP, so GRASP was developed to fill that gap.</t>
        <t>The ACP design can be applicable to devices constrained with respect to cpu and memory, and to networks constrained with respect to bitrate and reliability,
but this document does not attempt to define the most constrained type of devices or networks to which the ACP is applicable. RPL and DTLS for ACP secure channels are two protocol choices already making ACP more applicable to constrained environments. Support for constrained devices in this specification is opportunistic, but not complete, because the reliable transport for GRASP (see <xref target="GRASP-substrate" format="default"/>) only specifies TCP/TLS.  See <xref target="reuse-acp" format="default"/> for discussions about how future standards or proprietary extensions/variations of the ACP could better meet different expectations from those on which the current design is based including supporting constrained devices better.</t>
      </section>
      <!-- applicability -->
    </section>
    <!-- intro -->
    <section anchor="terminology" numbered="true" toc="default">
      <name>Acronyms and Terminology (Informative)</name>
      <t>[RFC Editor: Please add ACP, BRSKI, GRASP, MASA to https://www.rfc-editor.org/materials/abbrev.expansion.txt.]</t>
      <t>[RFC Editor: What is the recommended way to reference a hanging text, e.g.: to 
       a definition in the list of definitions ? Up to -28, this document was using XMLv2
       and the the only option I could find for RFC/XML to point to a hanging text was 
       format="title" , which leads to references such as '-&gt;"ACP certificate" ()', aka:
       redundant empty parenthsis. Many reviewer where concerned about this.
       I created a ticket to ask for an xml2rfc enhancement to avoid this
       in the future: https://trac.tools.ietf.org/tools/xml2rfc/trac/ticket/347. When i
       changed to XMLv3 in version -29, i could get rid of the unnecessary () by using
       format="none", but that format is declared to be deprecated in XMLv3. So i am not
       aware of any working AND "non-deprecated" option.]</t>

      <t>[RFC Editor: Question: Is it possible to change the first occurrences of
        [RFCxxxx] references to "rfcxxx title" [RFCxxxx]? the XML2RFC format does
        not seem to offer such a format, but I did not want to duplicate 50 first
        references - one reference for title mentioning and one
        for RFC number.]</t>

      <t>This document serves both as a normative specification for how ACP
        nodes have to behave as well as describing requirements, benefits,
        architecture and operational aspects to explain the context. 
        Normative sections are labelled "(Normative)" and use BCP 14 keywords. 
        Other sections are labelled "(Informative)" and do not use those normative
        keywords.</t>
      <t>In the rest of the document we will refer to systems using the ACP as "nodes".  Typically such a node is a physical (network equipment) device, but it can equally be some virtualized system.  Therefore, we do not refer to them as devices unless the context specifically calls for a physical system.</t>
      <t>This document introduces or uses the following terms (sorted alphabetically).  Terms introduced are
        explained on first use, so this list is for reference only.</t>
      <dl spacing="compact">
        <dt>ACP:</dt>
        <dd>"Autonomic Control Plane".  The Autonomic Function as defined in this document.
            It provides secure zero-touch (automated) transitive (network wide) IPv6 connectivity for all nodes in the same ACP domain as well as a GRASP instance running across this ACP IPv6 connectivity.
            The ACP is primarily meant to be used as a component of the ANI to enable Autonomic Networks
            but it can equally be used in simple ANI networks (with no other Autonomic Functions) or
            completely by itself.
            </dd>
        <dt>ACP address:</dt>
        <dd>An IPv6 address assigned to the ACP node.  It is stored
            in the acp-node-name of the <xref target="domcert-def" format="none">-&gt;"ACP certificate"</xref>.
            </dd>
        <dt>ACP address range/set:</dt>
        <dd>The ACP address may imply a range or set of addresses that the node can assign for different purposes.  This address range/set is derived by the node from the format of the ACP address called the "addressing sub-scheme".
            </dd>
        <dt>ACP connect interface:</dt>
        <dd>An interface on an ACP node providing access to the ACP for non ACP capable nodes without using an ACP secure channel.  See <xref target="NMS" format="default"/>.
            </dd>
        <dt>ACP domain:</dt>
        <dd>The ACP domain is the set of nodes with <xref target="domcert-def" format="none">-&gt;"ACP certificates"</xref> that allow them to authenticate each other as members of the ACP domain.  See also <xref target="certcheck" format="default"/>.</dd>
        <dt>ACP (ANI/AN) certificate:</dt>
        <dd anchor="domcert-def">A <xref target="RFC5280" format="default"/> certificate (LDevID) 
            carrying the acp-node-name which is used by the ACP to learn its address
            in the ACP and to derive and cryptographically assert its membership in the ACP domain.
            </dd>
        <dt>ACP acp-node-name field:</dt>
        <dd>An information field in the ACP certificate in
            which the ACP relevant information is encoded: the ACP domain name, the ACP IPv6 address of the node
            and optional additional role attributes about the node.
            </dd>
        <dt>ACP Loopback interface:</dt>
        <dd anchor="acp-loopback-def">The Loopback interface in the ACP Virtual Routing and Forwarding (VRF) that has the ACP address assigned to it. See <xref target="ACP-loopback" format="default"/>.
            </dd>
        <dt>ACP network:</dt>
        <dd>The ACP network constitutes all the nodes that have access to the ACP.
            It is the set of active and transitively connected nodes of an ACP domain plus all nodes that get access to 
            the ACP of that domain via ACP edge nodes.
            </dd>
        <dt>ACP (ULA) prefix(es):</dt>
        <dd>The /48 IPv6 address prefixes used across the ACP.  In the normal/simple case, the ACP has one ULA prefix, see <xref target="addressing" format="default"/>.  The ACP routing table may include multiple ULA prefixes if the "rsub" option is used to create addresses from more than one ULA prefix.  See <xref target="domcert-acpinfo" format="default"/>.  The ACP may also include non-ULA prefixes if those are configured on ACP connect interfaces.  See <xref target="NMS" format="default"/>.
            </dd>
        <dt>ACP secure channel:</dt>
        <dd>A channel authenticated via <xref target="domcert-def" format="none">-&gt;"ACP certificates"</xref> providing integrity protection and confidentiality through encryption. These are established between (normally) adjacent ACP nodes to carry traffic of the ACP VRF securely and isolated from Data-Plane traffic in-band over the same link/path as the Data-Plane.
            </dd>
        <dt>ACP secure channel protocol:</dt>
        <dd>The protocol used to build an ACP secure channel,
            e.g., Internet Key Exchange Protocol version 2 (IKEv2) with IPsec or Datagram Transport Layer Security (DTLS).
            </dd>
        <dt>ACP virtual interface:</dt>
        <dd>An interface in the ACP VRF mapped to one or more
            ACP secure channels.  See <xref target="ACP_interfaces" format="default"/>.
            </dd>
        <dt>AN</dt>
        <dd>"Autonomic Network": A network according to <xref target="I-D.ietf-anima-reference-model" format="default"/>.
            Its main components are ANI, Autonomic Functions and Intent.
            </dd>
        <dt>(AN) Domain Name:</dt>
        <dd>An FQDN (Fully Qualified Domain Name) in the acp-node-name of the Domain Certificate.  See <xref target="domcert-acpinfo" format="default"/>.
            </dd>
        <dt>ANI (nodes/network):</dt>
        <dd>"Autonomic Network Infrastructure". 
            The ANI is the infrastructure to enable Autonomic Networks.  It includes ACP, BRSKI and GRASP. 
            Every Autonomic Network includes the ANI, but not every ANI network needs to include autonomic functions beyond the ANI (nor Intent).  An ANI network without further autonomic functions can for example support secure zero-touch (automated) bootstrap
            and stable connectivity for SDN networks - see <xref target="RFC8368" format="default"/>.
            </dd>
        <dt>ANIMA:</dt>
        <dd>"Autonomic Networking Integrated Model and Approach".
            ACP, BRSKI and GRASP are specifications of the IETF ANIMA working group.
            </dd>
        <dt>ASA:</dt>
        <dd>"Autonomic Service Agent".  Autonomic software modules running on
            an ANI device.  The components making up the ANI (BRSKI, ACP, GRASP) are also described as ASAs.
            </dd>
        <dt>Autonomic Function:</dt>
        <dd>A function/service in an Autonomic Network (AN)
            composed of one or more ASA across one or more ANI nodes.
            </dd>
        <dt>BRSKI:</dt>
        <dd>"Bootstrapping Remote Secure Key Infrastructures"
            (<xref target="I-D.ietf-anima-bootstrapping-keyinfra" format="default"/>.  A protocol extending EST to
            enable secure zero-touch bootstrap in conjunction with ACP.  ANI nodes use ACP, BRSKI and GRASP.
            </dd>
        <dt>CA:</dt>
        <dd anchor="ca-def">"Certification Authority". An entity that issues digital certificates. A CA uses its private key to sign the certificates it issues. Relying parties use the public key in the CA certificate to validate the signature.</dd>
        <dt>CRL:</dt>
        <dd>"Certificate Revocation List". A list of revoked certificates. Required to revoke certificates before their lifetime expires.
            </dd>
        <dt>Data-Plane:</dt>
        <dd>The counterpoint to the ACP VRF in an ACP node: forwarding of user traffic and
            in non-autonomous nodes/networks also any non-autonomous control and/or management plane functions.
            In a fully Autonomic Network node, the Data-Plane is managed autonomically via Autonomic
            Functions and Intent. See <xref target="intro" format="default"/> for more detailed explanations.
            </dd>
        <dt>device:</dt>
        <dd>A physical system, or physical node.</dd>
        <dt>Enrollment:</dt>
        <dd>The process through which a node authenticates itself to a
            network with an initial identity, which is often called IDevID certificate, and acquires from the network
            a network specific identity, which is often called LDevID certificate, and certificates of one or more Trust Anchor(s).
            In the ACP, the LDevID certificate is called the ACP certificate.
            </dd>
        <dt>EST:</dt>
        <dd>"Enrollment over Secure Transport" (<xref target="RFC7030" format="default"/>).  IETF
            standard-track protocol for enrollment of a node with an LDevID certificate.  BRSKI is based on EST.
            </dd>
        <dt>GRASP:</dt>
        <dd>"Generic Autonomic Signaling Protocol".  An extensible signaling
            protocol required by the ACP for ACP neighbor discovery.</dd>
        <dt/>
        <dd>The ACP also provides the
            "security and transport substrate" for the "ACP instance of GRASP". This instance 
            of GRASP runs across the ACP secure channels to support BRSKI and other NOC/OAM or
            Autonomic Functions.  See <xref target="I-D.ietf-anima-grasp" format="default"/>.
            </dd>
        <dt>IDevID:</dt>
        <dd>An "Initial Device IDentity" X.509 certificate installed by
            the vendor on new equipment.  Contains information that establishes the identity of the
            node in the context of its vendor/manufacturer such as device model/type
            and serial number.  See <xref target="AR8021" format="default"/>. The IDevID certificate cannot be used as a node identifier for the
            ACP because they are not provisioned by the owner of the network, so they can
            not directly indicate an ACP domain they belong to.
            </dd>
        <dt>in-band (management/signaling):</dt>
        <dd anchor="in-band-def">
            In-band management traffic and/or control plane signaling uses the same network
            resources such as routers/switches and network links that it manages/controls.
            In-band is the standard management and signaling mechanism in IP networks.
            Compared to <xref target="out-of-band-def" format="none">-&gt;"out-of-band"</xref> it
            requires no additional physical resources, but introduces potentially circular
            dependencies for its correct operations.
            See <xref target="intro" format="none">-&gt;"introduction"</xref>.
            </dd>
        <dt>Intent:</dt>
        <dd>Policy language of an autonomic network according to <xref target="I-D.ietf-anima-reference-model" format="default"/>.
            </dd>
        <dt>Loopback interface:</dt>
        <dd>See 
            <xref target="acp-loopback-def" format="none">-&gt;"ACP Loopback interface"</xref>.
            </dd>
        <dt>LDevID:</dt>
        <dd>A "Local Device IDentity" is an X.509 certificate installed during
            "enrollment".  The Domain Certificate used by the ACP is an LDevID certificate.  See <xref target="AR8021" format="default"/>.
            </dd>
        <dt>Management:</dt>
        <dd>Used in this document as another word for <xref target="OAM" format="none">-&gt;"OAM"</xref>.
            </dd>
        <dt>MASA (service):</dt>
        <dd>"Manufacturer Authorized Signing Authority".  A vendor/manufacturer
            or delegated cloud service on the Internet used as part of the BRSKI protocol.
            </dd>
        <dt>MIC:</dt>
        <dd>"Manufacturer Installed Certificate".  This is another word to describe an IDevID in referenced materials.  This term is not used in this document.
            </dd>
        <dt>native interface:</dt>
        <dd>Interfaces existing on a node without configuration of the already running node.  On physical nodes these are usually physical interfaces.  On virtual nodes their equivalent.
            </dd>
        <dt>NOC:</dt>
        <dd>Network Operations Center.
            </dd>
        <dt>node:</dt>
        <dd>A system supporting the ACP according to this document.  Can be virtual or physical.  Physical nodes are called devices.
            </dd>
        <dt>Node-ID:</dt>
        <dd anchor="node-id">
            The identifier of an ACP node inside that ACP. It is the last 64 (see <xref target="zone-scheme" format="default"/>) or 78-bits (see <xref target="Vlong" format="default"/>) of the ACP address.
            </dd>
        <dt>OAM:</dt>
        <dd anchor="OAM">Operations, Administration and Management. Includes Network Monitoring.
            </dd>
        <dt>Operational Technology (OT):</dt>
        <dd anchor="ot"><eref target="https://en.wikipedia.org/wiki/Operational_Technology"/>:
             "The hardware and software dedicated to detecting or causing changes
              in physical processes through direct monitoring and/or control of physical
              devices such as valves, pumps, etc.". OT networks are today in most cases
              well separated from Information Technology (IT) networks.
             </dd>
        <dt>out-of-band (management) network:</dt>
        <dd anchor="out-of-band-def">
             An out-of-band network is a secondary network
             used to manage a primary network. The equipment of the primary network is connected to
             the out-of-band network via dedicated management ports on the primary network equipment.
             Serial (console) management ports were historically most common, higher end network equipment
             now also has ethernet ports dedicated only for management. An out-of-band network provides
             management access to the primary network independent of the configuration state of the primary
             network.  See <xref target="intro" format="none">-&gt;"Introduction"</xref></dd>
        <dt>(virtual) out-of-band network:</dt>
        <dd anchor="virtual-out-of-band-def">
             The ACP can be called a virtual out-of-band network for management and control
             because it attempts to provide the benefits of a (physical)
             <xref target="out-of-band-def" format="none">-&gt;"out-of-band network"</xref>
             even though it is physically carried <xref target="in-band-def" format="none">-&gt;"in-band"</xref>.
             See <xref target="intro" format="none">-&gt;"introduction"</xref>.
            </dd>
        <dt>root CA:</dt>
        <dd>"root Certification Authority". A <xref target="ca-def" format="none">-&gt;"CA"</xref> for which the root CA Key update procedures of <xref target="RFC7030" format="default"/>, Section 4.4 can be applied.
            </dd>
        <dt>RPL:</dt>
        <dd>"IPv6 Routing Protocol for Low-Power and Lossy Networks".  The routing protocol used in the ACP. See <xref target="RFC6550" format="default"/>.
            </dd>
        <dt>(ACP/ANI/BRSKI) Registrar:</dt>
        <dd>
            An ACP registrar is an entity (software and/or person) that is orchestrating
            the enrollment of ACP nodes with the ACP certificate. ANI nodes use
            BRSKI, so ANI registrars are also called BRSKI registrars. For non-ANI ACP nodes,
            the registrar mechanisms are undefined by this document. See <xref target="acp-registrars" format="default"/>. 
            Renewal and other maintenance (such as revocation) of ACP certificates
            may be performed by other entities than registrars. EST must be supported for
            ACP certificate renewal (see <xref target="domcert-maint" format="default"/>). BRSKI
            is an extension of EST, so ANI/BRSKI registrars can easily support ACP domain
            certificate renewal in addition to initial enrollment.
            </dd>
        <dt>RPI:</dt>
        <dd>"RPL Packet Information". Network extension headers for use with the 
            <xref target="rpl-def" format="none">-&gt;"RPL"</xref> routing protocols.
            Not used with RPL in the ACP. See <xref target="rpl-Data-Plane" format="default"/>.
            </dd>
        <dt>RPL:</dt>
        <dd anchor="rpl-def">"Routing Protocol for Low-Power and Lossy Networks". The routing protocol used in the ACP.  See <xref target="routing" format="default"/>.
            </dd>
        <dt>sUDI:</dt>
        <dd>"secured Unique Device Identifier".  This is another word to describe an IDevID in referenced material.  This term is not used in this document.
            </dd>
        <dt>TA:</dt>
        <dd anchor="ta-def">"Trust Anchor". A Trust Anchor is an entity that is trusted for the purpose of certificate validation. Trust Anchor Information such as self-signed certificate(s) of the Trust Anchor is configured into the ACP node as part of Enrollment. See <xref target="RFC5280" format="default"/>, Section 6.1.1.
            </dd>
        <dt>UDI:</dt>
        <dd>"Unique Device Identifier".  In the context of this document unsecured
            identity information of a node typically consisting of at least device model/type and
            serial number, often in a vendor specific format.  See sUDI and LDevID.
            </dd>
        <dt>ULA: (Global ID prefix)</dt>
        <dd>
            A "Unique Local Address" (ULA) is an IPv6 address in the block fc00::/7, defined in
            <xref target="RFC4193" format="default"/>.  It is the approximate IPv6 counterpart of the IPv4 private address
            (<xref target="RFC1918" format="default"/>). The ULA Global ID prefix are the first 48-bits of a ULA address. In this document it is abbreviated as "ULA prefix". 
            </dd>
        <dt>(ACP) VRF:</dt>
        <dd>The ACP is modeled in this document as a "Virtual Routing and Forwarding" instance (VRF). This means that it is based on a "virtual router" consisting of a separate IPv6 forwarding table to which the ACP virtual interfaces are attached and an associated IPv6 routing table separate from the Data-Plane. Unlike the VRFs on MPLS/VPN-PE (<xref target="RFC4364" format="default"/>) or LISP XTR (<xref target="RFC6830" format="default"/>), the ACP VRF does not have any special "core facing" functionality or routing/mapping protocols shared across multiple VRFs. In vendor products a VRF such as the ACP-VRF may also be referred to as a so called VRF-lite.
            </dd>
        <dt>(ACP) Zone:</dt>
        <dd>An ACP zone is a set of ACP nodes using the same zone field value in their ACP address according to <xref target="zone-scheme" format="default"/>. Zones are a mechanism to support structured addressing of ACP addresses within the same /48-bit ULA prefix. 
            </dd>
      </dl>
      <t>
 The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",  "MAY", and "OPTIONAL"
 in this document are to be interpreted as described in BCP 14 [RFC2119],[RFC8174]
 when, and only when, they appear in all capitals, as shown here.
</t>
    </section>
    <section anchor="usage" numbered="true" toc="default">
      <name>Use Cases for an Autonomic Control Plane (Informative)</name>
      <t>This section summarizes the use cases that are intended to be supported by an ACP. To understand how these are derived from and relate to the larger set of use cases for autonomic networks, please refer to <xref target="RFC8316" format="default"/>.</t>
      <section anchor="infrastructure" numbered="true" toc="default">
        <name>An Infrastructure for Autonomic Functions</name>
        <t>Autonomic Functions need a stable infrastructure to run on, and all autonomic functions should use the same infrastructure to minimize the complexity of the network.  In this way, there is only need for a single discovery mechanism, a single security mechanism, and single instances of other processes that distributed functions require.</t>
      </section>
      <!-- infrastructure -->
      <section anchor="secure-bootstrap" numbered="true" toc="default">
        <name>Secure Bootstrap over a not configured Network</name>
        <t>Today, bootstrapping a new node typically requires all nodes between a controlling node such as an SDN controller ("Software Defined Networking", see <xref target="RFC7426" format="default"/>) and the new node to be completely and correctly addressed, configured and secured.  Bootstrapping and configuration of a network happens in rings around the controller - configuring each ring of devices before the next one can be bootstrapped.  Without console access (for example through an out-of-band network) it is not possible today to make devices securely reachable before having configured the entire network leading up to them.</t>
        <t>With the ACP, secure bootstrap of new devices and whole new networks can happen without requiring any configuration of unconfigured devices along the path: As long as all devices along the path support ACP and a zero-touch bootstrap mechanism such as BRSKI, the ACP across a whole network of unconfigured devices can be brought up without operator/provisioning intervention. The ACP also provides additional security for any bootstrap mechanism, because it can provide encrypted discovery (via ACP GRASP) of registrars or other bootstrap servers by bootstrap proxies connecting to nodes that are to be bootstrapped and the ACP encryption hides the identities of the communicating entities (pledge and registrar), making it more difficult to learn which network node might be attackable. The ACP certificate can also be used to end-to-end encrypt the bootstrap communication between such proxies and server. Note that bootstrapping here includes not only the first step that can be provided by BRSKI (secure keys), but also later stages where configuration is bootstrapped.</t>
      </section>
      <!-- bootstrap -->
      <section anchor="reachability" numbered="true" toc="default">
        <name>Data-Plane Independent Permanent Reachability</name>
        <t>Today, most critical control plane protocols and OAM protocols are using the Data-Plane of the network.  This leads to often undesirable dependencies between control and OAM plane on one side and the Data-Plane on the other: Only if the forwarding and control plane of the Data-Plane are configured correctly, will the Data-Plane and the OAM/control plane  work as expected.</t>
        <t>Data-Plane connectivity can be affected by errors and faults, for example misconfigurations that make AAA (Authentication, Authorization and Accounting) servers unreachable or can lock an administrator out of a device; routing or addressing issues can make a device unreachable; shutting down interfaces over which a current management session is running can lock an admin irreversibly out of the device.  Traditionally only out-of-band access can help recover from such issues (such as serial console or ethernet management port).</t>
        <t>Data-Plane dependencies also affect applications in a Network Operations Center (NOC) such as SDN controller applications: Certain network changes are today hard to implement, because the change itself may affect reachability of the devices.  Examples are address or mask changes, routing changes, or security policies.  Today such changes require precise hop-by-hop planning.</t>
        <t>Note that specific control plane functions for the Data-Plane often want to depend on forwarding of their packets via the Data-Plane: Aliveness and routing protocol signaling packets across the Data-Plane to verify reachability across the Data-Plane, using IPv4 signaling packets for IPv4 routing vs. IPv6 signaling packets for IPv6 routing.</t>
        <t>Assuming appropriate implementation (see <xref target="general_addressing" format="default"/> for more details), the ACP provides reachability that is independent of the Data-Plane. This  allows the control plane and OAM plane to operate more robustly:
                                </t>
        <ul spacing="compact">
          <li>For management plane protocols, the ACP provides the functionality of a Virtual out-of-band (VooB) channel, by providing connectivity to all nodes regardless of their Data-Plane configuration, routing and forwarding tables.</li>
          <li>For control plane protocols, the ACP allows their operation even when the Data-Plane is temporarily faulty, or during transitional events, such as routing changes, which may affect the control plane at least temporarily.  This is specifically important for autonomic service agents, which could affect Data-Plane connectivity.</li>
        </ul>
        <t>The document <xref target="RFC8368" format="default">"Using Autonomic Control Plane for Stable Connectivity of Network OAM"</xref> explains this use case for the ACP in significantly more detail and explains how the ACP can be used in practical network operations.</t>
      </section>
      <!-- reachability -->
    </section>
    <!-- usage -->
    <section anchor="requirements" numbered="true" toc="default">
      <name>Requirements (Informative)</name>
      <t>The following requirements were identified for the design of the ACP based on the above use-cases (<xref target="usage" format="default"/>). These requirements are informative. The ACP as specified in the normative parts of this document is meeting or exceeding these use-case requirements:</t>
      <ol type="ACP%d:" spacing="compact">
        <li>The ACP should provide robust connectivity: As far as possible, it should be independent of configured addressing, configuration and routing.  Requirements 2 and 3 build on this requirement, but also have value on their own.</li>
        <li>The ACP must have a separate address space from the Data-Plane.  Reason: traceability, debug-ability, separation from Data-Plane, infrastructure security (filtering based on known address space).</li>
        <li>The ACP must use autonomically managed address space.  Reason: easy bootstrap and setup ("autonomic"); robustness (admin cannot break network easily).  This document uses Unique Local Addresses (ULA) for this purpose, see <xref target="RFC4193" format="default"/>.</li>
        <li>The ACP must be generic, that is it must be usable by all the functions and protocols of the ANI.  Clients of the ACP must not be tied to a particular application or transport protocol.</li>
        <li>The ACP must provide security: Messages coming through the ACP must be authenticated to be from a trusted node, and it is very strongly > recommended that they be encrypted.</li>
      </ol>
      <t>Explanation for ACP4: In a fully autonomic network (AN), newly written ASAs could potentially all communicate exclusively via GRASP with each other, and if that was assumed to be the only requirement against the ACP, it would not need to provide IPv6 layer connectivity between nodes, but only GRASP connectivity. Nevertheless, because ACP also intends to support non-AN networks, it is crucial to support IPv6 layer connectivity across the ACP to support any transport and application layer protocols.</t>
      <t>The ACP operates hop-by-hop, because this interaction can be built on IPv6 link local addressing, which is autonomic, and has no dependency on configuration (requirement 1).  It may be necessary to have ACP connectivity across non-ACP nodes, for example to link ACP nodes over the general Internet.  This is possible, but introduces a dependency against stable/resilient routing over the non-ACP hops (see <xref target="remote-acp-neighbors" format="default"/>).</t>
    </section>
    <!-- requirements -->
    <section anchor="overview" numbered="true" toc="default">
      <name>Overview (Informative)</name>
      <t>When a node has an ACP certificate (see <xref target="acp-certificates" format="default"/>) and is enabled to bring up the ACP (see <xref target="node-enable" format="default"/>), it will create its ACP without any configuration as follows. For details, see <xref target="self-creation" format="default"/> and further sections:
                        </t>
      <ol type="1" spacing="compact">
        <li>The node creates a VRF instance, or a similar virtual context for the ACP.</li>
        <li>The node assigns its ULA IPv6 address (prefix) (see <xref target="addressing" format="default"/> which is learned from the acp-node-name (see <xref target="domcert-acpinfo" format="default"/>) of its ACP certificate (see <xref target="acp-certificates" format="default"/>) to an ACP loopback interface (see <xref target="addressing" format="default"/>) and connects this interface into the ACP VRF.</li>
        <li>The node establishes a list of candidate peer adjacencies and candidate channel types to try for the adjacency. This is automatic for all candidate link-local adjacencies, see <xref target="discovery-grasp" format="default"/> across all native interfaces (see <xref target="if-enable-auto" format="default"/>). If a candidate peer is discovered via multiple interfaces, this will result in one adjacency per interface. If the ACP node has multiple interfaces connecting to the same subnet across which it is also operating as an L2 switch in the Data-Plane, it employs methods for ACP with L2 switching, see <xref target="acp-l2-switches" format="default"/>.</li>

        <li>For each entry in the candidate adjacency list, the node negotiates a secure tunnel using the candidate channel types.  See <xref target="channel-selection" format="default"/>.</li>

        <li>The node authenticates the peer node during secure channel setup and authorizes it to become part of the ACP according to <xref target="certcheck" format="default"/>.</li>

        <li>Unsuccessful authentication of a candidate peer results in throttled connection retries for as long as the candidate peer is discoverable. See <xref target="neighbor_verification" format="default"/>.</li>

        <li>Each successfully established secure channel is mapped into an ACP virtual interface, which is placed into the ACP VRF.  See <xref target="ACP-virtual-interfaces" format="default"/>.</li>

        <li>Each node runs a lightweight routing protocol, see <xref target="routing" format="default"/>, to announce reachability of the ACP loopback address (or prefix) across the ACP.</li>

        <li>This completes the creation of the ACP with hop-by-hop secure tunnels, auto-addressing and auto-routing. The node is now an ACP node with a running ACP.</li>

      </ol>
      <t>Note:
                        </t>
      <ul spacing="compact">
        <li>None of the above operations (except the following explicit configured ones) are reflected in the configuration of the node.</li>
        <li>Non-ACP NMS ("Network Management Systems") or SDN controllers have to be explicitly configured for connection into the ACP.</li>
        <li>Additional candidate peer adjacencies for ACP connections across non-ACP Layer-3 clouds requires explicit configuration. See <xref target="remote-acp-neighbors" format="default"/>.</li>
      </ul>
      <t>The following figure illustrates the ACP.</t>
      <figure anchor="acp">
        <name>ACP VRF and secure channels</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
          ACP node 1                          ACP node 2
       ...................               ...................
secure .                 .   secure      .                 .  secure
channel:  +-----------+  :   channel     :  +-----------+  : channel
..--------| ACP VRF   |---------------------| ACP VRF   |---------..
       : / \         / \   <--routing-->   / \         / \ :
       : \ /         \ /                   \ /         \ / :
..--------| Loopback  |---------------------| Loopback  |---------..
       :  | interface |  :               :  | interface |  :
       :  +-----------+  :               :  +-----------+  :
       :                 :               :                 :
       :   Data-Plane    :...............:   Data-Plane    :
       :                 :    link       :                 :
       :.................:               :.................:
        ]]></artwork>
      </figure>
      <t>The resulting overlay network is normally based exclusively on hop-by-hop tunnels.  This is because addressing used on links is IPv6 link local addressing, which does not require any prior set-up.  In this way the ACP can be built even if there is no configuration on the node, or if the Data-Plane has issues such as addressing or routing problems.</t>
    </section>
    <!-- overview -->
    <section anchor="self-creation" numbered="true" toc="default">
      <name>Self-Creation of an Autonomic Control Plane (ACP) (Normative)</name>
      <t>This section specifies the components and steps to set up an ACP. The ACP is automatically "self-creating", which makes it "indestructible" against most changes to the Data-Plane, including misconfigurations of routing, addressing, NAT, firewall or any other traffic policy filters that inadvertently or otherwise unavoidably would also impact the management plane traffic, such as the actual operator CLI session or controller NetConf session through which the configuration changes to the Data-Plane are executed.</t>
      <t>Physical misconfiguration of wiring between ACP nodes will also not break the ACP: As long as there is a transitive physical path between ACP nodes, the ACP should be able to recover given that it automatically operates across all interfaces of the ACP nodes and automatically determines paths between them.</t>
      <t>Attacks against the network via incorrect routing or addressing information for the Data-Plane will not impact the ACP. Even impaired ACP nodes will have a significantly reduced attack surface against malicious misconfiguration because only very limited ACP or interface up/down configuration can affect the ACP, and pending on their specific designs these type of attacks could also be eliminated. See more in <xref target="enabling-acp" format="default"/> and <xref target="security" format="default"/>.</t>
      <t>An ACP node can be a router, switch, controller, NMS host, or any other IPv6 capable node.  Initially, it MUST have its ACP certificate, as well as an (empty) ACP Adjacency Table (described in <xref target="adj-table" format="default"/>).  It then can start to discover ACP neighbors and build the ACP.  This is described step by step in the following sections:</t>

      <section anchor="tls" numbered="true" toc="default">
        <name>Requirements for use of Transport Layer Security (TLS)</name>
          <t>The following requirements apply to TLS required or used by ACP components. Applicable ACP components include ACP certificate maintenance via EST, see <xref target="domcert-maint" format="default"/>, TLS connections for Certificate Revocation List (CRL) Distribution Point (CRLDP) or Online Certificate Status Protocol (OCSP) responder (if used, see <xref target="certcheck" format="default"/>) and ACP GRASP (see <xref target="GRASP-substrate" format="default"/>). On ANI nodes these requirements also apply to BRSKI.</t>

          <t>TLS MUST comply with <xref target="RFC7525" format="default"/> except that TLS 1.2 (<xref target="RFC5246" format="default"/>) is REQUIRED and that older versions of TLS MUST NOT be used.  TLS 1.3 (<xref target="RFC8446" format="default"/>) SHOULD be supported. The choice for TLS 1.2 as the lowest common denominator for the ACP is based on current expected most likely availability across the wide range of candidate ACP node types, potentially with non-agile operating system TCP/IP stacks.</t>

          <t>TLS MUST offer TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 and TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 and MUST NOT offer options with less than 256 bit symmetric key strength or hash strength of less than SHA384.  When TLS 1.3 is  supported, TLS_AES_256_GCM_SHA384 MUST be offered and TLS_CHACHA20_POLY1305_SHA256 MAY be offered.</t>

          <t>TLS MUST also include the "Supported Elliptic Curves" extension, it MUST support the NIST P-256 (secp256r1(22)) and P-384 (secp384r1(24)) curves <xref target="RFC4492" format="default"/>.  In addition, TLS clients SHOULD send an ec_point_formats extension with a single element, "uncompressed".</t>

      </section>

      <section anchor="domcert" numbered="true" toc="default">
        <name>ACP Domain, Certificate and Network</name>
        <t>The ACP relies on group security.  An ACP domain is a group of nodes that trust
each other to participate in ACP operations such as creating ACP secure channels
in an autonomous peer-to-peer fashion between ACP domain members via protocols such as IPsec. 
To authenticate and authorize another ACP member node with access to the ACP Domain, each ACP member requires
keying material: An ACP node MUST have a Local Device IDentity (LDevID) certificate,
henceforth called the ACP certificate and information about one or more Trust Anchor (TA)
as required for the ACP domain membership check (<xref target="certcheck" format="default"/>).</t>
        <t>Manual keying via shared secrets is not usable for an ACP domain because it would require a single shared secret across all current and future ACP domain members to meet the expectation of autonomous, peer-to-peer establishment of ACP secure channels between any ACP domain members. Such a single shared secret would be an inacceptable security weakness. Asymmetric keying material (public keys) without certificates does not provide the mechanisms to authenticate ACP domain membership in an autonomous, peer-to-peer fashion for current and future ACP domain members.</t>
        <t>The LDevID certificate is called the ACP certificate. The TA is the Certification Authority (CA) root certificate of the ACP domain.</t>
        <t>The ACP does not mandate specific mechanisms by which this keying material is provisioned into the ACP node. It only requires the certificate to comply with <xref target="acp-certificates" format="default"/>, specifically to have the acp-node-name as specified in <xref target="domcert-acpinfo" format="default"/> in its domain certificate as well as those of candidate ACP peers.  See <xref target="bootstrap" format="default"/> for more information about enrollment or provisioning options.</t>
        <t>This document uses the term ACP in many places where the Autonomic Networking reference documents <xref target="RFC7575" format="default"/> and <xref target="I-D.ietf-anima-reference-model" format="default"/> use the word autonomic.  This is done because those reference documents consider (only) fully autonomic networks and nodes, but support of ACP does not require support for other components of autonomic networks except for relying on GRASP and providing security and transport for GRASP.  Therefore the word autonomic might be misleading to operators interested in only the ACP.</t>
        <t><xref target="RFC7575" format="default"/> defines the term "Autonomic Domain" as a collection of autonomic nodes.  ACP nodes do not need to be fully autonomic, but when they are, then the ACP domain is an autonomic domain.  Likewise, <xref target="I-D.ietf-anima-reference-model" format="default"/> defines the term "Domain Certificate" as the certificate used in an autonomic domain.  The ACP certificate is that domain certificate when ACP nodes are (fully) autonomic nodes.  Finally, this document uses the term ACP network to refer to the network created by active ACP nodes in an ACP domain.  The ACP network itself can extend beyond ACP nodes through the mechanisms described in <xref target="ACPconnect" format="default"/>.</t>
        <section anchor="acp-certificates" numbered="true" toc="default">
          <name>ACP Certificates</name>
          <t>ACP certificates MUST be <xref target="RFC5280" format="default"/> compliant X.509 v3 (<xref target="X.509" format="default"/>) certificates.</t>
          <t>ACP nodes MUST support handling ACP certificates, TA certificates and certificate chain certificates (henceforth just called certificates in this section) with RSA public keys and certificates with Elliptic Curve (ECC) public keys.</t>

          <t>ACP nodes MUST NOT support certificates with RSA public keys of less than 2048 bit modulus or curves with group order of less than 256 bit. They MUST support certificates with RSA public keys with 2048 bit modulus and MAY support longer RSA keys. They MUST support certificates with ECC public keys using NIST P-256 curves and SHOULD support P-384 and P-521 curves.</t>

          <t>ACP nodes MUST NOT support certificates with RSA public keys whose
          modulus is less than 2048 bits, or certificates whose ECC public keys
          are in groups whose order is less than 256 bits.  RSA signing
          certificates with 2048-bit public keys MUST be supported, and such
          certificates with longer public keys MAY be supported.  ECDSA
          certificates using the NIST P-256 curve MUST be supported, and such
          certificates using the P-384 and P-521 curves SHOULD be supported.</t>

          <t>ACP nodes MUST support RSA certificates that are signed by RSA
          signatures over the SHA-256 digest of the contents, and SHOULD
          additionally support SHA-384 and SHA-512 digests in such signatures.
          The same requirements for certificate signatures apply to ECDSA
          certificates, and additionally, ACP nodes MUST support ECDSA
          signatures on ECDSA certificates.</t>

          <t>The ACP certificate SHOULD use an RSA key and an RSA signature when the ACP certificate is intended to be used not only for ACP authentication but also for other purposes. The ACP certificate MAY use an ECC key and an ECDSA signature if the ACP certificate is only used for ACP and ANI authentication and authorization.</t>

          <t>Any secure channel protocols used for the ACP as specified in this document or extensions of this document MUST therefore support authentication (e.g.:signing) starting with these type of certificates. See <xref target="RFC4492" format="default"/> for more information.</t>

          <t>The reason for these choices are as follows: As of 2020, RSA is still more widely used than ECC, therefore the MUST for RSA. ECC offers equivalent security at (logarithmically) shorter key lengths (see <xref target="RFC4492" format="default"/>). This can be beneficial especially in the presence of constrained bandwidth or constrained nodes in an ACP/ANI network. Some ACP functions such as GRASP peer-2-peer across the ACP require end-to-end/any-to-any authentication/authorization, therefore ECC can only reliably be used in the ACP when it MUST be supported on all ACP nodes. RSA signatures are mandatory to be supported also for ECC certificates because CAs themselves may not support ECC yet.</t>

          <t>The ACP certificate SHOULD be used for any authentication between nodes with ACP
domain certificates (ACP nodes and NOC nodes) where a required authorization condition is ACP domain membership, such as ACP node to NOC/OAM end-to-end security and ASA to ASA end-to-end security.
<xref target="certcheck" format="default"/> defines this "ACP domain membership check".
The uses of this check that are standardized in this document are for the establishment of
hop-by-hop ACP secure channels (<xref target="neighbor_verification" format="default"/>) and for ACP GRASP (<xref target="GRASP-substrate" format="default"/>) end-to-end via TLS.</t>

          <t>The ACP domain membership check requires a minimum amount of elements in a certificate as described in <xref target="certcheck" format="default"/>. The identity of a node in the ACP is carried via the acp-node-name as defined in <xref target="domcert-acpinfo" format="default"/>.</t>
          <t>In support of ECDH key establishment, ACP certificates with ECC keys MUST indicate to be Elliptic Curve Diffie-Hellman capable (ECDH): If the X.509v3 keyUsage extension is present, the keyAgreement bit MUST be set.</t>

          <t>Any other fields of the ACP certificate are to be populated as required by <xref target="RFC5280" format="default"/>: As long as they are compliant with <xref target="RFC5280" format="default"/>, any other field of an ACP certificate can be set as desired by the operator of the ACP domain through appropriate ACP registrar/ACP CA procedures. For example, other fields may be required for other purposes that the ACP certificate is intended to be used for (such as elements of a SubjectName).</t>

          <t>For further certificate details, ACP certificates may follow the recommendations from <xref target="CABFORUM" format="default"/>.</t>

          <t>For diagnostic and other operational purposes, it is beneficial to copy the device identifying fields of the node's IDevID certificate into the ACP certificate, such as the <xref target="X.520" format="default"/>, section 6.2.9 "serialNumber" attribute in the subjects field distinguished name encoding. Note that this is not the certificate serial number.  See also <xref target="I-D.ietf-anima-bootstrapping-keyinfra" format="default"/> section 2.3.1. This can be done for example if it would be acceptable for the devices "serialNumber" to be signalled via the Link Layer Discovery Protocol (LLDP, <xref target="LLDP" format="default"/>) because like LLDP signalled information, the ACP certificate information can be retrieved by neighboring nodes without further authentication and be used either for beneficial diagnostics or for malicious attacks. Retrieval of the ACP certificate is possible via a (failing) attempt to set up an ACP secure channel, and the "serialNumber" contains usually device type information that may help to faster determine working exploits/attacks against the device.</t>

          <t>Note that there is no intention to constrain authorization within the ACP or autonomic networks using the ACP to just the ACP domain membership check as defined in this document. It can be extended or modified with additional requirements. Such future authorizations can use and require additional elements in certificates or policies or even additional certificates. See the additional check agagainst the id-kp-cmcRA <xref target="RFC6402" format="default"/> extended key usage attribute (<xref target="domcert-maint" format="default"/>) and for possible future extensions, see <xref target="role-assignments" format="default"/>.</t>

        </section>
        <section anchor="domcert-acpinfo" numbered="true" toc="default">
          <name>ACP Certificate AcpNodeName</name>
          <?rfc needLines="20" ?>
          <figure anchor="acp-dominfo-abnf">
            <name>ACP Node Name ABNF</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
  acp-node-name = local-part "@" acp-domain-name
  local-part = [ acp-address ] [ "+" rsub extensions ]
  acp-address = 32HEXDIG | "0" ; HEXDIG as of RFC5234 section B.1
  rsub = [ <subdomain> ] ; <subdomain> as of RFC1034, section 3.5
  acp-domain-name = ; <domain> ; as of RFC 1034, section 3.5
  extensions = *( "+" extension )
  extension  = 1*etext  ; future standard definition.
  etext      = ALPHA / DIGIT /  ; Printable US-ASCII
               "!" / "#" / "$" / "%" / "&" / "'" /
               "*" / "-" / "/" / "=" / "?" / "^" /
               "_" / "`" / "{" / "|" / "}" / "~"
                  
  routing-subdomain = [ rsub "." ] acp-domain-name

  Example:
    given an ACP address   of fd89:b714:f3db:0:200:0:6400:0000
    and an ACP domain-name of acp.example.com
    and an rsub extenstion of area51.research

  then this results in:
  acp-node-name      = fd89b714f3db00000200000064000000
                       +area51.research@acp.example.com
  acp-domain-name    = acp.example.com
  routing-subdomain  = area51.research.acp.example.com
]]></artwork>
          </figure>
          <t>acp-node-name in above <xref target="acp-dominfo-abnf" format="default"/> is the ABNF (<xref target="RFC5234" format="default"/>) definition of the ACP Node Name. An ACP certificate MUST carry this information. It MUST be encoded as a subjectAltName / otherName / AcpNodeName as described in <xref target="asn1" format="default"/>.</t>
          <t>Nodes complying with this specification MUST be able to receive their ACP address through the domain certificate, in which case their own ACP certificate MUST have a 32HEXDIG acp-address field. Acp-address is case insensitive because ABNF HEXDIG is. It is recommended to encode acp-address with lower case letters. Nodes complying with this specification MUST also be able to authenticate nodes as ACP domain members or ACP secure channel peers when they have a 0-value acp-address field and as ACP domain members (but not as ACP secure channel peers) when the acp-address field is omitted from their AcpNodeName.  See <xref target="certcheck" format="default"/>.</t>
          <t>acp-domain-name is used to indicate the ACP Domain across which ACP nodes authenticate and authorize each other, for example to build ACP secure channels to each other, see <xref target="certcheck" format="default"/>.  acp-domain-name SHOULD be the FQDN of an Internet domain owned by the network administration of the ACP and ideally reserved to only be used for the ACP. In this specification it serves to be a name for the ACP that ideally is globally unique.  When acp-domain-name is a globally unique name, collision of ACP addresses across different ACP domains can only happen due to ULA hash collisions (see <xref target="scheme" format="default"/>). Using different acp-domain-names, operators can distinguish multiple ACP even when using the same TA.</t>
          <t>To keep the encoding simple, there is no consideration for internationalized acp-domain-names. The acp-node-name is not intended for end user consumption, and there is no protection against someone not owning a domain name to simply choose it. Instead, it serves as a hash seed for the ULA and for diagnostics to the operator. Therefore, any operator owning only an internationalized domain name should be able to pick an equivalently unique 7-bit ASCII acp-domain-name string representing the internationalized domain name.</t>
          <t>"routing-subdomain" is a string that can be constructed from the acp-node-name, and it is used in the hash-creation of the ULA (see below).  The presence of the "rsub" component allows a single ACP domain to employ multiple /48 ULA prefixes.  See <xref target="domain-usage" format="default"/> for example use-cases.</t>
          <t>The optional "extensions" field is used for future standardized extensions to this specification.  It MUST be ignored if present and not understood.</t>
          <t>The following points explain and justify the encoding choices described:
    </t>
          <ol type="1" spacing="compact">
            <li>
              <t>Formatting notes:
    </t>
              <ol type="1.%d" spacing="compact">
                <li>"rsub" needs to be in the "local-part": If the format just had routing-subdomain as the domain part of the acp-node-name, rsub and acp-domain-name could not be separated from each other to determine in the ACP domain membership check which part is the acp-domain-name and which is solely for creating a different ULA prefix.</li>
                <li>If both "acp-address" and "rsub" are omitted from AcpNodeName, the "local-part" will have the format "++extension(s)". The two plus characters are necessary so the node can unambiguously parse that both "acp-address" and "rsub" are omitted.</li>
              </ol>
            </li>
            <li>
              <t>The encoding of the ACP domain name and ACP address as described in this section is used for the following reasons: 

    </t>
              <ol type="2.%d" spacing="compact">
                <li>The acp-node-name is the identifier of a node's ACP. It includes the necessary components to identify a nodes ACP both from within the ACP as well as from the outside of the ACP.</li>
                <li>For manual and/or automated diagnostics and backend management of devices and ACPs, it is necessary to have an easily human readable and software parsed standard, single string representation of the information in the acp-node-name. For example, inventory or other backend systems can always identify an entity by one unique string field but not by a combination of multiple fields, which would be necessary if there was no single string representation.</li>
                <li>If the encoding was not that of such a string, it would be necessary to define a second standard encoding to provide this format (standard string encoding) for operator consumption.</li>
                <li>Addresses of the form &lt;local&gt;@&lt;domain&gt; have become the preferred format for identifiers of entities in many systems, including the majority of user identification in web or mobile applications such as multi-domain single-sign-on systems.</li>
              </ol>
            </li>
            <li>
              <t>Compatibilities:

    </t>
              <ol type="3.%d" spacing="compact">
                <li>It should be possible to use the ACP certificate as an LDevID certificate on the system for other uses beside the ACP.  Therefore, the information element required for the ACP should be encoded so that it minimizes the possibility of creating incompatibilities with such other uses. The attributes of the subject field for example are often used in non-ACP applications and should therefore not be occupied by new ACP values.</li>
                <li>The element should not require additional ASN.1 en/decoding, because libraries to access certificate information especially for embedded devices may not support extended ASN.1 decoding beyond predefined, mandatory fields. subjectAltName / otherName is already used with a single string parameter for several otherNames (see <xref target="RFC3920" format="default"/>, <xref target="RFC7585" format="default"/>, <xref target="RFC4985" format="default"/>, <xref target="RFC8398" format="default"/>).</li>
                <li>The element required for the ACP should minimize the risk of being misinterpreted by other uses of the LDevID certificate.  It also must not be misinterpreted to actually be an email address, hence the use of the otherName / rfc822Name option in the certificate would be inappropriate.</li>
              </ol>
            </li>
          </ol>
          <t>See section 4.2.1.6 of <xref target="RFC5280" format="default"/> for details on the subjectAltName field.</t>
          <section anchor="asn1" numbered="true" toc="default">
            <name>AcpNodeName ASN.1 Module</name>
            <t>The following ASN.1 module normatively specifies the AcpNodeName structure.
This specification uses the ASN.1 definitions from <xref target="RFC5912" format="default"/>
with the 2002 ASN.1 notation used in that document.  <xref target="RFC5912" format="default"/>
updates normative documents using older ASN.1 notation.</t>
            <figure>
              <artwork name="" type="" align="left" alt=""><![CDATA[
ANIMA-ACP-2020
  { iso(1) identified-organization(3) dod(6)
    internet(1) security(5) mechanisms(5) pkix(7) id-mod(0)
    id-mod-anima-acpnodename-2020(IANA1) }

DEFINITIONS IMPLICIT TAGS ::=
BEGIN

IMPORTS
  OTHER-NAME
  FROM PKIX1Implicit-2009
    { iso(1) identified-organization(3) dod(6) internet(1)
      security(5) mechanisms(5) pkix(7) id-mod(0)
      id-mod-pkix1-implicit-02(59) }

  id-pkix
  FROM PKIX1Explicit-2009
    { iso(1) identified-organization(3) dod(6) internet(1)
      security(5) mechanisms(5) pkix(7) id-mod(0)
      id-mod-pkix1-explicit-02(51) } ;

  id-on OBJECT IDENTIFIER ::= { id-pkix 8 }

  AcpNodeNameOtherNames OTHER-NAME ::= { on-AcpNodeName, ... }

  on-AcpNodeName OTHER-NAME ::= {
      AcpNodeName IDENTIFIED BY id-on-AcpNodeName
  }

  id-on-AcpNodeName OBJECT IDENTIFIER ::= { id-on IANA2 }

  AcpNodeName ::= IA5String (SIZE (1..MAX))
   -- AcpNodeName as specified in this document carries the
   -- acp-node-name as specified in the ABNF in Section 6.1.2

END
]]></artwork>
            </figure>
          </section>
        </section>
        <!-- domcert-acpinfo -->
        <section anchor="certcheck" numbered="true" toc="default">
          <name>ACP domain membership check</name>
          <t>The following points constitute the ACP domain membership check of a candidate peer via its certificate:
       </t>
          <dl spacing="compact">
            <dt>1: </dt>
            <dd>The peer has proved ownership of the private key associated with the certificate's public key. This check is performed by the security association protocol used, for example <xref target="RFC7296" format="default"/>, section 2.15.</dd>
            <dt>2: </dt>
            <dd>The peer's certificate passes certificate path validation as defined in <xref target="RFC5280" format="default"/>, section 6 against one of the TA associated with the ACP node's ACP certificate (see <xref target="trust-anchors" format="default"/> below). This includes verification of the validity (lifetime) of the certificates in the path.</dd>
            <dt>3: </dt>
            <dd>If the peer's certificate indicates a Certificate Revocation List (CRL) Distribution Point (CRLDP)
             (<xref target="RFC5280" format="default"/>, section 4.2.1.13) or Online Certificate Status Protocol (OCSP) responder
             (<xref target="RFC5280" format="default"/>, section 4.2.2.1), then the peer's certificate MUST be valid according to those
             mechanisms when they are available: An OCSP check for the peer's certificate across the ACP must succeed or the peer certificate must not be listed in the CRL retrieved from the CRLDP. These mechanisms are not available 
             when the ACP node has no ACP or non-ACP connectivity to retrieve a current CRL
             or access an OCSP responder and the security association protocol itself has also no way to communicate CRL or OCSP check.</dd>
            <dt>   </dt>
            <dd>Retries to learn revocation via OCSP/CRL SHOULD be made using the same backoff as described in <xref target="neighbor_verification" format="default"/>. If and when the ACP node then learns that an ACP peer's certificate is invalid for which rule 3 had to be skipped during ACP secure channel establishment, then the ACP secure channel to that peer MUST be closed even if this peer is the only connectivity to access CRL/OCSP. This applies (of course) to all ACP secure channels to this peer if there are multiple.  The ACP secure channel connection MUST be retried periodically to support the case that the neighbor acquires a new, valid certificate.</dd>
            <dt>4: </dt>
            <dd>The peer's certificate has a syntactically valid acp-node-name field
             and the acp-domain-name in that peer's acp-node-name is the same as in this ACP node's certificate (lowercase normalized).</dd>
          </dl>
          <t>When checking a candidate peer's certificate for the purpose of establishing an ACP secure channel,
         one additional check is performed:

       </t>
          <dl spacing="compact">
            <dt>5: </dt>
            <dd>The acp-address field of the candidate peer certificate's AcpNodeName is not omitted but either 32HEXDIG or 0, according to <xref target="acp-dominfo-abnf" format="default"/>.</dd>
          </dl>
          <t>Technically, ACP secure channels can only be built with nodes that
         have an acp-address. Rule 5 ensures that this is taken into account
         during ACP domain membership check.</t>
          <t>Nodes with an omitted acp-address field can only use their ACP domain
         certificate for non-ACP-secure channel authentication purposes.
         This includes for example NMS type nodes permitted to communicate
         into the ACP via <xref target="ACPconnect" format="default">ACP connect</xref></t>
          <t> The special value 0 in an ACP certificates acp-address field
          is used for nodes that can and should determine their ACP address
          through other mechanisms than learning it through the acp-address
          field in their ACP certificate. These ACP nodes are permitted
          to establish ACP secure channels. Mechanisms for those nodes to
          determine their ACP address are outside the scope of this
          specification, but this option is defined here so that any 
          ACP nodes can build ACP secure channels to them according to Rule 5.</t>
          <t>In summary:
        </t>
          <ul spacing="compact">
            <li>Steps 1...4 constitute standard certificate validity verification and private key authentication as defined by <xref target="RFC5280" format="default"/> and security association protocols (such as Internet Key Exchange Protocol version 2 <xref target="RFC7296" format="default">IKEv2</xref> when leveraging certificates. </li>
            <li>Steps 1...4 do not include verification of any pre-existing form of non-public-key-only based identity elements of a certificate such as a web servers domain name prefix often encoded in certificate common name. Step 5 is an equivalent step for the AcpNodeName.</li>
            <li>Step 4 constitutes standard CRL/OCSP checks refined for the case of missing connectivity and limited functionality security association protocols.</li>
            <li>Steps 1...4 authorize to build any secure connection between members of the same ACP domain except for ACP secure channels.</li>
            <li>Step 5 is the additional verification of the presence of an ACP address as necessary for ACP secure channels.</li>
            <li>Steps 1...5 therefore authorize to build an ACP secure channel.</li>
          </ul>
          <t>For brevity, the remainder of this document refers to this process only as authentication instead of as authentication and authorization.</t>
          <section anchor="cert-time" numbered="true" toc="default">
            <name>Realtime clock and Time Validation</name>
            <t>An ACP node with a realtime clock in which it has confidence, MUST
            check the time stamps when performing ACP domain membership check such as 
            as the certificate validity period in step 1. and the respective
            times in step 4 for revocation information (e.g., signingTimes in CMS signatures).</t>
            <t>An ACP node without such a realtime clock MAY ignore those time
            stamp validation steps if it does not know the current time.
            Such an ACP node SHOULD obtain the current time in a
            secured fashion, such as via a Network Time Protocol signaled through the ACP.
            It then ignores time stamp validation only until the current time is known.
            In the absence of implementing a secured mechanism, such an ACP node MAY
            use a current time learned in an insecure fashion in the ACP domain membership
            check.</t>
            <t>Current time MAY for example be learned unsecured via NTP (<xref target="RFC5905" format="default"/>)
            over the same link-local IPv6 addresses used for the ACP from neighboring ACP nodes.
            ACP nodes that do provide NTP insecure over their link-local addresses SHOULD
            primarily run NTP across the ACP and provide NTP time across the ACP only
            when they have a trusted time source. Details for such NTP procedures are beyond the
            scope of this specification.</t>
            <t>Beside ACP domain membership check, the ACP itself has no
            dependency against knowledge of the current time, but protocols
            and services using the ACP will likeley have the need to know
            the current time. For example event logging.</t>
          </section>
        </section>
        <section anchor="trust-anchors" numbered="true" toc="default">
          <name>Trust Anchors (TA)</name>
          <t>ACP nodes need TA information  according to <xref target="RFC5280" format="default"/>,
section 6.1.1 (d), typically in the form of one or more certificate of the TA to perform certificate
path validation as required by <xref target="certcheck" format="default"/>, rule 2.
TA information MUST be provisioned to an ACP node (together with its ACP
domain certificate) by an ACP Registrar during initial enrollment of a candidate
ACP node. ACP nodes MUST also support renewal of TA information via 
EST as described below in <xref target="domcert-maint" format="default"/>.</t>

          <t>The required information about a TA can consist of not only a single, but
multiple certificates as required for dealing with CA certificate renewals
as explained in Section 4.4 of CMP (<xref target="RFC4210" format="default"/>).</t>
          <t>A certificate path is a chain of certificates starting at
the ACP certificate (leaf/end-entity) followed by zero or more
intermediate CA certificates and ending with the TA information,
which are typically one or two the self-signed certificates of the TA. The
CA that signs the ACP certificate is called the assigning CA.
If there are no intermediate CA, then the assigning CA is the TA.
Certificate path validation authenticates that the ACP certificate is permitted
by a TA associated with the ACP, directly or indirectly via one or more intermediate
CA.</t>
          <t>Note that different ACP nodes may have different intermediate CA 
in their certificate path and even different TA. The set of TA for
an ACP domain must be consistent across all ACP members so that any ACP node
can authenticate any other ACP node.  The protocols through which
ACP domain membership check rules 1-3 are performed need to support
the exchange not only of the ACP nodes certificates, but also exchange of
the intermedia TA.</t>
          <t>ACP nodes MUST support for the ACP domain membership check the certificate path 
validation with 0 or 1 intermediate CA. They SHOULD support 2 intermediate CA
and two TA (to permit migration to from one TA to another TA).</t>
          <t>Certificates for an ACP MUST only be given to nodes that are allowed
to be members of that ACP. When the signing CA relies on an ACP
Registrar, the CA  MUST only sign certificates with acp-node-name
through trusted ACP Registrars. In this setup, any existing CA, unaware of the formatting
of acp-node-name, can be used.</t>
          <t>These requirements can be achieved by using a TA private to the owner of
the ACP domain or potentially through appropriate contractual agreements between
the involved parties (Registrar and CA).  These requirements typically
exclude public CA, because they in general do not support the notion of
trusted registrars vouching for the correctness of the fields of a requested certificate or
would by themselves not be capable to validate the correctness of otherName / AcpNodeName.</t>
          <t>A single owner can operate multiple independent ACP domains from the same
set of TA. Registrars must then know which ACP a node needs to be enrolled into.</t>
        </section>
        <section anchor="domcert-maint" numbered="true" toc="default">
          <name>Certificate and Trust Anchor Maintenance</name>

          <t>ACP nodes MUST support renewal of their Certificate and TA information via EST
and MAY support other mechanisms.  See <xref target="tls" format="default"/> for TLS requirements.
An ACP network MUST have at least one ACP node supporting EST server functionality across the ACP so that EST
renewal is useable.</t>

<t>ACP nodes SHOULD be able to remember the IPv6 locator parameters of
the O_IPv6_LOCATOR in GRASP of the EST server from which they last
renewed their ACP certificate. They SHOULD provide the ability
for these EST server parameters to also be set by the ACP Registrar
(see <xref target="acp-registrars" format="default"/>) that initially enrolled the ACP
device with its ACP certificate. When BRSKI (see <xref target="I-D.ietf-anima-bootstrapping-keyinfra" format="default"/>)
is used, the IPv6 locator of the BRSKI registrar from the BRSKI TLS
connection SHOULD be remembered and used for the next renewal via
EST if that registrar also announces itself as an EST server
via GRASP (see next section) on its ACP address.</t>
          <t>The EST server MUST present a certificate that is passing ACP domain
membership check in its TLS connection setup (<xref target="certcheck" format="default"/>, 
rules 1..4, not rule 5 as this is not for an ACP secure channel setup).
The EST server certificate MUST also contain the id-kp-cmcRA <xref target="RFC6402" format="default"/>
extended key usage attribute and the EST client MUST check its presence.</t>
          <t>The additional check against the id-kp-cmcRA extended key usage extension field
ensures that clients do not fall prey to an illicit EST server.  While such
illicit EST servers should not be able to support certificate signing requests (as they
are not able to elicit a signing response from a valid CA), such an illicit EST server would
be able to provide faked CA certificates to EST clients that need to renew their
CA certificates when they expire.</t>
          <t>Note that EST servers supporting multiple ACP domains will need to have for each
of these ACP domains a separate certificate and respond on a different transport
address (IPv6 address and/or TCP port), but this is easily automated on the
EST server as long as the CA does not restrict registrars to request certificates 
with the id-kp-cmcRA extended usage extension for themselves.</t>
          <section anchor="domcert-grasp" numbered="true" toc="default">
            <name>GRASP objective for EST server</name>
            <t>ACP nodes that are EST servers MUST announce their service via GRASP in the ACP
through M_FLOOD messages. See <xref target="I-D.ietf-anima-grasp" format="default"/>,
section 2.8.11 for the definition of this message type:</t>
            <figure anchor="est-example">
              <name>GRASP SRV.est example</name>
              <artwork name="" type="" align="left" alt=""><![CDATA[
     Example:

     [M_FLOOD, 12340815, h'fd89b714f3db0000200000064000001', 210000,
         [["SRV.est", 4, 255 ],
         [O_IPv6_LOCATOR,
              h'fd89b714f3db0000200000064000001', IPPROTO_TCP, 443]]
     ]
 ]]></artwork>
            </figure>
            <t> The formal definition of the objective in Concise data definition language (CDDL)
   (see <xref target="RFC8610" format="default"/>) is as follows: </t>
            <figure anchor="est-def">
              <name>GRASP SRV.est definition</name>
              <artwork name="" type="" align="left" alt=""><![CDATA[
 flood-message = [M_FLOOD, session-id, initiator, ttl,
                  +[objective, (locator-option / [])]]
                              ; see example above and explanation
                              ; below for initiator and ttl

 objective = ["SRV.est", objective-flags, loop-count,
                                        objective-value]

 objective-flags = sync-only  ; as in GRASP spec
 sync-only       = 4          ; M_FLOOD only requires synchronization
 loop-count      = 255        ; recommended as there is no mechanism
                              ; to discover network diameter.
 objective-value = any        ; reserved for future extensions

 ]]></artwork>
            </figure>
            <t>The objective name "SRV.est" indicates that the objective is an
<xref target="RFC7030" format="default"/> compliant EST server because "est" is an
<xref target="RFC6335" format="default"/> registered service name for <xref target="RFC7030" format="default"/>.
Objective-value MUST be ignored if present. Backward compatible extensions to
<xref target="RFC7030" format="default"/> MAY be indicated through objective-value.
Non <xref target="RFC7030" format="default"/> compatible certificate renewal options MUST use a different objective-name.
Non-recognized objective-values (or parts thereof if it is a structure partially understood) MUST be ignored.</t>
            <t>The M_FLOOD message MUST be sent periodically.  The default SHOULD be 60 seconds,
the value SHOULD be operator configurable but SHOULD be
not smaller than 60 seconds.  The frequency of sending MUST be such
that the aggregate amount of periodic M_FLOODs from all flooding sources
cause only negligible traffic across the ACP.  The time-to-live (ttl) parameter SHOULD be 3.5 times the period so that up
to three consecutive messages can be dropped before considering an announcement expired.
In the example above, the ttl is 210000 msec, 3.5 times 60 seconds. When a service announcer
using these parameters unexpectedly dies immediately after sending the M_FLOOD,
receivers would consider it expired 210 seconds later. When a receiver tries to
connect to this dead service before this timeout, it will experience a failing connection and
use that as an indication that the service instance is dead and select another instance of the
same service instead (from another GRASP announcement).</t>
<t>The "SRV.est" objective(s) SHOULD only be announced when the ACP node knows that it can successfully
communicate with a CA to perform the EST renewal/rekeying operations for the ACP domain. See also
<xref target="security"/>.</t>
          </section>
          <section anchor="domcert-renewal" numbered="true" toc="default">
            <name>Renewal</name>
            <t>When performing renewal, the node SHOULD attempt to connect to the remembered EST server. 
If that fails, it SHOULD attempt to connect to an EST server learned via GRASP.  The server
with which certificate renewal succeeds SHOULD be remembered for the next renewal.</t>
            <t>Remembering the last renewal server and preferring it provides stickiness
which can help diagnostics.  It also provides some protection against off-path
compromised ACP members announcing bogus information into GRASP.</t>
            <t>Renewal of certificates SHOULD start after less than 50% of the domain certificate
lifetime so that network operations has ample time to investigate and
resolve any problems that causes a node to not renew its domain certificate
in time - and to allow prolonged periods of running parts of a network
disconnected from any CA.</t>
          </section>
          <!-- DO NOT FORCE THE TTL=255 OPTION RIGHT NOW.
     IT MIGHT MAKE MORE SENSE TO DO FOLLOWUP WORK IN WHICH
     WE DO PROVIDE A MORE COMPLETE SET OF SELECTION OPTIONS
     COMPATIBLE WITH DNS-SD - 10/2017, Toerless Eckert

<t>The locator-option indicates the ACP transport address for the EST server.
The loop-count MUST be set to 255.  When an ACP node receives the M_FLOOD,
it will have been reduced by the number of hops from the EST server.</t>

<t>When it is time for domain certificate renewal, the ACP node MUST
attempt to connect to the EST server(s) learned via GRASP starting with
the one that has the highest remaining loop-count (closest one).  If
certificate renewal does not succeed, the node MUST attempt to use
the EST server(s) learned during initial provisioning/enrollment of
the certificate.  After successful renewal of the domain certificate,
the ACP address from the certificate of the EST server as learned
during the handshake of the TLS connection to the EST server MAY be remembered
could be preferred for future renewal operations.  As long
as that EST server is reachable, this provides stickiness in the selection of 
the EST server and can simplify troubleshooting.</t>

<t>This logic of selecting an EST server for renewal is chosen to allow
for distributed EST servers to be used effectively but to also allow
fallback to the most reliably learned EST server - those that performed
already successful enrollment in before.  A compromised (non EST-server)
ACP node for example can filter or fake GRASP announcements, but it can
not successfully renew a certificate and can only prohibit traffic to
a valid EST server when it is on the path between the ACP node and the
EST server.</t>

-->
          <section anchor="domcert-crl" numbered="true" toc="default">
            <name>Certificate Revocation Lists (CRLs)</name>
            <t>The ACP node SHOULD support revocation through CRL(s) via HTTP from one
or more CRL Distribution Points (CRLDP).  The CRLDP(s) MUST be indicated
in the Domain Certificate when used.  If the CRLDP URL uses an IPv6 address
(ULA address when using the addressing rules specified in this document),
the ACP node will connect to the CRLDP via the ACP.  If the CRLDP uses a
domain name, the ACP node will connect to the CRLDP via the Data-Plane.</t>
            <t>It is common to use domain names for CRLDP(s), but there is no requirement
for the ACP to support DNS. Any DNS lookup in the Data-Plane is
not only a possible security issue, but it would also not indicate whether
the resolved address is meant to be reachable across the ACP. Therefore,
the use of an IPv6 address versus the use of a DNS name doubles as an
indicator whether or not to reach the CRLDP via the ACP.</t>
<t>A CRLDP can be reachable across the ACP either by running it on a
node with ACP or by connecting its node via an ACP connect interface (see <xref target="ACPconnect" format="default"/>).</t>

<t>When using a private PKI for ACP certificates, the CRL may be need-to-know, for example
to prohibit insight into the operational practices of the domain by tracking
the growth of the CRL.  In this case, HTTPS may be chosen to provide
confidentiality, especially when making the CRL available via the Data-Plane.
Authentication and authorization SHOULD use ACP certificates and ACP domain membership check.
The CRLDP MAY omit the CRL verification during authentication of the peer to permit
retrieval of the CRL by an ACP node with revoked ACP certificate. This can allow for that
(ex) ACP node to quickly discover its ACP certificate revocation. This may violate
the desired need-to-know requirement though. ACP nodes MAY support CRLDP operations
via HTTPS.</t>

<!--
<t>The CRLDP SHOULD use an ACP certificate for its HTTPs connections.
The connecting ACP node SHOULD verify that the CRLDP certificate used
during the HTTPs connection has the same ACP address as indicated in the
CRLDP URL of the node's ACP certificate if the CRLDP URL uses an IPv6 address.</t>
-->

          </section>
          <section anchor="domcert-lifetime" numbered="true" toc="default">
            <name>Lifetimes</name>
            <t>Certificate lifetime may be set to shorter lifetimes than customary
(1 year) because certificate renewal is fully automated via ACP and EST.
The primary limiting factor for shorter certificate lifetimes 
is load on the EST server(s) and CA.  It is therefore recommended that
ACP certificates are managed via a CA chain where the assigning
CA has enough performance to manage short lived certificates. See also
<xref target="sub-ca" format="default"/> for discussion about an example setup achieving
this. See also <xref target="I-D.ietf-acme-star" format="default"/>.</t>
            <t>When certificate lifetimes are sufficiently short, such as few hours,
certificate revocation may not be necessary, allowing to simplify the overall
certificate maintenance infrastructure.</t>
            <t>See <xref target="bootstrap" format="default"/> for further optimizations of certificate
maintenance when BRSKI can be used ("Bootstrapping Remote Secure Key 
Infrastructures", see <xref target="I-D.ietf-anima-bootstrapping-keyinfra" format="default"/>).</t>
          </section>
          <section anchor="domcert-re-enroll" numbered="true" toc="default">
            <name>Re-enrollment</name>
            <t>An ACP node may determine that its ACP certificate
has expired, for example because the ACP node was powered down or
disconnected longer than its certificate lifetime. In this case, the ACP
node SHOULD convert to a role of a re-enrolling candidate ACP node.</t>
            <t>In this role, the node does maintain the TA and certificate
chain associated with its ACP certificate exclusively for the purpose
of re-enrollment, and attempts (or waits) to get re-enrolled with a new ACP
certificate.  The details depend on the mechanisms/protocols used
by the ACP Registrars.</t>
            <t>Please refer to <xref target="acp-registrars" format="default"/> and <xref target="I-D.ietf-anima-bootstrapping-keyinfra" format="default"/>
for explanations about ACP Registrars and vouchers as used in the following text.
When ACP is intended to be used without BRSKI, the details about BRSKI and
vouchers in the following text can be skipped.</t>
            <t>When BRSKI is used (i.e.: on ACP nodes that are ANI nodes), the re-enrolling
candidate ACP node would attempt to enroll like a candidate ACP node (BRSKI pledge), 
but instead of using the ACP nodes IDevID certificate, it SHOULD first attempt to use its ACP domain
certificate in the BRSKI TLS authentication.  The BRSKI registrar MAY honor
this certificate beyond its expiration date purely for the purpose of
re-enrollment. Using the ACP node's domain certificate allows the BRSKI
registrar to learn that node's acp-node-name,
so that the BRSKI registrar can re-assign the same ACP address information 
to the ACP node in the new ACP certificate.</t>

            <t>If the BRSKI registrar denies the use of the old ACP certificate,
the re-enrolling candidate ACP node MUST re-attempt re-enrollment using
its IDevID certificate as defined in BRSKI during the TLS connection setup.</t>

            <t>Both when the BRSKI connection is attempted with the old ACP certificate
or the IDevID certificate, the re-enrolling candidate ACP node SHOULD authenticate
the BRSKI registrar during TLS connection setup based on its existing TA
certificate chain information associated with its old ACP certificate.
The re-enrolling candidate ACP node SHOULD only fall back to requesting a voucher from the BRSKI registrar 
when this authentication fails during TLS connection setup. To prohibit 
attacks that attempt to force the ACP node to forget its prior (expired) certificate
and TA, the ACP node should alternate between attempting to re-enroll using
its old keying material and attempting to re-enroll with its IDevID and requesting
a voucher.</t>

            <t>When other mechanisms than BRSKI are used for ACP certificate 
enrollment, the principles of the re-enrolling candidate ACP node are the same.
The re-enrolling candidate ACP node attempts to authenticate any ACP Registrar peers
during re-enrollment protocol/mechanisms via its existing certificate chain/TA information
and provides its existing ACP certificate and other identification
(such as the IDevID certificate) as necessary to the registrar.</t>

            <t>Maintaining existing TA information is especially important
when enrollment mechanisms are used that unlike BRSKI do not leverage
a mechanism (such as the voucher in BRSKI) to authenticate the ACP registrar
and where therefore the injection of certificate failures could otherwise make the ACP node easily
attackable remotely by returning the ACP node to a "duckling" state in which
it accepts to be enrolled by any network it connects to. The (expired) ACP
certificate and ACP TA SHOULD therefore be maintained and used for re-enrollment
until new keying material is enrolled.</t>

            <t>When using BRSKI or other protocol/mechanisms supporting vouchers,
maintaining existing TA information allows for re-enrollment
of expired ACP certificates to be more lightweight, especially in
environments where repeated acquisition of vouchers during the lifetime
of ACP nodes may be operationally expensive or otherwise undesirable.</t>
          </section>
          <section anchor="domcert-failing" numbered="true" toc="default">
            <name>Failing Certificates</name>
            <t>An ACP certificate is called failing in this document,
if/when the ACP node to which the certificate was issued can determine that it was revoked (or explicitly
not renewed), or in the absence of such explicit local diagnostics,
when the ACP node fails to connect to other ACP nodes in the same ACP
domain using its ACP certificate. For connection failures to
determine the ACP certificate as the culprit, the peer
should pass the domain membership check (<xref target="certcheck" format="default"/>)
and other reasons for the connection failure can be excluded because of 
the connection error diagnostics.</t>
            <t>This type of failure can happen during setup/refresh of a secure ACP channel
connections or any other use of the ACP certificate, such as for the
TLS connection to an EST server for the renewal of the ACP domain
certificate.</t>
            <t>Example reasons for failing certificates that the ACP node can only
discover through connection failure are that the domain certificate or
any of its signing certificates could have been revoked or may have expired,
but the ACP node cannot self-diagnose this condition directly. Revocation
information or clock synchronization may only be available across the ACP,
but the ACP node cannot build ACP secure channels because ACP peers reject
the ACP node's domain certificate.</t>
            <t>ACP nodes SHOULD support the option to determines whether its ACP
certificate is failing, and when it does, put itself into the role of a
re-enrolling candidate ACP node as explained above (<xref target="domcert-re-enroll" format="default"/>).</t>
          </section>
        </section>
        <!-- domcert-maint -->
      </section>
      <!-- domcert -->
      <section anchor="adj-table" numbered="true" toc="default">
        <name>ACP Adjacency Table</name>
        <t>To know to which nodes to establish an ACP channel, every ACP node maintains an adjacency table.  The adjacency table contains information about adjacent ACP nodes, at a minimum: Node-ID (identifier of the node inside the ACP, see <xref target="zone-scheme" format="default"/> and <xref target="Vlong" format="default"/>), interface on which neighbor was discovered (by GRASP as explained below), link-local IPv6 address of neighbor on that interface, certificate (including acp-node-name).  An ACP node MUST maintain this adjacency table.  This table is used to determine to which neighbor an ACP connection is established.</t>
        <t>Where the next ACP node is not directly adjacent (i.e., not on a link
connected to this node), the information in the adjacency table can be supplemented by configuration.  For example, the Node-ID and IP address could be configured. See <xref target="remote-acp-neighbors" format="default"/>.</t>
        <t>The adjacency table MAY contain information about the validity and trust of the adjacent ACP node's certificate.  However, subsequent steps MUST always start with the ACP domain membership check against the peer (see <xref target="certcheck" format="default"/>).</t>
        <t>The adjacency table contains information about adjacent ACP nodes in general, independently of their domain and trust status.  The next step determines to which of those ACP nodes an ACP connection should be established.</t>
      </section>
      <section anchor="discovery-grasp" numbered="true" toc="default">
        <name>Neighbor Discovery with DULL GRASP</name>
        <t>[RFC Editor: GRASP draft is in RFC editor queue, waiting for dependencies, including ACP. Please ensure that references to I-D.ietf-anima-grasp that include section number references (throughout this document) will be updated in case any last-minute changes in GRASP would make those section references change.</t>
        <t>Discovery Unsolicited Link-Local (DULL) GRASP is a limited subset of GRASP intended to operate across an
insecure link-local scope.  See section 2.5.2 of <xref target="I-D.ietf-anima-grasp" format="default"/> for its
formal definition.  The ACP uses one instance of DULL GRASP for every L2 interface
of the ACP node to discover link level adjacent candidate ACP neighbors.  Unless modified
by policy as noted earlier (<xref target="overview" format="default"/> bullet point 2.), native interfaces
(e.g., physical interfaces on physical nodes) SHOULD be initialized automatically to a state in which
ACP discovery can be performed and any native interfaces with ACP neighbors can
then be brought into the ACP even if the interface is otherwise not configured.
Reception of packets on such otherwise not configured interfaces MUST be limited so that
at first only IPv6 StateLess Address Auto Configuration (SLAAC - <xref target="RFC4862" format="default"/>)
 and DULL GRASP work and then only
the following ACP secure channel setup packets - but not any other unnecessary traffic
(e.g., no other link-local IPv6 transport stack responders for example).</t>
        <t>Note that the use of the IPv6 link-local multicast address (ALL_GRASP_NEIGHBORS) implies
the need to use Multicast Listener Discovery Version 2 (MLDv2, see <xref target="RFC3810" format="default"/>)
to announce the desire to receive packets for
that address.  Otherwise DULL GRASP could fail to operate correctly in the presence of
MLD snooping (<xref target="RFC4541" format="default"/>) switches that are not ACP supporting/enabled 
 - because those switches would stop forwarding DULL GRASP packets.
Switches not supporting MLD snooping simply need to operate as pure L2 bridges for
IPv6 multicast packets for DULL GRASP to work.</t>
        <t>ACP discovery SHOULD NOT be enabled by default on non-native interfaces.  In particular, ACP discovery MUST NOT run inside the ACP across ACP virtual interfaces.  See <xref target="enabling-acp" format="default"/> for further, non-normative suggestions on how to enable/disable ACP at node and interface level.  See <xref target="conf-tunnel" format="default"/> for more details about tunnels (typical non-native interfaces).  See <xref target="acp-l2-switches" format="default"/> for how ACP should be extended on devices operating (also) as L2 bridges.</t>
        <t>Note: If an ACP node also implements BRSKI to enroll its ACP certificate
(see <xref target="bootstrap" format="default"/> for a summary), then the above considerations also apply to 
GRASP discovery for BRSKI.  Each DULL instance of GRASP
set up for ACP is then also used for the discovery of a bootstrap proxy via BRSKI when the node
does not have a domain certificate.
Discovery of ACP neighbors happens only when the node does have the certificate.  The node
therefore never needs to discover both a bootstrap proxy and ACP neighbor at the same time.</t>
        <t>An ACP node announces itself to potential ACP peers by use of the "AN_ACP" objective.
This is a synchronization objective intended to be flooded on a single link using the
GRASP Flood Synchronization (M_FLOOD) message.  In accordance with the design of the Flood message,
a locator consisting of a specific link-local IP address, IP protocol number and port number
will be distributed with the flooded objective.  An example of the message is informally:</t>
        <figure anchor="an-acp-example">
          <name>GRASP AN_ACP example</name>
      <artwork name="" type="" align="left" alt=""><![CDATA[
   [M_FLOOD, 12340815, h'fe80000000000000c0011001feef0000', 210000,
     [["AN_ACP", 4, 1, "IKEv2" ],
      [O_IPv6_LOCATOR,
           h'fe80000000000000c0011001feef0000', IPPROTO_UDP, 15000]]
     [["AN_ACP", 4, 1, "DTLS" ],
      [O_IPv6_LOCATOR,
           h'fe80000000000000c0011001feef0000', IPPROTO_UDP, 17000]]
   ]
 ]]></artwork>
        </figure>
        <t> The formal CDDL definition is: </t>
        <figure anchor="an-acp-def">
          <name>GRASP AN_ACP definition</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
    flood-message = [M_FLOOD, session-id, initiator, ttl,
                     +[objective, (locator-option / [])]]

    objective = ["AN_ACP", objective-flags, loop-count,
                                           objective-value]

    objective-flags = sync-only ; as in the GRASP specification
    sync-only =  4    ; M_FLOOD only requires synchronization
    loop-count = 1    ; limit to link-local operation
    objective-value = method
    method = "IKEv2" / "DTLS"  ; or future standard methods
 ]]></artwork>
        </figure>
        <t>The objective-flags field is set to indicate synchronization.</t>
        <t>The loop-count is fixed at 1 since this is a link-local operation.</t>
        <t>In the above example the RECOMMENDED period of sending of the
    objective is 60 seconds. The indicated ttl of 210000 msec means
    that the objective would be cached by ACP nodes even when two
     out of three messages are dropped in transit.</t>
        <t>The session-id is a random number used for loop prevention (distinguishing a message from a prior instance of the same message).  In DULL this field is irrelevant but has to be set according to the GRASP specification.</t>
        <t>The originator MUST be the IPv6 link local address of the originating ACP node on the sending interface.</t>
        <t>The 'objective-value' parameter is a string indicating the protocol available at the specified or implied locator. It is a protocol supported by the node to negotiate a secure channel. IKEv2 as shown above is the protocol used to negotiate an IPsec secure channel.</t>
        <t>The locator-option is optional and only required when the secure channel protocol is not offered at a well-defined port number, or if there is no well-defined port number.</t>

        <t>IKEv2 is the actual protocol used to negotiate an Internet Protocol security architecture (IPsec) connection.  GRASP therefore indicates "IKEv2" and not "IPsec". If "IPsec" was used, this too could mean use of the obsolete older version IKE (v1) (<xref target="RFC2409" format="default"/>).  IKEv2 has an IANA assigned port number 500, but in the above example, the candidate ACP neighbor is offering ACP secure channel negotiation via IKEv2 on port 15000 (purely to show through the example that GRASP allows to indicate the port number and it does not have to be the IANA assigned one).</t>

        <t>There is no default UDP port for DTLS, it is always locally assigned by the node. For further details about the "DTLS" secure channel protocol, see <xref target="DTLS" format="default"/>.</t>

        <t>If a locator is included, it MUST be an O_IPv6_LOCATOR, and the IPv6 address MUST be the same as the initiator address (these are DULL requirements to minimize third party DoS attacks).</t>

        <t>The secure channel methods defined in this document use the objective-values of "IKEv2" and "DTLS".  There is no distinction between IKEv2 native and GRE-IKEv2 because this is purely negotiated via IKEv2.</t>
        <t>A node that supports more than one secure channel protocol method needs to flood multiple versions
    of the "AN_ACP" objective so that each method can be accompanied by its own locator-option.  This can use a single GRASP M_FLOOD message as shown in <xref target="an-acp-example" format="default"/>.</t>
        <t>The use of DULL GRASP primarily serves to discover the link-local IPv6 address of candidate ACP peers on subnets. The signaling of the supported secure channel option is primarily for diagnostic purposes, but it is also necessary for discovery when the protocol has no well-known transport address, such as in the case of DTLS.</t>
        <t>Attackers on a subnet may be able to inject malicious DULL GRASP messages that are indistinguishable from non-malicious DULL GRASP messages to create Denial-of-Service (DoS) attacks that force ACP nodes to attempt many unsuccessful ACP secure channel connections. When an ACP node sees multiple AN_ACP objectives for the same secure channel protocol on different transport addresses, it SHOULD prefer connecting via the well-known transport address if the secure channel method has one (such as UDP port 500 for IKEv2).</t>
        <t>Note that a node serving both as an ACP node and BRSKI Join Proxy may choose to distribute the "AN_ACP" objective and the respective BRSKI in the same M_FLOOD message, since GRASP allows multiple objectives in one message.  This may be impractical though if ACP and BRSKI operations are implemented via separate software modules / ASAs.</t>
        <t>The result of the discovery is the IPv6 link-local address of the neighbor as well as its supported secure channel protocols (and non-standard port they are running on).  It is stored in the ACP Adjacency Table (see <xref target="adj-table" format="default"/>), which then drives the further building of the ACP to that neighbor.</t>
        <t>Note that the DULL GRASP objective described intentionally does not include ACP nodes ACP certificate even though this would be useful for diagnostics and to simplify the security exchange in ACP secure channel security association protocols (see <xref target="associations" format="default"/>). The reason is that DULL GRASP messages are periodically multicasted across IPv6 subnets and full certificates could easily lead to fragmented IPv6 DULL GRASP multicast packets due to the size of a certificate.  This would be highly undesirable.</t>
      </section>
      <!-- discovery-grasp -->
      <section anchor="selection" numbered="true" toc="default">
        <name>Candidate ACP Neighbor Selection</name>
        <t>An ACP node determines to which other ACP nodes in the adjacency table it should attempt to build an ACP connection.  This is based on the information in the ACP Adjacency table.</t>
        <t>The ACP is established exclusively between nodes in the same domain.  This includes all routing subdomains. <xref target="domain-usage" format="default"/> explains how ACP connections across multiple routing subdomains are special.</t>
        <t>The result of the candidate ACP neighbor selection process is a list of adjacent or configured autonomic neighbors to which an ACP channel should be established.  The next step begins that channel establishment.</t>
      </section>
      <!-- selection -->
      <section anchor="channel-selection" numbered="true" toc="default">
        <name>Channel Selection</name>
        <t>To avoid attacks, initial discovery of candidate ACP peers cannot include any non-protected negotiation.  To avoid re-inventing and validating security association mechanisms, the next step after discovering the address of a candidate neighbor can only be to try first to establish a security association with that neighbor using a well-known security association method.</t>
        <t>From the use-cases it seems clear that not all type of ACP nodes can or need to connect directly to each other or are able to support or prefer all possible mechanisms. 
  For example, code space limited IoT devices may only support DTLS because that code exists already on them for end-to-end security, but low-end in-ceiling L2 switches may only want to support Media Access Control Security (MacSec, see 802.1AE (<xref target="MACSEC" format="default"/>) because that is also supported in their chips.  Only a flexible gateway device may need to support both of these mechanisms and potentially more.  Note that MacSec is not required by any profiles of the ACP in this specification. Instead, MacSec is mentioned as a likely next interesting secure channel protocol.  Note also that the security model allows and requires for any-to-any authentication and authorization between all ACP nodes because there is also end-to-end and not only hop-by-hop authentication for secure channels.</t>
        <t>To support extensible secure channel protocol selection without a single common mandatory to implement (MTI) protocol, ACP nodes MUST try all the ACP secure channel protocols it supports and that are feasible because the candidate ACP neighbor also announced them via its AN_ACP GRASP parameters (these are called the "feasible" ACP secure channel protocols).</t>
        <t>To ensure that the selection of the secure channel protocols always succeeds in a predictable fashion without blocking, the following rules apply:
</t>
        <ul spacing="compact">

          <li>An ACP node may choose to attempt to initiate the different feasible ACP secure channel protocols it supports according to its local policies sequentially or in parallel, but it MUST support acting as a responder to all of them in parallel.</li>

          <li>Once the first ACP secure channel protocol connection to a specific peer IPv6 address passes peer authentication, the two peers know each other's certificate because those ACP certificates are used by all secure channel protocols for mutual authentication.  The peer with the higher Node-ID in the ACPNodeName of its ACP certificate takes on the role of the Decider towards the peer. The other peer takes on the role of the Follower. The Decider selects which secure channel protocol to ultimately use.</li>

          <li>The Follower becomes passive: it does not attempt to further initiate ACP secure channel protocol connections with the Decider and does not consider it to be an error when the Decider closes secure channels.  The Decider becomes the active party, continues to attempt setting up secure channel protocols with the Follower. This process terminates when the Decider arrives at the "best"
 ACP secure channel connection option that also works with the Follower ("best" from the Deciders point of view).</li>

<li>A peer with a "0" acp-address in its AcpNodeName takes on the role of Follower when peering with a node that has a non-"0" acp-address (note that this specification does not fully define the behavior of ACP secure channel negitation for nodes with a "0" ACP address field, it only defines interoperability with such ACP nodes).</li>

        </ul>

        <t>In a simple example, ACP peer Node 1 attempts to initiate an IPsec via IKEv2 connection to peer Node 2.  The IKEv2 authentication succeeds. Node 1 has the lower ACP address and becomes the Follower. Node 2 becomes the Decider. IKEv2 might not be the preferred ACP secure channel protocol for the Decider Node 2. Node 2 would therefore proceed to attempt secure channel setups with (in its view) more preferred protocol options (e.g., DTLS/UDP). If any such preferred ACP secure channel connection of the Decider succeeds, it would close the IPsec connection.  If Node 2 has no preferred protocol option over IPsec, or no such connection attempt from Node 2 to Node 1 succeeds, Node 2 would keep the IPsec connection and use it.</t>

<t>The Decider SHOULD NOT send actual payload packets across a secure channel until it has decided to use it. The Follower MAY delay linking the ACP secure channel into the ACP virtual interface until it sees the first payload packet from the Decider up to a maximum of 5 seconds to avoid unnecessarily linking a secure channel that will be terminated as undesired by the Decider shortly afterwards.</t>

        <?rfc needLines="48" ?>
        <t>The following sequence of steps show this example in more detail. Each step is tagged with [&lt;step#&gt;{:&lt;connection&gt;}]. The connection is included to easier distinguish which of the two competing connections the step belong to, one initiated by Node 1, one initiated by Node 2.
   </t>
        <figure anchor="sequence-of-steps">
          <name>Secure Channel sequence of steps</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
[1]    Node 1 sends GRASP AN_ACP message to announce itself

[2]    Node 2 sends GRASP AN_ACP message to announce itself

[3]    Node 2 receives [1] from Node 1

[4:C1] Because of [3], Node 2 starts as initiator on its
       preferred secure channel protocol towards Node 1.
       Connection C1.

[5]    Node 1 receives [2] from Node 2

[6:C2] Because of [5], Node 1 starts as initiator on its
       preferred secure channel protocol towards Node 2.
       Connection C2.

[7:C1] Node1 and Node2 have authenticated each others
       certificate on connection C1 as valid ACP peers.

[8:C1] Node 1 certificate has lower ACP Node-ID than Node2, therefore
       Node 1 considers itself the Follower and Node 2 the Decider
       on connection C1. Connection setup C1 is completed.

[9]    Node 1 refrains from attempting any further secure channel
       connections to Node 2 (the Decider) as learned from [2]
       because it knows from [8:C1] that it is the Follower
       relative to Node 1.

[10:C2] Node1 and Node2 have authenticated each others
       certificate on connection C2 (like [7:C1]).

[11:C2] Node 1 certificate has lower ACP Node-ID than Node2,
        therefore Node 1 considers itself the Follower and Node 2 the
        Decider on connection C2, but they also identify that C2 is
        to the same mutual peer as their C1, so this has no further
        impact: the roles Decider and Follower where already assigned
        between these two peers by [8:C1].

[12:C2] Node 2 (the Decider) closes C1. Node 1 is fine with this,
        because of its role as the Follower (from [8:C1]).

[13]    Node 2 (the Decider) and Node 1 (the Follower) start data
        transfer across C2, which makes it become a secure channel
        for the ACP.
        ]]></artwork>
        </figure>

        <t>All this negotiation is in the context of an "L2 interface".  The Decider and Follower will build ACP connections to each other on every "L2 interface" that they both connect to.  An autonomic node MUST NOT assume that neighbors with the same L2 or link-local IPv6 addresses on different L2 interfaces are the same node.  This can only be determined after examining the certificate after a successful security association attempt.</t>

<t>The Decider SHOULD NOT suppress attempting a particular ACP secure channel protocol connection on one L2 interface because this type of ACP secure channel connection has failed to the peer with the same ACP certificate on another L2 interface: Not only the supported ACP secure channel protocol options may be different on the same ACP peer across different L2 interfaces, but also error conditions may cause inconsistent failures across different L2 interfaces. Avoiding such connection attempt optimizations can therefore help to increase robustness in the case of errors.</t>

      </section>
      <!-- channel-selection -->
      <section anchor="neighbor_verification" numbered="true" toc="default">
        <name>Candidate ACP Neighbor verification</name>
        <t>Independent of the security association protocol chosen, candidate ACP neighbors need to be authenticated based on their domain certificate.  This implies that any secure channel protocol MUST support certificate based authentication that can support the ACP domain membership check as defined in <xref target="certcheck" format="default"/>.  If it fails, the connection attempt is aborted and an error logged. Attempts to reconnect MUST be throttled. The RECOMMENDED default is exponential base 2 backoff with a minimum delay of 10 seconds and a maximum delay of 640 seconds.</t>
        <t>Failure to authenticate an ACP neighbor when acting in the role of a responder
of the security authentication protocol MUST NOT impact the attempts of the ACP node
to attempt establishing a connection as an initiator. Only failed connection attempts as
an initiator must cause throttling. This rule is meant to increase resilience
of secure channel creation. <xref target="channel-selection" format="default"/> shows how simultaneous mutual
secure channel setup collisions are resolved.</t>
      </section>
      <section anchor="associations" numbered="true" toc="default">
        <name>Security Association (Secure Channel) protocols</name>
        <t>This section describes how ACP nodes establish secured data connections to automatically discovered or configured peers in the ACP. <xref target="discovery-grasp" format="default"/> above described how IPv6 subnet adjacent peers are discovered automatically. <xref target="remote-acp-neighbors" format="default"/> describes how non IPv6 subnet adjacent peers can be configured.</t>
        <t><xref target="ACP-virtual-interfaces" format="default"/> describes how secure channels are mapped to virtual IPv6 subnet interfaces in the ACP. The simple case is to map every ACP secure channel into a separate ACP point-to-point virtual interface <xref target="ACP-p2p-virtual-interfaces" format="default"/>. When a single subnet has multiple ACP peers this results in multiple ACP point-to-point virtual interfaces across that underlying multi-party IPv6 subnet. This can be optimized with ACP multi-access virtual interfaces (<xref target="ACP-ma-virtual-interfaces" format="default"/>) but the benefits of that optimization may not justify the complexity of that option.</t>
        <section anchor="general-considerations" numbered="true" toc="default">
          <name>General considerations</name>
          <t>Due to <xref target="channel-selection" format="default">Channel Selection</xref>, ACP can support an evolving set of security association protocols and does not require support for a single network wide MTI.  ACP nodes only need to implement those protocols required to interoperate with their candidate peers, not with potentially any node in the ACP domain. See <xref target="Profiles" format="default"/> for an example of this.</t>
          <t>The degree of security required on every hop of an ACP network needs to be consistent across the network so that there is no designated "weakest link" because it is that "weakest link" that would otherwise become the designated point of attack. When the secure channel protection on one link is compromised, it can be used to send/receive packets across the whole ACP network. Therefore, even though the security association protocols can be different, their minimum degree of security should be comparable.</t>
          <t>Secure channel protocols do not need to always support arbitrary L3 connectivity between peers, but can leverage the fact that the standard use case for ACP secure channels is an L2 adjacency. Hence, L2 dependent mechanisms could be adopted for use as secure channel association protocols:</t>
          <t>L2 mechanisms such as strong encrypted radio technologies or <xref target="MACSEC" format="default"/> may offer equivalent encryption and the ACP security association protocol may only be required to authenticate ACP domain membership of a peer and/or derive a key for the L2 mechanism. Mechanisms to auto-discover and associate ACP peers leveraging such underlying L2 security are possible and desirable to avoid duplication of encryption, but none are specified in this document.</t>
          <t>Strong physical security of a link may stand in where cryptographic security is infeasible. As there is no secure mechanism to automatically discover strong physical security solely between two peers, it can only be used with explicit configuration and that configuration too could become an attack vector. This document therefore only specifies with <xref target="ACPconnect" format="default">ACP connect</xref> one explicitly configured mechanism without any secure channel association protocol - for the case where both the link and the nodes attached to it have strong physical security.</t>
        </section>
        <section anchor="common-requirements" numbered="true" toc="default">
          <name>Common requirements</name>
          <t>The authentication of peers in any security association protocol MUST use the ACP certificate according to <xref target="certcheck" format="default"/>.  Because auto-discovery of candidate ACP neighbors via GRASP (see <xref target="discovery-grasp" format="default"/>) as specified in this document does not communicate the neighbors ACP certificate, and ACP nodes may not (yet) have any other network connectivity to retrieve certificates, any security association protocol MUST use a mechanism to communicate the certificate directly instead of relying on a referential mechanism such as communicating only a hash and/or URL for the certificate.</t>
          <t>A security association protocol MUST use Forward Secrecy (whether inherently or as part of a profile of the security association protocol). </t>
          <t>Because the ACP payload of legacy protocol payloads inside the ACP and hop-by-hop ACP flooded GRASP information is unencrypted, the ACP secure channel protocol requires confidentiality. Symmetric encryption for the transmission of secure channel data MUST use encryption schemes considered to be security wise equal to or better than 256 bit key strength, such as AES256. There MUST NOT be support for NULL encryption. </t>
          <t>Security association protocols typically only signal the End Entity certificate
(e.g.: the ACP certificate) and any possible intermediate CA certificates
for successful mutual authentication.  The TA has to be mutually known and
trusted and therefore its certificate does not need to be signalled for successful
mutual authentication. Nevertheless, for use with ACP secure channel setup,
there SHOULD be the option to include the TA certificate in the signaling 
to aid troubleshooting, see <xref target="ta-troubleshoot" format="default"/>.</t>
          <t>Signalling of TA certificates may not be appropriate when the deployment is relying on
 a security model where the TA certificate content is considered confidential and only its hash
is appropriate for signalling. ACP nodes SHOULD have a mechanism to select whether
the TA certificate is signalled or not. Assuming that both options are possible with
a specific secure channel protocol.</t>
          <t>An ACP secure channel MUST immediately be terminated when the lifetime of any certificate in the chain used to authenticate the neighbor expires or becomes revoked.  This may not be standard behavior in secure channel protocols because the certificate authentication may only influences the setup of the secure channel in these protocols, but may not be re-validated during the lifetime of the secure connection in the absence of this requirement.</t>
          <t>When specifying an additional security association protocol for ACP secure channels beyond those covered in this document, protocol options SHOULD be eliminated that are not necessary to support devices that are expected to be able to support the ACP to minimize implementation complexity. For example, definitions for security protocols often include old/inferior security options required only to interoperate with existing devices that will not be a able to update to the currently preferred security options. Such old/inferior security options do not need to be supported when a security association protocol is first specified for the ACP, strengthening the "weakest link" and simplifying ACP implementation overhead.</t>
        </section>
        <section anchor="IPsec-group" numbered="true" toc="default">
          <name>ACP via IPsec</name>
          <t>An ACP node announces its ability to support IPsec, negotiated via IKEv2, as the ACP secure channel protocol using the "IKEv2" objective-value in the "AN_ACP" GRASP objective.</t>
          <t>The ACP usage of IPsec and IKEv2 mandates a profile with a narrow set of options of the current standards-track usage guidance for IPsec <xref target="RFC8221" format="default"/> and IKEv2 <xref target="RFC8247" format="default"/>.  These option result in stringent security properties and can exclude deprecated/legacy algorithms because there is no need for interoperability with legacy equipment for ACP secure channels.  Any such backward compatibility would lead only to increased attack surface and implementation complexity, for no benefit.</t>
          <section anchor="IPsec" toc="include" numbered="true">
            <name>Native IPsec</name>
            <t> An ACP node that is supporting native IPsec MUST use IPsec in tunnel mode, negotiated via IKEv2, and with IPv6 payload (e.g., ESP Next Header of 41). It MUST use local and peer link-local IPv6 addresses for encapsulation.  Manual keying MUST NOT be used, see <xref target="domcert" format="default"/>. Traffic Selectors are:</t>
            <t>TSi = (0, 0-65535, :: - FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)</t>
            <t>TSr = (0, 0-65535, :: - FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)</t>
            <t>IPsec tunnel mode is required because the ACP will route/forward packets received from any other ACP node across the ACP secure channels, and not only its own generated ACP packets.  With IPsec transport mode (and no additional encapsulation header in the ESP payload), it would only be possible to send packets originated by the ACP node itself because the IPv6 addresses of the ESP must be the same as that of the outer IPv6 header.</t>
            <section anchor="rfc8221req" toc="include" numbered="true">
              <name>RFC8221 (IPsec/ESP)</name>
              <t>ACP IPsec implementations MUST comply with <xref target="RFC8221" format="default"/> (and its updates). The requirements from above and this section amend and superseded its requirements.</t>
              <t>AH MUST NOT be used (because it does not provide confidentiality).</t>
              <t>For the required ESP encryption algorithms in section 5 of <xref target="RFC8221" format="default"/> the following guidance applies:
</t>
              <ul spacing="compact">
                <li>ENCR_NULL AH MUST NOT be used (because it does not provide confidentiality).</li>
                <li>ENCR_AES_GCM_16 is the only MTI ESP encryption algorithm for ACP via IPsec/ESP (it is already listed as MUST in <xref target="RFC8221" format="default"/>).</li>
                <li>ENCR_AES_CBC with AUTH_HMAC_SHA2_256_128 (as the ESP authentication algorithm) and ENCR_AES_CCM_8 MAY be supported. If either provides higher performance than ENCR_AES_GCM_16 it SHOULD be supported.</li>
                <li>ENCR_CHACHA20_POLY1305 SHOULD be supported at equal or higher performance than ENCR_AES_GCM_16. If that performance is not feasible, it MAY be supported.</li>
              </ul>
              <t>IKEv2 indicates an order for the offered algorithms.  The algorithms SHOULD be ordered by performance.  The first algorithm supported by both sides is generally choosen.</t>
              <t> Explanations:
</t>
              <ul spacing="compact">
                <li>
      There is no requirement to interoperate with legacy equipment in ACP
      secure channels, so a single MTI encryption algorithm for IPsec in ACP
      secure channels is sufficient for interoperability and allows for
      the most lightweight implementations.
    </li>
                <li>
      ENCR_AES_GCM_16 is an authenticated encryption with associated data (AEAD) cipher
      mode, so no additional ESP authentication algorithm is needed, simplifying
      the MTI requirements of IPsec for the ACP.
    </li>
                <li>There is no MTI requirement for the support of ENCR_AES_CBC because
      ENCR_AES_GCM_16 is assumed to be feasible with less cost/higher
      performance in modern devices hardware accelerated implementations
      compared to ENCR-AES_CBC.
    </li>
                <li>
      ENCR_CHACHA20_POLY1305 is mandatory in <xref target="RFC8221" format="default"/> because
      of its target use as a fallback algorithm in case weaknesses in AES are
      uncoverered. Unfortunately, there is currently no way to automatically
      propagate across an ACP a policy to disallow use of AES based algorithms,
      so this target benefit of ENCR_CHACHA20_POLY1305 can not fully be adopted
      yet for the ACP.  Therefore this algorithm is only recommended. Changing 
      from AES to this algorithm at potentially big drop in performance could
      also render the ACP inoperable. Therefore the performance requirement against
      this algorithm so that it could become an effective security backup to AES
      for the ACP once a policy to switch over to it or prefer it is available in an ACP framework.
    </li>
              </ul>
              <t>
  <xref target="RFC8221" format="default"/> allows for 128-bit or 256-bit AES keys.
  This document mandates that only 256-bit AES keys MUST be supported.
</t>
              <t>
When <xref target="RFC8221" format="default"/> is updated, ACP implementations will need to
consider legacy interoperability, and the IPsec WG has generally done a very
good job of taking that into account in its recommendations.
</t>
            </section>
            <section anchor="rfc4247req" toc="include" numbered="true">
              <name>RFC8247 (IKEv2)</name>
              <!-- tte PRF_HMAC_SHA2_512 requirement superceeded by requirement for RFC8247, which includes this PRF requirement:

<t>The IKEv2 PRF_HMAC_SHA2_512 pseudorandom function MUST be supported (<xref target="rfc4868"/>).</t>

 -->
              <t>
<xref target="RFC8247" format="default"/> provides a baseline recommendation for mandatory to implement ciphers, integrity checks, pseudo-random-functions and Diffie-Hellman mechanisms.
Those recommendations, and the recommendations of subsequent documents apply well to the ACP.
Because IKEv2 for ACP secure channels is sufficient to be implemented in control plane software, rather than in ASIC hardware, and ACP nodes supporting IKEv2 are not assumed to be code-space constrained, and because existing IKEv2 implementations are expected to support <xref target="RFC8247" format="default"/> recommendations, this documents makes no attempt to simplify its recommendations for use with the ACP.
</t>
              <t>See <xref target="IKEV2IANA" format="default"/> for IANA IKEv2 parameter names used in this text.</t>
              <t>
ACP Nodes supporting IKEv2 MUST comply with <xref target="RFC8247" format="default"/> amended by the following requirements which constitute a policy statement as permitted by <xref target="RFC8247" format="default"/>.
</t>
              <t>To signal the ACP certificate chain (including TA) as required by <xref target="common-requirements" format="default"/>, "X.509 Certificate - Signature" payload in IKEv2 can be used. It is mandatory according to <xref target="RFC7296" format="default"/> section 3.6.</t>
              <t>ACP nodes SHOULD set up IKEv2 to only use the ACP certificate and TA when acting as an IKEv2 responder on the IPv6 link local address and port number indicated in the AN_ACP DULL GRASP announcements (see <xref target="discovery-grasp" format="default"/>).</t>
              <t>When CERTREQ is received from a peer, and does not indicate any of this 
ACP nodes TA certificates, the ACP node SHOULD ignore the CERTREQ and 
continue sending its certificate chain including its TA as subject to 
the requirements and explanations in <xref target="common-requirements" format="default"/>. This will not result in successful mutual authentication but assists diagnostics.</t>
              <t>Note that with IKEv2, failing authentication will only result in the responder
receiving the certificate chain from the initiator, but not vice versa. Because
ACP secure channel setup is symmetric (see <xref target="neighbor_verification" format="default"/>),
every non-malicious ACP neighbor will attempt to connect as an initiator though,
allowing to obtain the diagnostic information about the neighbors certificate.</t>

              <t>In IKEv2, ACP nodes are identified by their ACP address.
The ID_IPv6_ADDR IKEv2 identification payload MUST be used and MUST convey the ACP address.
If the peer's ACP certificate includes a 32HEXDIG ACP address in the acp-node-name (not "0" or omitted), the address in the IKEv2 identification payload MUST match it.
See <xref target="certcheck" format="default"/> for more information about "0" or omitted ACP address fields in the acp-node-name.
</t>
              <t>
IKEv2 authentication MUST use authentication method 14 ("Digital Signature") for ACP certificates; this authentication method can be used with both RSA and ECDSA certificates, indicated by an ASN.1 object AlgorithmIdentifier.
</t>
              <t>The Digital Signature hash SHA2-512 MUST be supported (in addition to SHA2-256).</t>
              <t>
The IKEv2 Diffie-Hellman key exchange group 19 (256-bit random ECP), MUST be support.  Reason: ECC provides a similar security level to finite-field (MODP) key exchange with a shorter key length, so is generally preferred absent other considerations.
</t>
            </section>
          </section>
          <section anchor="IPsec-GRE" toc="include" numbered="true">
            <name>IPsec with GRE encapsulation</name>
            <t>In network devices it is often more common to implement high performance virtual interfaces on top of GRE encapsulation than on top of a "native" IPsec association (without any other encapsulation than those defined by IPsec).  On those devices it may be beneficial to run the ACP secure channel on top of GRE protected by the IPsec association.</t>
            <t>The requirements for ESP/IPsec/IKEv2 with GRE are the same as for native IPsec (see <xref target="IPsec" format="default"/>) except that IPsec transport mode and next protocol GRE (47) are to be negotiated. Tunnel mode is not required because of GRE. Traffic Selectors are:</t>
            <t>TSi = (47, 0-65535, Initiator-IPv6-LL-addr ... Initiator-ACP-LL-addr)</t>
            <t>TSr = (47, 0-65535, Responder-IPv6-LL-addr ... Responder-IPv6-LL-addr)</t>
            <t>If IKEv2 initiator and responder support IPsec over GRE, it will be preferred over native IPsec because of the way how IKEv2 negotiates transport mode as used by this IPsec over GRE profile) versus tunnel mode as used by native IPsec (see <xref target="RFC7296" format="default"/>, section 1.3.1).  The ACP IPv6 traffic has to be carried across GRE according to <xref target="RFC7676" format="default"/>.</t>
          </section>
        </section>
        <!-- IPsec -->
        <section anchor="DTLS" numbered="true" toc="default">
          <name>ACP via DTLS</name>

          <t>This document defines the use of ACP via DTLS in the assumption that it is likely the first transport encryption supported in some classes of constrained devices because DTLS is already used in those devices but IPsec is not, and code-space may be limited.</t>

          <t>An ACP node announces its ability to support DTLS version 1.2 (<xref target="RFC6347" format="default"/>) compliant with the requirements defined in this document as an ACP secure channel protocol in GRASP through the "DTLS" objective-value in the "AN_ACP" objective (see <xref target="discovery-grasp" format="default"/>).</t>

          <t>To run ACP via UDP and DTLS, a locally assigned UDP port is used that is announced as a parameter in the GRASP AN_ACP objective to candidate neighbors.  This port can also be any newer version of DTLS as long as that version can negotiate a DTLS v1.2 connection in the presence of an DTLS v1.2 only peer.</t>

          <t>All ACP nodes supporting DTLS as a secure channel protocol MUST adhere to the DTLS implementation recommendations and security considerations of BCP 195, <xref target="RFC7525" format="default">BCP 195</xref> except with respect to the DTLS version. ACP nodes supporting DTLS MUST support DTLS 1.2. They MUST NOT support older versions of DTLS.</t>

          <t>Unlike for IPsec, no attempts are made to simplify the requirements of the BCP 195 recommendations because the expectation is that DTLS would be using software-only implementations where the ability to reuse of widely adopted implementations is more important than minizing the complexity of a hardware accelerated implementation which is known to be important for IPsec.</t>

          <t>DTLS v1.3 (<xref target="I-D.ietf-tls-dtls13" format="default"/>) is "backward compatible" with
DTLS v1.2 (see section 1. of DTLS v1.3).  A DTLS implementation supporting both
DTLS v1.2 and DTLS v1.3 does comply with the above requirements of negotiating to
DTLS v1.2 in the presence of a DTLS v1.2 only peer, but using DTLS v1.3 when
booth peers support it.</t>

          <t>Version v1.2 is the MTI version of DTLS in this specification because
</t>
          <ul spacing="compact">
            <li>There is more experience with DTLS v1.2 across the spectrum of target ACP nodes.</li>
            <li>Firmware of lower end, embedded ACP nodes may not support a newer version for a long time.</li>
            <li>There are significant changes of DTLS v1.3, such as  a different record layer requiring time to gain implementation and deployment experience especially on lower end, code space limited devices.</li>
            <li>The existing BCP <xref target="RFC7525" format="default"/> for DTLS v1.2 may equally take longer time to be updated with experience from a newer DTLS version.</li>
            <li> There are no significant use-case relevant benefits of DTLS v1.3 over DTLS v1.2 in the
      context of the ACP options for DTLS. For example, signaling performance improvements for session setup in
      DTLS v1.3 is not important for the ACP given the long-lived nature of ACP secure channel connections and
      the fact that DTLS connections are mostly link-local (short RTT).</li>
          </ul>
          <t>Nevertheless, newer versions of DTLS, such as DTLS v1.3 have more strict security requirements and use of the latest standard protocol version is for IETF security standards in general recommended. Therefore, ACP implementations are advised to support all the newer versions of DTLS that can still negotiate down to DTLS v1.2.</t>
          <t>[RFC-editor: if by the time of AUTH48, DTLS 1.3 would have evolved to be an RFC, then not only would the references to the DTLS v1.3 draft be changed to the RFC number, but that RFC is then going to be put into the normative list of references and the above paragraph is going to be amended to say: Implementations SHOULD support [DTLSv1.3-RFC]. This is not done right now, because there is no benefit in potentially waiting in RFC-editor queue for that RFC given how the text alreayd lays out a non-nrmative desire to support DTLSv1.3.]</t>
          <t>There is no additional session setup or other security association besides this simple DTLS setup.  As soon as the DTLS session is functional, the ACP peers will exchange ACP IPv6 packets as the payload of the DTLS transport connection.  Any DTLS defined security association mechanisms such as re-keying are used as they would be for any transport application relying solely on DTLS.</t>
          <!-- RFC 6125 is a common reference for TLS server-identification/verification procedures, but it covers only names, and only server identities; as such, it's not really a good fit here.  In fact, we can't really do much name validation since the connection is over link-local IPv6 addresses anyway. -->
        </section>
        <!-- DTLS -->
        <section anchor="Profiles" numbered="true" toc="default">
          <name>ACP Secure Channel Profiles</name>
          <t>As explained in the beginning of <xref target="channel-selection" format="default"/>, there is no single secure channel mechanism mandated for all ACP nodes. Instead, this section defines two ACP profiles (baseline and constrained) for ACP nodes that do introduce such requirements.</t>
          <t>An ACP node supporting the "baseline" profile MUST support IPsec natively and MAY support IPsec via GRE. An ACP node supporting the "constrained" profile node that cannot support IPsec MUST support DTLS.  An ACP node connecting an area of constrained ACP nodes with an area of baseline ACP nodes needs to support IPsec and DTLS and supports therefore the baseline and constrained profile.</t>
          <t>Explanation: Not all type of ACP nodes can or need to connect directly to each other or are able to support or prefer all possible secure channel mechanisms.  For example, code space limited IoT devices may only support DTLS because that code exists already on them for end-to-end security, but high-end core routers may not want to support DTLS because they can perform IPsec in accelerated hardware but would need to support DTLS in an underpowered CPU forwarding path shared with critical control plane operations. This is not a deployment issue for a single ACP across these type of nodes as long as there are also appropriate gateway ACP nodes that support sufficiently many secure channel mechanisms to allow interconnecting areas of ACP nodes with a more constrained set of secure channel protocols. On the edge between IoT areas and high-end core networks, general-purpose routers that act as those gateways and that can support a variety of secure channel protocols is the norm already.</t>
          <t>IPsec natively with tunnel mode provides the shortest encapsulation overhead. GRE may be preferred by legacy implementations because the virtual interfaces required by ACP design in conjunction with secure channels have in the past more often been implemented for GRE than purely for native IPsec.</t>
          <t>ACP nodes need to specify in documentation the set of secure ACP mechanisms they support and should declare which profile they support according to above requirements.</t>
        </section>
        <!-- Profiles -->
      </section>
      <!-- associations -->
      <section anchor="GRASP" numbered="true" toc="default">
        <name>GRASP in the ACP</name>
        <section anchor="GRASP-core" numbered="true" toc="default">
          <name>GRASP as a core service of the ACP</name>
          <t>The ACP MUST run an instance of GRASP inside of it.  It is a key part of the
        ACP services.  The function in GRASP that makes it fundamental as a service of the ACP
        is the ability to provide ACP wide service  discovery (using objectives in GRASP).</t>
          <t>ACP provides IP unicast routing via the RPL routing protocol (see <xref target="routing" format="default"/>).</t>
          <t>The ACP does not use IP multicast routing nor does it provide generic IP multicast services
        (the handling of GRASP link-local multicast messages is explained in <xref target="GRASP-substrate" format="default"/>).
        Instead, the ACP provides service discovery via the objective discovery/announcement and
        negotiation mechanisms of the ACP GRASP instance (services are a form of objectives).
        These mechanisms use hop-by-hop reliable flooding of GRASP messages for both service discovery
        (GRASP M_DISCOVERY messages) and service announcement (GRASP M_FLOOD messages).</t>
          <t>See <xref target="acp-grasp" format="default"/> for discussion about this design choice
        of the ACP.</t>
        </section>
        <section anchor="GRASP-substrate" numbered="true" toc="default">
          <name>ACP as the Security and Transport substrate for GRASP</name>
          <t>In the terminology of GRASP (<xref target="I-D.ietf-anima-grasp" format="default"/>), the ACP is the
        security and transport substrate for the GRASP instance run inside the ACP ("ACP GRASP").</t>
          <t>This means that the ACP is responsible for ensuring that this instance of GRASP is
        only sending messages across the ACP GRASP virtual interfaces.
        Whenever the ACP adds or deletes such an interface because of new ACP secure channels or
        loss thereof, the ACP needs to indicate this to the ACP instance of GRASP.  The ACP exists
        also in the absence of any active ACP neighbors.  It is created when the node has a domain
        certificate, and continues to exist even if all of its neighbors cease operation.</t>
          <t>In this case ASAs using GRASP running on the same node would still need 
        to be able to discover each other's objectives.  When the ACP does not exist, ASAs leveraging 
        the ACP instance of GRASP via APIs MUST still be able to operate, and MUST be able to
        understand that there is no ACP and that therefore the ACP instance of GRASP cannot
        operate.</t>
          <t>The following explanation how ACP acts as the security and transport substrate for GRASP is visualized
        in <xref target="acp-grasp-picture" format="default"/> below.</t>
          <t>GRASP unicast messages inside the ACP always use the ACP address.  Link-local
        addresses from the ACP VRF MUST NOT be used inside objectives.  GRASP unicast messages inside the ACP
        are transported via TLS. See <xref target="tls" format="default"/> for TLS requirements.
        TLS mutual authentication MUST use the ACP domain membership check 
        defined in (<xref target="certcheck" format="default"/>).</t>

          <t>GRASP link-local multicast messages are targeted for a specific ACP virtual interface 
        (as defined <xref target="ACP_interfaces" format="default"/>) but are sent by the ACP into 
        an ACP GRASP virtual interface that is constructed from the TCP
        connection(s) to the IPv6 link-local neighbor address(es) on the underlying
        ACP virtual interface.  If the ACP GRASP virtual interface has two or more neighbors,
        the GRASP link-local multicast messages are replicated to all neighbor TCP connections.</t>

          <t>TCP and TLS connections for GRASP in the ACP use the IANA assigned TCP port for GRASP (7107).
        Effectively the transport stack is expected to be TLS for connections from/to the ACP
        address (e.g., global scope address(es)) and TCP for connections from/to link-local addresses
        on the ACP virtual interfaces.  The latter ones are only used for flooding of GRASP
        messages.</t>
          <!-- https://trac.tools.ietf.org/tools/xml2rfc/trac/ticket/344 -->
          <?rfc needLines="48" ?>
          <figure anchor="acp-grasp-picture">
            <name>ACP as security and transport substrate for GRASP</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
    ..............................ACP..............................
    .                                                             .
    .         /-GRASP-flooding-\         ACP GRASP instance       .
    .        /                  \                                 A
    .    GRASP      GRASP      GRASP                              C
    .  link-local   unicast  link-local                           P
    .   multicast  messages   multicast                           .
    .   messages      |       messages                            .
    .      |          |          |                                .
    ...............................................................
    .      v          v          v    ACP security and transport  .
    .      |          |          |    substrate for GRASP         .
    .      |          |          |                                .
    .      |       ACP GRASP     |       - ACP GRASP              A
    .      |       Loopback      |         Loopback interface     C
    .      |       interface     |       - ACP-cert auth          P
    .      |         TLS         |                                .
    .   ACP GRASP     |       ACP GRASP  - ACP GRASP virtual      .
    .   subnet1       |       subnet2      virtual interfaces     .
    .     TCP         |         TCP                               .
    .      |          |          |                                .
    ...............................................................
    .      |          |          |   ^^^ Users of ACP (GRASP/ASA) .
    .      |          |          |   ACP interfaces/addressing    .
    .      |          |          |                                .
    .      |          |          |                                A
    .      | ACP-Loopback Interf.|      <- ACP Loopback interface C
    .      |      ACP-address    |       - address (global ULA)   P
    .    subnet1      |        subnet2  <- ACP virtual interfaces .
    .  link-local     |      link-local  - link-local addresses   .
    ...............................................................
    .      |          |          |   ACP VRF                      .
    .      |     RPL-routing     | virtual routing and forwarding .
    .      |   /IP-Forwarding\   |                                A
    .      |  /               \  |                                C
    .  ACP IPv6 packets   ACP IPv6 packets                        P
    .      |/                   \|                                .
    .    IPsec/DTLS        IPsec/DTLS  - ACP-cert auth            .
    ...............................................................
             |                   |   Data-Plane
             |                   |     
             |                   |     - ACP secure channel
         link-local        link-local  - encapsulation addresses
           subnet1            subnet2  - Data-Plane interfaces
             |                   |
          ACP-Nbr1            ACP-Nbr2
        ]]></artwork>
          </figure>
          <section anchor="GRASP-discussion" numbered="true" toc="default">
            <name>Discussion</name>
            <t>TCP encapsulation for GRASP M_DISCOVERY and M_FLOOD link local messages is used because 
            these messages are flooded across potentially many hops to all ACP nodes and a single
            link with even temporary packet loss issues (e.g., WiFi/Powerline link) can reduce the
            probability for loss free transmission so much that applications would want to increase
            the frequency with which they send these messages.  Such shorter periodic retransmission
            of datagrams would result in more traffic and processing overhead in the ACP 
            than the hop-by-hop reliable retransmission mechanism by TCP and duplicate elimination
            by GRASP.</t>
            <t>TLS is mandated for GRASP non-link-local unicast because the ACP secure channel
            mandatory authentication and encryption protects only against attacks from the outside
            but not against attacks from the inside: Compromised ACP members that have (not yet) been
            detected and removed (e.g., via domain certificate revocation / expiry).</t>
            <t>If GRASP peer connections were to use just TCP, compromised ACP members could
            simply eavesdrop passively on GRASP peer connections for whom they are on-path ("man in the
            middle" - MITM) or intercept and modify them.  With TLS, it is not possible to completely
            eliminate problems with compromised ACP members, but attacks are a lot more complex:</t>
            <t>Eavesdropping/spoofing by a compromised ACP node is still possible because
            in the model of the ACP and GRASP, the provider and consumer of an objective have 
            initially no unique information (such as an identity) about the other side which
            would allow them to distinguish a benevolent from a compromised peer.  The compromised
            ACP node would simply announce the objective as well, potentially filter the original
            objective in GRASP when it is a MITM and act as an application level proxy.  This of course
            requires that the compromised ACP node understand the semantics of the GRASP negotiation
            to an extent that allows it to proxy it without being detected, but in an ACP environment
            this is quite likely public knowledge or even standardized.</t>
            <t>The GRASP TLS connections are run the same as any other ACP traffic through the ACP
            secure channels.  This leads to double authentication/encryption, which has the following
            benefits:</t>
            <ul spacing="compact">
              <li>Secure channel methods such as IPsec may provide protection against additional
                attacks, for example reset-attacks.</li>
              <li>The secure channel method may leverage hardware acceleration and there may be little
                or no gain in eliminating it.</li>
              <li>There is no different security model for ACP GRASP from other ACP traffic. Instead,
                there is just another layer of protection against certain attacks from the inside
                which is important due to the role of GRASP in the ACP.</li>
            </ul>
          </section>
        </section>
      </section>
      <!-- GRASPinstances -->
      <section anchor="separation" numbered="true" toc="default">
        <name>Context Separation</name>
        <t>The ACP is in a separate context from the normal Data-Plane of the node.  This context includes the ACP channels' IPv6 forwarding and routing as well as any required higher layer ACP functions.</t>
        <t>In classical network system, a dedicated VRF is one logical implementation option for the ACP.  If possible by the systems software architecture, separation options that minimize shared components are preferred, such as a logical container or virtual machine instance.  The context for the ACP needs to be established automatically during bootstrap of a node.  As much as possible it should be protected from being modified unintentionally by ("Data-Plane") configuration.</t>
        <t>Context separation improves security, because the ACP is not reachable from the Data-Plane routing or forwarding table(s).  Also, configuration errors from the Data-Plane setup do not affect the ACP.</t>
      </section>
      <!-- separation -->
      <section anchor="addressing" numbered="true" toc="default">
        <name>Addressing inside the ACP</name>
        <t>The channels explained above typically only establish communication between two adjacent nodes.  In order for communication to happen across multiple hops, the autonomic control plane requires ACP network wide valid addresses and routing.  Each ACP node creates a Loopback interface with an ACP network wide unique address (prefix) inside the ACP context (as explained in in <xref target="separation" format="default"/>).  This address may be used also in other virtual contexts.</t>
        <t>With the algorithm introduced here, all ACP nodes in the same routing subdomain have the same /48 ULA prefix.  Conversely, ULA global IDs from different domains are unlikely to clash, such that two ACP networks can be merged, as long as the policy allows that merge.  See also <xref target="self-healing" format="default"/> for a discussion on merging domains.</t>
        <t>Links inside the ACP only use link-local IPv6 addressing, such that each node's ACP only requires one routable address prefix.</t>
        <section anchor="addr-fundamentals" numbered="true" toc="default">
          <name>Fundamental Concepts of Autonomic Addressing</name>
          <ul spacing="compact">
            <li>Usage: Autonomic addresses are exclusively used for self-management functions inside a trusted domain.  They are not used for user traffic.  Communications with entities outside the trusted domain use another address space, for example normally managed routable address space (called "Data-Plane" in this document).</li>
            <li>Separation: Autonomic address space is used separately from user address space and other address realms.  This supports the robustness requirement.</li>
            <li>Loopback-only: Only ACP Loopback interfaces (and potentially those configured for "ACP connect", see <xref target="ACPconnect" format="default"/>) carry routable address(es); all other interfaces (called ACP virtual interfaces) only use IPv6 link local addresses.  The usage of IPv6 link local addressing is discussed in <xref target="RFC7404" format="default"/>.</li>
            <li>Use-ULA: For Loopback interfaces of ACP nodes, we use ULA with L=1 (as defined in section 3.1 of <xref target="RFC4193" format="default"/>). Note that the random hash for ACP Loopback addresses uses the definition in <xref target="scheme" format="default"/> and not the one of <xref target="RFC4193" format="default"/> section 3.2.2.</li>
            <li>No external connectivity: They do not provide access to the Internet.  If a node requires further reaching connectivity, it should use another, traditionally managed address scheme in parallel.</li>
            <li>Addresses in the ACP are permanent, and do not support temporary addresses as defined in <xref target="RFC4941" format="default"/>.</li>
            <li>Addresses in the ACP are not considered sensitive on privacy grounds because ACP nodes are not expected to be end-user hosts and ACP addresses do therefore not represent end-users or groups of end-users.  All ACP nodes are in one (potentially federated) administrative domain. They are assumed to be to be candidate hosts of ACP traffic amongst each other or transit thereof. There are no transit nodes less privileged to know about the identity of other hosts in the ACP.  Therefore, ACP addresses do not need to be pseudo-random as discussed in <xref target="RFC7721" format="default"/>.  Because they are not propagated to untrusted (non ACP) nodes and stay within a domain (of trust), we also consider them not to be subject to scanning attacks.</li>
          </ul>
          <t>The ACP is based exclusively on IPv6 addressing, for a variety of reasons:
                                        </t>
          <ul spacing="compact">
            <li>Simplicity, reliability and scale: If other network layer protocols were supported, each would have to have its own set of security associations, routing table and process, etc.</li>
            <li>Autonomic functions do not require IPv4: Autonomic functions and autonomic service agents are new concepts.  They can be exclusively built on IPv6 from day one.  There is no need for backward compatibility.</li>
            <li>OAM protocols do not require IPv4: The ACP may carry OAM protocols.  All relevant protocols (SNMP, TFTP, SSH, SCP, Radius, Diameter, ...) are available in IPv6. See also <xref target="RFC8368" format="default"/> for how ACP could be made to interoperate with IPv4 only OAM.</li>
          </ul>
          <t>Further explanation about the addressing and routing related reasons for the choice of the autonomous ACP addressing can be found in <xref target="ACP-loopback" format="default"/>.</t>
        </section>
        <section anchor="scheme" numbered="true" toc="default">
          <name>The ACP Addressing Base Scheme</name>
          <t>The Base ULA addressing scheme for ACP nodes has the following format:</t>
          <figure anchor="base-addr-scheme">
            <name>ACP Addressing Base Scheme</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
  8      40                     2                     78
+--+-------------------------+------+------------------------------+
|fd| hash(routing-subdomain) | Type |     (sub-scheme)             |
+--+-------------------------+------+------------------------------+
        ]]></artwork>
          </figure>
          <t>The first 48-bits follow the ULA scheme, as defined in <xref target="RFC4193" format="default"/>, to which a type field is added:
        </t>
          <ul spacing="compact">
            <li>"fd" identifies a locally defined ULA address.</li>
            <li>The 40-bits ULA "global ID" (term from <xref target="RFC4193" format="default"/>) for ACP addresses carried in the acp-node-name in the ACP certificates are the first 40-bits of the SHA256 hash of the routing subdomain from the same acp-node-name.  In the example of <xref target="domcert-acpinfo" format="default"/>, the routing subdomain is "area51.research.acp.example.com" and the 40-bits ULA "global ID" 89b714f3db.</li>
            <li>When creating a new routing-subdomain for an existing autonomic network, it MUST be ensured, that rsub is selected so the resulting hash of the routing-subdomain does not collide with the hash of any pre-existing routing-subdomains of the autonomic network. This ensures that ACP addresses created by registrars for different routing subdomains do not collide with each others.</li>
            <li>To allow for extensibility, the fact that the ULA "global ID" is a hash of the routing subdomain SHOULD NOT be assumed by any ACP node during normal operations.  The hash function is only executed during the creation of the certificate.  If BRSKI is used then the BRSKI registrar will create the acp-node-name in response to the EST Certificate Signing Request (CSR) Attribute Request message by the pledge.</li>
            <li>Establishing connectivity between different ACP (different acp-domain-name) is outside the scope of this specification.
 If it is being done through future extensions, then the rsub of all routing-subdomains across those autonomic networks need to be selected so the resulting routing-subdomain hashes do not collide. For example a large cooperation with its own private TA may want to create different autonomic networks that initially should not be able to connect but where the option to do so should be kept open. When taking this future possibility into account, it is easy to always select rsub so that no collisions happen.</li>
            <li>Type: This field allows different address sub-schemes.  This addresses the "upgradability" requirement.  Assignment of types for this field will be maintained by IANA.</li>
          </ul>
          <t>The sub-scheme may imply a range or set of addresses assigned to the node, this is called the ACP address range/set and explained in each sub-scheme.</t>
          <t>Please refer to <xref target="acp-registrars" format="default"/> and <xref target="address-spaces" format="default"/> for further explanations why the following Sub-Addressing schemes are used and why multiple are necessary.</t>
          <t>
          The following summarizes the addressing Sub-Schemes:
</t>
          <figure anchor="addr-scheme-summary">
            <name>Addressing schemes</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
+------+-----+-----------------+-------+------------+
| Type | Z   | name            | F-bit | V-bit size |
+------+-----+-----------------+-------+------------+
| 0x00 | 0   | ACP-Zone        | N/A   | 1 bit      |
+------+-----+-----------------+-------+------------+
| 0x00 | 1   | ACP-Manual      | N/A   | 1 bit      |
+------+-----+-----------------+-------+------------+
| 0x01 | N/A | ACP-VLong-8     | 0     | 8 bits     |
+------+-----+-----------------+-------+------------+
| 0x01 | N/A | ACP-VLong-16    | 1     | 16 bits    |
+------+-----+-----------------+-------+------------+
  ]]></artwork>
          </figure>
        </section>
        <!-- base-scheme -->
        <section anchor="zone-scheme" numbered="true" toc="default">
          <name>ACP Zone Addressing Sub-Scheme (ACP-Zone)</name>
          <t>This sub-scheme is used when the Type field of the base scheme is 0x00 and the Z bit is 0x0.</t>
          <figure anchor="addr-scheme">
            <name>ACP Zone Addressing Sub-Scheme</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[

                 64                             64
+-----------------+---+---------++-----------------------------+---+
|  (base scheme)  | Z | Zone-ID ||           Node-ID               |
|                 |   |         || Registrar-ID |   Node-Number| V |
+-----------------+---+---------++--------------+--------------+---+
         50         1     13            48           15          1

                ]]></artwork>
          </figure>
          <t>The fields are defined as follows:</t>
          <ul spacing="compact">
            <li>Type: MUST be 0x0.</li>
            <li>Z: MUST be 0x0.</li>
            <li>Zone-ID: A value for a network zone.</li>
            <li>Node-ID: A unique value for each node.</li>
          </ul>
          <t>The 64-bit Node-ID must be unique across the ACP domain for each node. It is derived and composed as follows:</t>
          <ul spacing="compact">
            <li>Registrar-ID (48-bit): A number unique inside the domain that identifies the ACP registrar which assigned the Node-ID to the node.  One or more domain-wide unique identifiers of the ACP registrar can be used for this purpose. See <xref target="registrars-unique" format="default"/>.</li>
            <li>Node-Number: Number to make the Node-ID unique.  This can be sequentially assigned by the ACP Registrar owning the Registrar-ID.</li>
            <li>V (1-bit): Virtualization bit: 0: Indicates the ACP itself ("ACP node base system); 1: Indicates the optional "host" context on the ACP node (see below).</li>
          </ul>
          <t>In the ACP Zone Addressing Sub-Scheme, the ACP address in the certificate has V field as all zero bits.</t>
          <t>The ACP address set of the node includes addresses with any Zone-ID value and any V value. No two nodes in the same ACP can have the same Node-ID, but differerent Zone-IDs.</t>
          <t>The Virtual bit in this sub-scheme allows the easy addition of the ACP as a component to existing systems without causing problems in the port number space between the services in the ACP and the existing system.  V:0 is the ACP router (autonomic node base system), V:1 is the host with pre-existing transport endpoints on it that could collide with the transport endpoints used by the ACP router.  The ACP host could for example have a p2p virtual interface with the V:0 address as its router into the ACP.  Depending on the software design of ASAs, which is outside the scope of this specification, they may use the V:0 or V:1 address.</t>
          <t>The location of the V bit(s) at the end of the address allows the announcement of a single prefix for each ACP node.  For example, in a network with 20,000 ACP nodes, this avoid 20,000 additional routes in the routing table.</t>
          <t>It is RECOMMENDED that only Zone-ID 0 is used unless it is meant to be
                used in conjunction with operational practices for partial/incremental adoption
                of the ACP as described in <xref target="incremental-adoption" format="default"/>.</t>
          <t>Note: Zones and Zone-ID as defined here are not related to <xref target="RFC4007" format="default"/> zones or zone_id. ACP zone addresses are not scoped (reachable only from within an RFC4007 zone) but reachable across the whole ACP. An RFC4007 zone_id is a zone index that has only local significance on a node, whereas an ACP Zone-ID is an identifier for an ACP zone that is unique across that ACP.</t>
        </section>
        <!-- zone-scheme -->
        <section anchor="manual-scheme" numbered="true" toc="default">
          <name>ACP Manual Addressing Sub-Scheme (ACP-Manual)</name>
          <t>This sub-scheme is used when the Type field of the base scheme is 0x00 and the Z bit is 0x1.</t>
          <figure anchor="manual-scheme-pic">
            <name>ACP Manual Addressing Sub-Scheme</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[

                64                             64
+---------------------+---+----------++-----------------------------+
|    (base scheme)    | Z | Subnet-ID||     Interface Identifier    |
+---------------------+---+----------++-----------------------------+
         50             1    13 

                ]]></artwork>
          </figure>
          <t>The fields are defined as follows:
                </t>
          <ul spacing="compact">
            <li>Type: MUST be 0x0.</li>
            <li>Z: MUST be 0x1.</li>
            <li>Subnet-ID: Configured subnet identifier.</li>
            <li>Interface Identifier.</li>
          </ul>
          <t>This sub-scheme is meant for "manual" allocation to subnets where the other addressing schemes cannot be used.  The primary use case is for assignment to ACP connect subnets (see <xref target="NMS" format="default"/>).</t>
          <t>"Manual" means that allocations of the Subnet-ID need to be done today with pre-existing, non-autonomic mechanisms.  Every subnet that uses this addressing sub-scheme needs to use a unique Subnet-ID (unless some anycast setup is done).</t>
          <t>The Z bit field was added to distinguish Zone addressing and manual addressing sub-schemes without requiring one more bit in the base scheme and therefore allowing for the Vlong scheme (described below) to have one more bit available.</t>
          <t>Manual addressing sub-scheme addresses SHOULD NOT be used in ACP certificates. Any node capable to build ACP secure channels and permitted by Registrar policy to participate in building ACP secure channels SHOULD receive an ACP address (prefix) from one of the other ACP addressing sub-schemes.  Nodes not capable (or permitted) to participate in ACP secure channels can connect to the ACP via ACP connect interfaces of ACP edge nodes (see <xref target="ACPconnect" format="default"/>), without setting up an ACP secure channel. Their ACP certificate MUST omit the acp-address field to indicate that their ACP certificate is only usable for non- ACP secure channel authentication, such as end-to-end transport connections across the ACP or Data-Plane.</t>
          <t>Address management of ACP connect subnets is done using traditional assignment methods and existing IPv6 protocols. See <xref target="ACautoconfig" format="default"/> for details.</t>
        </section>
        <!-- manual -->
        <section anchor="Vlong" numbered="true" toc="default">
          <name>ACP Vlong Addressing Sub-Scheme (ACP-VLong-8/ACP-VLong-16</name>
          <t>This sub-scheme is used when the Type field of the base scheme is 0x01.</t>
          <figure anchor="v8-scheme">
            <name>ACP Vlong Addressing Sub-Scheme</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[

          50                              78
+---------------------++-----------------------------+----------+
|    (base scheme)    ||           Node-ID                      |
|                     || Registrar-ID |F| Node-Number|        V |
+---------------------++--------------+--------------+----------+
          50                46         1   23/15          8/16
                ]]></artwork>
          </figure>
          <t>
                  This addressing scheme foregoes the Zone-ID field to allow
                  for larger, flatter routed networks (e.g., as in IoT) with
                  8421376 Node-Numbers (2^23+2^15).  It also allows for up to
                  2^16 (i.e. 65536) different virtualized addresses within a
                  node, which could be used to address individual software
                components in an ACP node.
                </t>
          <t>
                The fields are the same as in the Zone-ID sub-scheme with the
                following refinements:</t>
          <ul spacing="compact">
            <li>
                    F: format bit.  This bit determines the format of the
                    subsequent bits.
                  </li>
            <li>
                    V: Virtualization bit: this is a field that is
                    either 8 or 16 bits.  For F=0, it is 8 bits, for F=1
                    it is 16 bits.  The V bits are assigned by the ACP
                    node.  In the ACP certificate's ACP address <xref target="domcert-acpinfo" format="default"/>, the V-bits are always
                    set to 0.
                  </li>
            <li>
                    Registrar-ID: To maximize Node-Number and V, the
                    Registrar-ID is reduced to 46-bits. One or more domain-wide unique identifiers of the ACP registrar can be used for this purpose. See <xref target="registrars-unique" format="default"/>.
                  </li>
            <li>
                    The Node-Number is unique to each ACP node.  There are
                    two formats for the Node-Number.   When F=0, the
                    node-number is 23 bits,  for F=1 it is 15 bits.
                    Each format of node-number is considered to be in a
                    unique number space.
                  </li>
          </ul>
          <t>
                  The F=0 bit format addresses are intended to be used for
                  "general purpose" ACP nodes that would potentially have a
                  limited number (&lt; 256) of clients (ASA/Autonomic Functions
                  or legacy services) of the ACP that require separate
                  V(irtual) addresses.
                </t>
          <t>
                  The F=1 bit Node-Numbers are intended for
                  ACP nodes that are ACP edge nodes (see <xref target="NMS" format="default"/>)
                  or that have a large number of clients requiring separate
                  V(irtual) addresses.  For example large SDN controllers with
                  container modular software architecture (see <xref target="software" format="default"/>).
                </t>
          <t>
                  In the Vlong addressing sub-scheme, the ACP address in the
                  certificate has all V field bits as zero.  The ACP address
                  set for the node includes any V value.
                </t>
        </section>
        <!-- Vlong -->
        <section anchor="other-sub-schemes" numbered="true" toc="default">
          <name>Other ACP Addressing Sub-Schemes</name>
          <t>Before further addressing sub-schemes are defined, experience with the schemes defined here should be collected.  The schemes defined in this document have been devised to allow hopefully sufficiently flexible setup of ACPs for a variety of situation.  These reasons also lead to the fairly liberal use of address space: The Zone Addressing Sub-Scheme is intended to enable optimized routing in large networks by reserving bits for Zone-ID's.  The Vlong addressing sub-scheme enables the allocation of 8/16-bit of addresses inside individual ACP nodes.  Both address spaces allow distributed, uncoordinated allocation of node addresses by reserving bits for the registrar-ID field in the address.</t>

        </section>
        <section anchor="acp-registrars" numbered="true" toc="default">
          <name>ACP Registrars</name>
          <t>ACP registrars are responsible to enroll candidate ACP nodes
with ACP certificates and associated trust anchor(s). They are 
also responsible that an acp-node-name field
is included in the ACP certificate carrying the ACP
domain name and the ACP nodes ACP address prefix.  This address
prefix is intended to persist unchanged through the lifetime of the
ACP node.</t>
          <t>Because of the ACP addressing sub-schemes, an ACP domain can have
multiple distributed ACP registrars that do not need to coordinate
for address assignment. ACP registrars can also be sub-CAs, in
which case they can also assign ACP certificates without
dependencies against a (shared) TA (except during renewals
of their own certificates).</t>
          <t>ACP registrars are PKI registration authorities (RA) enhanced with
the handling of the ACP certificate specific fields. They 
request certificates for ACP nodes from a Certification Authority
through any appropriate mechanism (out of scope in this document,
but required to be BRSKI for ANI registrars). Only nodes that
are trusted to be compliant with the requirements against registrar
described in this section can be given the necessary credentials
to perform this RA function, such as credentials for the BRSKI
connection to the CA for ANI registrars.</t>
          <section anchor="registrars-protocols" numbered="true" toc="default">
            <name>Use of BRSKI or other Mechanism/Protocols</name>
            <t>Any protocols or mechanisms may be used by ACP registrars,
as long as the resulting ACP certificate and TA certificate(s) allow
to perform the ACP domain membership described in <xref target="certcheck" format="default"/>
with other ACP domain members, and meet the ACP addressing
requirements for its acp-node-name as described further below in this section.</t>
            <t>An ACP registrar could be a person deciding whether to
enroll a candidate ACP node and then orchestrating the
enrollment of the ACP certificate and associated TA,
using command line or web based commands on the candidate ACP node
and TA to generate and sign the ACP certificate
and configure certificate and TA onto the node.</t>
            <t>The only currently defined protocol for ACP registrars is BRSKI
(<xref target="I-D.ietf-anima-bootstrapping-keyinfra" format="default"/>). When BRSKI
is used, the ACP nodes are called ANI nodes, and the ACP registrars
are called BRSKI or ANI registrars.  The BRSKI specification does not define the
handling of the acp-node-name field because the rules
do not depend on BRSKI but apply equally to any protocols/mechanisms an
ACP registrar may use.</t>
          </section>
          <section anchor="registrars-unique" numbered="true" toc="default">
            <name>Unique Address/Prefix allocation</name>
            <t>ACP registrars MUST NOT allocate ACP address prefixes to ACP nodes
via the acp-node-name that would collide
with the ACP address prefixes of other ACP nodes in the same ACP domain.
This includes both prefixes allocated by the same ACP registrar to
different ACP nodes as well as prefixes allocated by other ACP registrars
for the same ACP domain.</t>
            <t>To support such unique address allocation, an ACP registrar MUST have
one or more 46-bit identifiers unique across the ACP domain which is called the 
Registrar-ID.  Allocation of Registrar-ID(s) to an ACP registrar can happen through
OAM mechanisms in conjunction with some database / allocation orchestration.</t>
            <t>ACP registrars running on physical devices with known globally unique
EUI-48 MAC address(es) can use the lower 46 bits of those address(es)
as unique Registrar-IDs without requiring any external signaling/configuration
(the upper two bits, V and U are not uniquely assigned but functional).
This approach is attractive for distributed, non-centrally administered, lightweight
ACP registrar implementations. There is no mechanism to deduce from a MAC
address itself whether it is actually uniquely assigned. Implementations need
to consult additional offline information before making this assumption. For
example by knowing that a particular physical product/MIC-chip is 
guaranteed to use globally unique assigned EUI-48 MAC address(es).</t>
            <t>When the candidate ACP device (called Pledge in BRSKI) is to be
enrolled into an ACP domain, the ACP registrar needs to allocate
a unique ACP address to the node and ensure that the ACP certificate
gets a acp-node-name field (<xref target="domcert-acpinfo" format="default"/>)
with the appropriate information - ACP domain-name, ACP-address,
and so on. If the ACP registrar uses BRSKI, it signals the ACP
acp-node-name field to the Pledge via the EST /csrattrs command
(see <xref target="I-D.ietf-anima-bootstrapping-keyinfra" format="default"/>,
section 5.9.2 - "EST CSR Attributes").</t>
            <t>[RFC Editor: please update reference to section 5.9.2 accordingly with latest BRSKI draft at time of publishing, or RFC]</t>
          </section>
          <section anchor="registrars-policy" numbered="true" toc="default">
            <name>Addressing Sub-Scheme Policies</name>
            <t>The ACP registrar selects for the candidate ACP node a unique 
address prefix from an appropriate ACP addressing sub-scheme,
either a zone addressing sub-scheme prefix (see <xref target="zone-scheme" format="default"/>),
or a Vlong addressing sub-scheme prefix (see <xref target="Vlong" format="default"/>). The
assigned ACP address prefix encoded in the acp-node-name field
of the ACP certificate indicates to the ACP node its ACP
address information. The sub-addressing scheme indicates the
prefix length: /127 for zone address sub-scheme, /120 or /112
for Vlong address sub-scheme. The first address of the prefix is the ACP address.
All other addresses in the prefix are for other uses by the ACP node
as described in the zone and Vlong addressing sub scheme sections.
The ACP address prefix itself is then signaled by the ACP node into
the ACP routing protocol (see <xref target="routing" format="default"/>) to establish
IPv6 reachability across the ACP.</t>
            <t>The choice of addressing sub-scheme and prefix-length in the Vlong address
sub-scheme is subject to ACP registrar policy. It could be an ACP domain
wide policy, or a per ACP node or per ACP node type policy. For example,
in BRSKI, the ACP registrar is aware of the IDevID certificate of the candidate ACP node,
which typically contains a "serialNumber" attribute in the 
subjects field distinguished name encoding that is often indicating the node's
vendor and device type and can be used to drive a policy selecting an appropriate
addressing sub-scheme for the (class of) node(s).</t>
            <t>ACP registrars SHOULD default to allocate ACP zone sub-address scheme
addresses with Zone-ID 0.</t>
            <t>ACP registrars that are aware of the IDevID certificate of a candidate ACP device
SHOULD be able to choose the zone vs. Vlong sub-address scheme for
ACP nodes based on the <xref target="X.520" format="default"/> "serialNumber" attribute in the 
subjects field distinguished name encoding of the IDevID certificate, for example
by the PID (Product Identifier) part which identifies the product type,
or the complete "serialNumber". The PID for example could identify 
nodes that allow for specialized ASA requiring multiple addresses or non-autonomic VMs for
services and those nodes could receive Vlong sub-address scheme ACP addresses.</t>
            <t>In a simple allocation scheme, an ACP registrar remembers persistently
across reboots its currently used Registrar-ID and for each addressing
scheme (Zone with Zone-ID 0, Vlong with /112, Vlong with /120), the
next Node-Number available for allocation and increases it during successful
enrollment to an ACP node.  In this simple allocation scheme, the ACP registrar
would not recycle ACP address prefixes from no longer used ACP nodes.</t>
            <t>If allocated addresses can not be remembered by registrars, then
it is necessary to either use a new value for the Register-ID field
in the ACP addresses, or determine allocated ACP addresses from determining the
addresses of reachable ACP nodes, which is not necessarily the set of all ACP nodes.
Non-tracked ACP addresses can be reclaimed by revoking
or not renewing their certificates and instead handing out new certificate
with new addresses (for example with a new Registrar-ID value). Note that
such strategies may require coordination amongst registrars.</t>
          </section>
          <section anchor="registrars-renewal" numbered="true" toc="default">
            <name>Address/Prefix Persistence</name>
            <t>When an ACP certificate is renewed or rekeyed via EST or other
mechanisms, the ACP address/prefix in the acp-node-name field
MUST be maintained unless security issues or violations of the unique
 address assignment requirements exist or are suspected by the ACP registrar.</t>
            <t>ACP address information SHOULD be maintained even when the renewing/rekeying
ACP registrar is not the same as the one that enrolled the prior ACP certificate.
See <xref target="sub-ca" format="default"/> for an example.</t>
            <t>ACP address information SHOULD also be maintained even after an ACP
certificate did expire or failed. See <xref target="domcert-re-enroll" format="default"/>
and <xref target="domcert-failing" format="default"/>.</t>
          </section>
          <section anchor="registrars-further" numbered="true" toc="default">
            <name>Further Details</name>
            <t><xref target="registrar-considerations" format="default"/> discusses further informative
details of ACP registrars: What interactions registrars need, what
parameters they require, certificate renewal and limitations, use of sub-CAs on
registrars and centralized policy control.</t>
          </section>
        </section>
      </section>
      <!-- addressing -->
      <section anchor="routing" numbered="true" toc="default">
        <name>Routing in the ACP</name>
        <t>Once ULA address are set up all autonomic entities should run a routing protocol within the autonomic control plane context.  This routing protocol distributes the ULA created in the previous section for reachability.  The use of the autonomic control plane specific context eliminates the probable clash with Data-Plane routing tables and also secures the ACP from interference from the configuration mismatch or incorrect routing updates.</t>
        <t>The establishment of the routing plane and its parameters are automatic and strictly within the confines of the autonomic control plane.  Therefore, no explicit configuration is required.</t>
        <t>All routing updates are automatically secured in transit as the channels of the ACP are encrypted, and this routing runs only inside the ACP.</t>
        <t>The routing protocol inside the ACP is RPL (<xref target="RFC6550" format="default"/>).  See <xref target="why-rpl" format="default"/> for more details on the choice of RPL.</t>
        <t>RPL adjacencies are set up across all ACP channels in the same domain including all its routing subdomains.  See <xref target="domain-usage" format="default"/> for more details.</t>
        <section anchor="rpl-profile" numbered="true" toc="default">
          <name>ACP RPL Profile</name>
          <t>The following is a description of the RPL profile that ACP nodes need to support by default.  The format of this section is derived from <xref target="I-D.ietf-roll-applicability-template" format="default"/>.</t>
          <section anchor="rpl-summary" numbered="true" toc="default">
            <name>Overview</name>
            <t>RPL Packet Information (RPI) defined in <xref target="RFC6550" format="default"/>, section 11.2 defines the
   data packet artefacts required or beneficial in forwarding of packets routed by RPL.
   This profile does not use RPI for better compatibility with accelerated hardware
   forwarding planes which most often does not support the Hop-by-Hop headers used for RPI,
   but also to avoid the overhead of the RPI header on the wire and cost of adding/removing them.
</t>
            <!--
  Note: Insertion/removal of headers by a (potentially silicon based) ACP
  node would be be necessary when senders/receivers of ACP packets are legacy
  NOC devices connected via ACP connect (see <xref target="NMS"/> to the ACP.
  Their connectivity can be handled in RPL as non-RPL-aware leafs (or "Internet")
  according to the Data-Plane architecture explained in
  <xref target="I-D.ietf-roll-useofrplinfo" />.
-->
            <section anchor="rpl-single-instance" numbered="true" toc="default">
              <name>Single Instance</name>
              <t>
      To avoid the need for RPI, the ACP RPL profile uses a simple destination prefix
      based routing/forwarding table. To achieve this, the profiles uses only one RPL
      instanceID.  This single instanceID can contain only one Destination Oriented 
      Directed Acyclic Graph (DODAG), and the routing/forwarding table can therefore
      only calculate a single class of service ("best effort towards the primary NOC/root")
      and cannot create optimized routing paths to accomplish latency or energy goals
      between any two nodes.
    </t>
              <t>
      This choice is a compromise. Consider a network that has multiple NOCs in different locations. 
      Only one NOC will become the DODAG root. Traffic to and from other NOCs has to be
      sent through the DODAG (shortest path tree) rooted in the primary NOC.
      Depending on topology, this can be an annoyance from a latency point of view
      or from minimizing network path resources, but this is deemed to be acceptable
      given how ACP traffic is "only" network management/control traffic.
      See <xref target="future-rpl" format="default"/> for more details.</t>
              <t>Using a single instanceID/DODAG does not introduce a single point of
      failure, as the DODAG will reconfigure itself when it detects Data-Plane
      forwarding failures including choosing a different root when the primary one fails.
    </t>
              <t>The benefit of this profile, especially compared to other IGPs is 
      that it does not calculate routes for node reachable through the same
      interface as the DODAG root. This RPL profile can therefore scale to
      much larger number of ACP nodes in the same amount of compute and memory
      than other routing protocols.  Especially on nodes that are leafs of the topology
      or those close to those leafs.
    </t>
            </section>
            <section anchor="rpl-convergence" numbered="true" toc="default">
              <name>Reconvergence</name>
              <t>
      In RPL profiles where RPL Packet Information (RPI, see <xref target="rpl-Data-Plane" format="default"/>)
      is present, it is also used to trigger reconvergence when misrouted, for example looping, packets
      are recognized because of their RPI data. This helps to minimize RPL signaling traffic
      especially in networks without stable topology and slow links.
    </t>
              <t>
      The ACP RPL profile instead relies on quick reconverging the DODAG by
      recognizing link state change (down/up) and triggering reconvergence signaling
      as described in <xref target="rpl-dodag-repair" format="default"/>.  Since links in the ACP
      are assumed to be mostly reliable (or have link layer protection against loss)
      and because there is no stretch according to <xref target="rpl-dodag-repair" format="default"/>, 
      loops caused by loss of RPL routing protocol signaling packets should be exceedingly rare.
    </t>
              <t>
      In addition, there are a variety of mechanisms possible in RPL to further
      avoid temporary loops RECOMMENDED to be used for the ACPL RPL profile:
      DODAG Information Objects (DIOs) SHOULD be sent 2 or 3 times to inform children
      when losing the last parent. The technique in <xref target="RFC6550" format="default"/>
      section 8.2.2.6. (Detaching) SHOULD be favored over that in section 8.2.2.5.,
      (Poisoning) because it allows local connectivity. Nodes SHOULD select 
      more than one parent, at least 3 if possible, and send Destination Advertisement Objects (DAO)s to all
      of them in parallel.</t>
              <t>
      Additionally, failed ACP tunnels can be quickly discovered trough the
      secure channel protocol mechanisms such as IKEv2 Dead Peer Detection.
      This can function as a replacement for a Low-power and Lossy Networks'
      (LLN's) Expected Transmission Count (ETX) feature that is not used
      in this profile.  A failure of an ACP tunnel should imediately signal the RPL
      control plane to pick a different parent.
    </t>
            </section>
          </section>
          <section anchor="rpl-instances" numbered="true" toc="default">
            <name>RPL Instances</name>
            <t>Single RPL instance.  Default RPLInstanceID = 0.</t>
          </section>
          <section anchor="rpl-storing" numbered="true" toc="default">
            <name>Storing vs. Non-Storing Mode</name>
            <t>RPL Mode of Operations (MOP): MUST support mode 2 - "Storing Mode of Operations
        with no multicast support".  Implementations MAY support mode 3 ("... with multicast support" as that is a superset of mode 2).  Note: Root indicates mode in DIO flow.</t>
          </section>
          <section anchor="rpl-dao-policy" numbered="true" toc="default">
            <name>DAO Policy</name>
            <t>Proactive, aggressive DAO state maintenance:</t>
            <ul spacing="compact">
              <li>Use K-flag in unsolicited DAO indicating change from previous
               information (to require DAO-ACK).</li>
              <li>Retry such DAO DAO-RETRIES(3) times with DAO-
               ACK_TIME_OUT(256ms) in between.</li>
            </ul>
          </section>
          <section anchor="rpl-path-metric" numbered="true" toc="default">
            <name>Path Metric</name>
            <t>Use Hopcount according to <xref target="RFC6551" format="default"/>. Note that this is
        solely for diagnostic purposes as it is not used by the objective function.</t>
          </section>
          <section anchor="rpl-objective-function" numbered="true" toc="default">
            <name>Objective Function</name>
            <t>Objective Function (OF): Use OF0 <xref target="RFC6552" format="default"/>.
           No use of metric containers.</t>
            <t>rank_factor: Derived from link speed:
            &lt;= 100Mbps: LOW_SPEED_FACTOR(5), else HIGH_SPEED_FACTOR(1)</t>
            <t>This is a simple rank differentiation between typical "low speed"
        or "IoT" links that commonly max out at 100 Mbps and typical 
        infrastructure links with speeds of 1 Gbps or higher. Given how
        the path selection for the ACP focusses only on reachability but
        not on path cost optimization, no attempts at finer grained path
        optimization are made. </t>
          </section>
          <section anchor="rpl-dodag-repair" numbered="true" toc="default">
            <name>DODAG Repair</name>
            <t>Global Repair: we assume stable links and ranks (metrics), so there is
              no need to periodically rebuild the DODAG.  The DODAG version is only
              incremented under catastrophic events (e.g., administrative action).</t>
            <t>Local Repair: As soon as link breakage is detected, the ACP node send
        No-Path DAO for all the targets that were reachable only via this link.
        As soon as link repair is detected, the ACP node validates if this link provides
        a better parent.  If so, a new rank is computed by the ACP node and it sends new DIO
        that advertise the new rank.  Then it sends a DAO with a new path sequence about itself.</t>
            <t>When using ACP multi-access virtual interfaces, local repair can be
               triggered directly by peer breakage, see <xref target="ACP-ma-virtual-interfaces" format="default"/>.</t>
            <t>stretch_rank: none provided ("not stretched").</t>
            <t>Data Path Validation: Not used.</t>
            <t>Trickle: Not used.</t>
          </section>
          <section anchor="rpl-multicast" numbered="true" toc="default">
            <name>Multicast</name>
            <t>Not used yet but possible because of the selected mode of operations.</t>
          </section>
          <section anchor="rpl-security" numbered="true" toc="default">
            <name>Security</name>
            <t><xref target="RFC6550" format="default"/> security not used, substituted by ACP security.</t>
            <t>Because the ACP links already include provisions for confidentiality and
         integrity protection, their usage at the RPL layer would be redundant, and 
         so RPL security is not used.</t>
          </section>
          <section anchor="rpl-p2p" numbered="true" toc="default">
            <name>P2P communications</name>
            <t>Not used.</t>
          </section>
          <section anchor="rpl-ipv6" numbered="true" toc="default">
            <name>IPv6 address configuration</name>
            <t>Every ACP node (RPL node) announces an IPv6 prefix covering the address(es) used in the ACP node.  The prefix length depends on the chosen addressing sub-scheme of the ACP address provisioned into the certificate of the ACP node, e.g., /127 for Zone Addressing Sub-Scheme or /112 or /120 for Vlong addressing sub-scheme.  See <xref target="addressing" format="default"/> for more details.</t>
            <t>Every ACP node MUST install a black hole (aka null) route for whatever ACP address space that it advertises (i.e.: the /96 or /127).  This is avoid routing loops for addresses that an ACP node has not (yet) used.</t>
          </section>
          <section anchor="rpl-admin" numbered="true" toc="default">
            <name>Administrative parameters</name>
            <t>Administrative Preference (<xref target="RFC6550" format="default"/>, 3.2.6 – to become root): Indicated in DODAGPreference field of DIO message.
            </t>
            <ul spacing="compact">
              <li>Explicit configured ”root”: 0b100</li>
              <li>ACP registrar (Default): 0b011</li>
              <li>ACP-connect (non-registrar): 0b010</li>
              <li>Default: 0b001.</li>
            </ul>
          </section>
          <section anchor="rpl-Data-Plane" numbered="true" toc="default">
            <name>RPL Packet Information</name>
            <t>RPI is not required in the ACP RPL profile for the following reasons.
           </t>
            <t>One RPI option is the RPL Source Routing Header (SRH) <xref target="RFC6554" format="default"/> which is not 
           necessary because the ACP RPL profile uses storing mode where each hop has the necessary next-hop
           forwarding information.</t>
            <t>The simpler RPL Option header <xref target="RFC6553" format="default"/> is also
           not necessary in this profile, because it uses a single RPL instance and data path
           validation is also not used.</t>
          </section>
          <section anchor="rpl-unknown" numbered="true" toc="default">
            <name>Unknown Destinations</name>
            <t>Because RPL minimizes the size of the routing and forwarding table, prefixes reachable through the same interface as the RPL root are not known on every ACP node.  Therefore traffic to unknown destination addresses can only be discovered at the RPL root.  The RPL root SHOULD have attach safe mechanisms to operationally discover and log such packets.</t>

            <t>As this requirement places additional constraints on the Data-Plane
              functionality of the RPL root, it does not apply to "normal" nodes
              that are not configured to have special functionality (i.e., the
              adminstrative parameter from <xref target="rpl-admin" format="default"/> has value 0b001).
              If the ACP network is degraded to the point where there are no nodes that
              could be configured as root, registrar, or ACP-connect nodes, it is
              possible that the RPL root ( and thus the ACP as a whole) would be
              unable to detect traffic to unknown destinations.  However, in the
              absence of nodes with administrative preference other than 0b001,
              there is also unlikely to be a way to get diagnostic information out
              of the ACP, so detection of traffic to unknown destinations would not
              be actionable anyway.
            </t>

          </section>
        </section>
        <!-- rpl -->
      </section>
      <!-- routing -->
      <section anchor="acp_general" numbered="true" toc="default">
        <name>General ACP Considerations</name>
        <t>Since channels are by default established between adjacent neighbors, the resulting overlay network does hop-by-hop encryption.  Each node decrypts incoming traffic from the ACP, and encrypts outgoing traffic to its neighbors in the ACP.  Routing is discussed in <xref target="routing" format="default"/>.</t>
        <section anchor="performance" numbered="true" toc="default">
          <name>Performance</name>
          <t>There are no performance requirements against ACP implementations defined in this document because the performance requirements depend on the intended use case.  It is expected that full autonomic node with a wide range of ASA can require high forwarding plane performance in the ACP, for example for telemetry.  Implementations of ACP to solely support traditional/SDN style use cases can benefit from ACP at lower performance, especially if the ACP is used only for critical operations, e.g., when the Data-Plane is not available. The design of the ACP as specified in this document is intended to support a wide range of performance options: It is intended to allow software-only implementations at potentially low performance, but can also support high performance options. See <xref target="RFC8368" format="default"/> for more details.</t>
        </section>
        <!-- performance -->
        <section anchor="general_addressing" numbered="true" toc="default">
          <name>Addressing of Secure Channels</name>
          <t>In order to be independent of the Data-Plane routing and addressing,
the GRASP discovered ACP secure channels use IPv6 link local addresses between
adjacent neighbors.  Note: <xref target="remote-acp-neighbors" format="default"/> specifies
extensions in which secure channels are configured tunnels operating over
the Data-Plane, so those secure channels cannot be independent of the
Data-Plane.</t>
          <t>To avoid that Data-Plane configuration can impact the operations of the
IPv6 (link-local) interface/address used for ACP channels, appropriate
implementation considerations are required. If the IPv6 interface/link-local
address is shared with the Data-Plane it needs to be impossible to unconfigure/disable
it through configuration. Instead of sharing the IPv6 interface/link-local
address, a separate (virtual) interface with a separate IPv6 link-local
address can be used. For example, the ACP interface could be run over a separate 
MAC address of an underlying L2 (Ethernet) interface.  For more details and options,
see <xref target="dp-dependency" format="default"/>.</t>
          <t>Note that other (non-ideal) implementation choices may introduce additional undesired
dependencies against the Data-Plane. For example shared code and configuration
of the secure channel protocols (IPsec / DTLS).</t>
        </section>
        <section anchor="general_MTU" numbered="true" toc="default">
          <name>MTU</name>
          <t>The MTU for ACP secure channels MUST be derived locally from the underlying link MTU minus the secure channel encapsulation overhead.</t>
          <t>ACP secure Channel protocols do not need to perform MTU discovery because they are built across L2 adjacencies - the MTU on both sides connecting to the L2 connection are assumed to be consistent.  Extensions to ACP where the ACP is for example tunneled need to consider how to guarantee MTU consistency.  This is an issue of tunnels, not an issue of running the ACP across a tunnel.  Transport stacks running across ACP can perform normal PMTUD (Path MTU Discovery).  Because the ACP is meant to be prioritize reliability over performance, they MAY opt to only expect IPv6 minimum MTU (1280) to avoid running into PMTUD implementation bugs or underlying link MTU mismatch problems.</t>
        </section>
        <section anchor="general_multipath" numbered="true" toc="default">
          <name>Multiple links between nodes</name>
          <t>If two nodes are connected via several links, the ACP SHOULD be established across every link, but it is possible to establish the ACP only on a sub-set of links.  Having an ACP channel on every link has a number of advantages, for example it allows for a faster failover in case of link failure, and it reflects the physical topology more closely.  Using a subset of links (for example, a single link), reduces resource consumption on the node, because state needs to be kept per ACP channel.  The negotiation scheme explained in <xref target="channel-selection" format="default"/> allows the Decider (the node with the higher ACP address) to drop all but the desired ACP channels to the Follower - and the Follower will not re-try to build these secure channels from its side unless the Decider shows up with a previously unknown GRASP announcement (e.g., on a different link or with a different address announced in GRASP).</t>
        </section>
        <!-- multiple_interfaces -->
        <section anchor="ACP_interfaces" numbered="true" toc="default">
          <name>ACP interfaces</name>
          <t>The ACP VRF has conceptually two type of interfaces: The "ACP Loopback 
        interface(s)" to which the ACP ULA address(es) are assigned and the
         "ACP virtual interfaces" that are mapped to the ACP secure channels.</t>
          <section anchor="ACP-loopback" numbered="true" toc="default">
            <name>ACP loopback interfaces</name>
            <t>For autonomous operations of the ACP, as described in <xref target="self-creation" format="default"/>
        and <xref target="acp-l2-switches" format="default"/>, the ACP node uses the first address from
        the N bit ACP prefix (N = 128 - number of Vbits of the ACP address) assigned to the node.
        This address is assigned with an adddress prefix of N or larger to a loopback interface.</t>
            <t>Other addresses from the prefix can be used by the ACP of the node as desired. 
        The autonomous operations of the ACP does not require additional global scope
         IPv6 addresses, they are instead intended for ASA or non-autonomous functions.
        Non fully autonomic components of the ACP such as ACP connect interfaces
        (see <xref target="acp-connect" format="default"/> may also introduce additional
        global scope IPv6 addresses on other type of interfaces into the ACP.</t>
            <t>[RFC Editor: please remove this paragraph: Note to reviewers:
        Please do not complain again about an obsolete RFC number in the following paragraph. The text should
        make it clear that the reference was choosen to indicate a particular point in time,
        but not to recommend/use a particularily obsolete protocol spec.]</t>
            <t>The use of loopback interfaces for global scope addresses is 
        common operational configuration practice on routers, for example in IBGP
        connections since BGP4 (see <xref target="RFC1654" format="default"/>) or earlier.
        The ACP adopts and automates this operational practice.</t>
            <t>A loopback interface for use with the ACP as described above is an interface
        behaving according to <xref target="RFC6724" format="default"/> Section 4., paragraph 2:
        Packets sent by the host of the node from the loopback interface 
        behave as if they are looped back by the interface so that
        they look as if they originated from the loopback interface, are 
        then received by the node and forwarded by it towards the destination.</t>
            <t>The word loopback only indicates this behavior, but not the actual name of the
        interface type choosen in an actual implementation.
        A loopback interface for use with the ACP can be a virtual/software
        construct without any associated hardware, or it can be a hardware interface
        operating in loopback mode.</t>
            <t>A loopback interface used for the ACP MUST NOT have connectivity to other
        nodes.</t>
            <t>The following reviews the reasons for the choice of loopback addresses
        for ACP addresses is based on the IPv6 address architecture and common challenges:
        </t>
            <ol type="1" spacing="compact">
              <li>IPv6 addresses are assigned to interfaces, not nodes. IPv6 continues
          the IPv4 model that a subnet prefix is associated with one link,
          see <xref target="RFC4291" format="default"/>, Section 2.1.</li>
              <li>IPv6 implementations commonly do not allow assignment of the same
              IPv6 global scope address in the same VRF to more
          than one interface.</li>
              <li>Global scope addresses assigned to interfaces that are connecting to other
          nodes (external interfaces) may not be stable addresses for communications
          because any such interface could fail due to reasons external to the node.
          This could render the addresses assigned to that interface unusable.</li>
              <li>If failure of the subnet does not result in bringing down the interface and making
          the addresses unusable, it could result in unreachability of the
          address because the shortest path to the node might go through one of the
          other nodes on the same subnet which could equally consider the subnet to
          be operational even though it is not.</li>
              <li>Many OAM service implementations on routers can not deal with more than one peer address,
          often because they do already expect that a single loopback address can be used,
          especially to provide a stable address under failure of external interfaces or links.</li>
              <li>Even when an application supports multiple addresses to a peer, it
          can only use one adddress for a connection at a time with the most widely deployed 
          transport protocols TCP and UDP. While <xref target="RFC6824" format="default"/> solves this problem,
          it is not widely adopted for router OAM services implementations.</li>
              <li>To completely autonomously assign global scope addresses to subnets
          connecting to other nodes, it would be necessary for every node to have 
          an amount of prefix address space in the order of the maximum number of
          subnets that the node could connect to and then the node would have to negotiate
          with adjacent nodes across those subnet whose address space to use for each subnet.</li>
              <li>Using global scope addresses for subnets between nodes is 
          unnecessary if those subnets only connect routers, such as ACP secure channels,
          because they can communicate to remote nodes via their global scope loopback addresses.
          Using global scope addresses for those extern subnets is therefore wasteful
          for the address space and also unnecessarily increasing the size of routing
          and forwarding tables, which especially for the ACP is highly undesirable because
          it should attempt to minimize the per-node overhead of the ACP VRF.</li>
              <li>For all these reasons, the ACP addressing schemes do not consider
          ACP addresses for subnets connecting ACP nodes.</li>
            </ol>
            <t>Note that <xref target="RFC8402" format="default"/> introduces the term Node-SID to refer
        to IGP prefix segments that identify a specific rouer, for example on a loopback interface.
        An ACP loopback address prefix may similarily be called an ACP Node Identifier.</t>
          </section>
          <section anchor="ACP-virtual-interfaces" numbered="true" toc="default">
            <name>ACP virtual interfaces</name>
            <t>Any ACP secure channel to another ACP node is
        mapped to ACP virtual interfaces in one of the following ways.
        This is independent of the chosen secure channel protocol (IPsec, DTLS
        or other future protocol - standards or non-standards).</t>
            <t>Note that all the considerations described here are assuming point-to-point
        secure channel associations. Mapping multi-party secure channel associations such as
        <xref target="RFC6407" format="default"/> is out of scope.</t>
            <section anchor="ACP-p2p-virtual-interfaces" numbered="true" toc="default">
              <name>ACP point-to-point virtual interfaces</name>
              <t>In this option, each ACP secure channel is
        mapped into a separate point-to-point ACP virtual interface.  If a
        physical subnet has more than two ACP capable nodes (in the same domain),
        this implementation approach will lead to a full mesh of ACP virtual 
        interfaces between them.</t>
              <t>When the secure channel protocol determines a peer to be dead, this SHOULD
        result in indicating link breakage to trigger RPL DODAG repair, see
        <xref target="rpl-dodag-repair" format="default"/>.</t>
            </section>
            <section anchor="ACP-ma-virtual-interfaces" numbered="true" toc="default">
              <name>ACP multi-access virtual interfaces</name>
              <t>In a more advanced implementation approach,
        the ACP will construct a single multi-access ACP virtual interface for
        all ACP secure channels to ACP capable nodes reachable across the same
        underlying (physical) subnet.  IPv6 link-local multicast packets
        sent into an ACP multi-access virtual interface are replicated to
        every ACP secure channel mapped into the ACP multicast-access virtual
        interface.  IPv6 unicast packets sent into an ACP multi-access virtual
        interface are sent to the ACP secure channel that belongs to the
        ACP neighbor that is the next-hop in the ACP forwarding table entry
        used to reach the packets destination address.</t>
              <t>When the secure channel protocol determines a peer to be dead for a
        secure channel mapped into an ACP multi-access virtual interface,
        this SHOULD result in signaling breakage of that peer to RPL, so it can trigger
        RPL DODAG repair, see <xref target="rpl-dodag-repair" format="default"/>.</t>
              <t>There is no requirement for
        all ACP nodes on the same multi-access subnet to use the same
        type of ACP virtual interface.  This is purely a node local
        decision.</t>
              <t>ACP nodes MUST perform standard IPv6 operations across ACP
        virtual interfaces including SLAAC (Stateless Address Auto-Configuration)
        - <xref target="RFC4862" format="default"/>) to assign their IPv6 link local address on the ACP
        virtual interface and ND (Neighbor Discovery - <xref target="RFC4861" format="default"/>)
        to discover which IPv6 link-local neighbor address belongs to 
        which ACP secure channel mapped to the ACP virtual interface.
        This is independent of whether the ACP virtual interface is point-to-point or multi-access.</t>
              <t>"Optimistic Duplicate Address Detection (DAD)" according to 
        <xref target="RFC4429" format="default"/> is RECOMMENDED because the likelihood for
        duplicates between ACP nodes is highly improbable as long as 
        the address can be formed from a globally unique local assigned identifier
        (e.g., EUI-48/EUI-64, see below).</t>
              <t>ACP nodes MAY reduce the amount of link-local IPv6 multicast
        packets from ND by learning the IPv6 link-local neighbor address
        to ACP secure channel mapping from other messages such as the source
        address of IPv6 link-local multicast RPL messages - and therefore
        forego the need to send Neighbor Solicitation messages.</t>
              <t>The ACP virtual interface IPv6 link local address can be derived from
        any appropriate local mechanism such as node local EUI-48 or EUI-64 
        ("EUI" stands for "Extended Unique Identifier").
        It MUST NOT depend on something that is attackable from the Data-Plane such
        as the IPv6 link-local address of the underlying physical interface, which
        can be attacked by SLAAC, or parameters of the secure channel encapsulation header
        that may not be protected by the secure channel mechanism.</t>
              <t>The link-layer address of an ACP virtual interface is the
        address used for the underlying interface across which the secure
        tunnels are built, typically Ethernet addresses.  Because unicast IPv6
        packets sent to an ACP virtual interface are not sent to a link-layer
        destination address but rather an ACP secure channel,
        the link-layer address fields SHOULD be ignored on reception and
        instead the ACP secure channel from which the message was
        received should be remembered.</t>
              <t>Multi-access ACP virtual interfaces are preferable implementations
        when the underlying interface is a (broadcast) multi-access subnet because they do
        reflect the presence of the underlying multi-access subnet into the virtual
        interfaces of the ACP.  This makes it for example simpler to build services
        with topology awareness inside the ACP VRF in the same way as they could 
        have been built running natively on the multi-access interfaces.</t>
              <t>Consider also the impact of point-to-point vs. multi-access virtual interface
        on the efficiency of flooding via link local multicasted messages:</t>
              <t>Assume a LAN with three ACP neighbors, Alice, Bob and Carol.
        Alice's ACP GRASP wants to send a link-local GRASP multicast message to
        Bob and Carol.  If Alice's ACP emulates the LAN as per-peer, point-to-point
        virtual interfaces, one to Bob and one to Carol, Alice's ACP GRASP will
        send two copies of multicast GRASP messages: One to Bob and one to Carol.
        If Alice's ACP emulates a LAN via a multipoint virtual interface, Alice's ACP GRASP will send one packet
        to that interface and the ACP multipoint virtual interface will replicate the packet to each secure channel,
        one to Bob, one to Carol.  The result is the same.  The difference 
        happens when Bob and Carol receive their packet.  If they use ACP point-to-point
        virtual interfaces, their GRASP instance would forward the packet
        from Alice to each other as part of the GRASP flooding procedure.
        These packets are unnecessary and would be discarded by GRASP
        on receipt as duplicates (by use of the GRASP Session ID).
        If Bob and Carol's ACP would emulate a multi-access
        virtual interface, then this would not happen, because GRASPs flooding procedure
        does not replicate back packets to the interface that they were received from.</t>
              <t>Note that link-local GRASP multicast messages are not sent
        directly as IPv6 link-local multicast UDP messages into ACP virtual interfaces,
        but instead into ACP GRASP virtual interfaces, that are layered on top of
        ACP virtual interfaces to add TCP reliability to link-local multicast
        GRASP messages.  Nevertheless, these ACP GRASP virtual interfaces perform the
        same replication of message and, therefore, result in the same impact on flooding.
        See <xref target="GRASP-substrate" format="default"/> for more details.</t>
              <t>RPL does support operations and correct routing table construction
        across non-broadcast multi-access (NBMA) subnets.  This is common when using many
        radio technologies.  When such NBMA subnets are used, they MUST NOT be
        represented as ACP multi-access virtual interfaces because the replication
        of IPv6 link-local multicast messages will not reach all
        NBMA subnet neighbors.  In result, GRASP message flooding would fail.
        Instead, each ACP secure channel across such an interface MUST be
        represented as a ACP point-to-point virtual interface. See also <xref target="future-rpl" format="default"/>.</t>
              <t>Care needs to be taken when creating multi-access ACP virtual
        interfaces across ACP secure channels between ACP nodes in different domains
        or routing subdomains. If for example future inter-domain ACP policies
        are defined as "peer-to-peer" policies, it is easier to create ACP point-to-point
        virtual interfaces for these inter-domain secure channels.</t>
            </section>
          </section>
        </section>
        <!-- acp_interfaces -->
      </section>
      <!-- acp_general -->
    </section>
    <!-- self-creation -->
    <section anchor="acp-l2-switches" numbered="true" toc="default">
      <name>ACP support on L2 switches/ports (Normative)</name>
      <section anchor="acp-l2-switches-why" numbered="true" toc="default">
        <name>Why (Benefits of ACP on L2 switches)</name>
        <figure anchor="acp-example">
          <name>Topology with L2 ACP switches</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[

    ANrtr1 ------ ANswitch1 --- ANswitch2 ------- ANrtr2
              .../   \                   \  ...
    ANrtrM ------     \                   ------- ANrtrN
                       ANswitchM ...
        ]]></artwork>
        </figure>
        <t>Consider a large L2 LAN with ANrtr1...ANrtrN connected via some topology of L2 switches.
Examples include large enterprise campus networks with an L2 core, IoT networks or broadband
aggregation networks which often have even a multi-level L2 switched topology.</t>
        <t>If the discovery protocol used for the ACP is operating at the subnet level, every ACP router
will see all other ACP routers on the LAN as neighbors and a full mesh of ACP channels will be built.
If some or all of the AN switches are autonomic with the same discovery protocol, then the
full mesh would include those switches as well.</t>
        <t>A full mesh of ACP connections can create fundamental scale challenges.  The number of
security associations of the secure channel protocols will likely not scale arbitrarily,
especially when they leverage platform accelerated encryption/decryption.  Likewise, any
other ACP operations (such as routing) needs to scale to the number of direct ACP neighbors.  An
ACP router with just 4 physical interfaces might be deployed into a LAN with hundreds of neighbors connected
via switches.  Introducing such a new unpredictable scaling factor requirement makes it harder
to support the ACP on arbitrary platforms and in arbitrary deployments.</t>
        <t>Predictable scaling requirements for ACP neighbors can most easily be achieved if in
topologies such as these, ACP capable L2 switches can ensure that discovery messages terminate
on them so that neighboring ACP routers and switches will only find the physically connected
ACP L2 switches as their candidate ACP neighbors.  With such a discovery mechanism in place, the
ACP and its security associations will only need to scale to the number of physical interfaces
instead of a potentially much larger number of "LAN-connected" neighbors.  And the ACP topology
will follow directly the physical topology, something which can then also be leveraged
in management operations or by ASAs.</t>
        <t>In the example above, consider ANswitch1 and ANswitchM are ACP capable, and ANswitch2
is not ACP capable.  The desired ACP topology is that ANrtr1 and ANrtrM only have an
ACP connection to ANswitch1, and that ANswitch1, ANrtr2, ANrtrN have a full mesh of ACP
connection amongst each other.  ANswitch1 also has an ACP connection with ANswitchM and
ANswitchM has ACP connections to anything else behind it.</t>
      </section>
      <!-- switched-lans-why -->
      <section anchor="acp-l2-switches-how" numbered="true" toc="default">
        <name>How (per L2 port DULL GRASP)</name>
        <t>To support ACP on L2 switches or L2 switched ports of an L3 device, it is necessary to
make those L2 ports look like L3 interfaces for the ACP implementation.  This primarily involves
the creation of a separate DULL GRASP instance/domain on every such L2 port.  Because GRASP
has a dedicated link-local IPv6 multicast address (ALL_GRASP_NEIGHBORS), it is sufficient that all packets
for this address are being extracted at the port level and passed to that DULL GRASP instance.
Likewise the IPv6 link-local multicast packets sent by that DULL GRASP instance need to be
sent only towards the L2 port for this DULL GRASP instance (instead of being flooded across
all ports of the VLAN to which the port belongs).</t>
        <t>When Ports/Interfaces across which the ACP is expected to operate in an ACP-aware L2-switch or L2/L3-switch/router are L2-bridged, packets for the ALL_GRASP_NEIGHBORS multicast address MUST never be forward between these ports. If MLD snooping is used, it MUST be prohibited from bridging packets for the ALL_GRASP_NEIGHBORS IPv6 multicast address.</t>
        <t>On hybrid L2/L3 switches, multiple L2 ports are assigned to a single L3
VLAN interface. With the aforementioned changes for DULL GRASP, ACP can
simply operate on the L3 VLAN interfaces, so no further (hardware) forwarding
changes are required to make ACP operate on L2 ports. This is possible because
the ACP secure channel protocols only use link-local IPv6 unicast packets,
and these packets will be sent to the correct L2 port towards the
peer by the VLAN logic of the device.</t>
        <t>This is sufficient when p2p ACP virtual interfaces are established to
every ACP peer. When it is desired to create multi-access ACP virtual interfaces
(see <xref target="ACP-ma-virtual-interfaces" format="default"/>), it is REQIURED not to coalesce all
 the ACP secure channels on the same L3 VLAN interface, but only all those on the same L2 port.</t>
        <t>If VLAN tagging is used, then all the above described logic only applies to
untagged GRASP packets. For the purpose of ACP neighbor discovery via GRASP,
no VLAN tagged packets SHOULD be sent or received. In a hybrid L2/L3
switch, each VLAN would therefore only create ACP adjacencies across those
ports where the VLAN is carried untagged.</t>
        <t>In result, the simple logic is that ACP secure channels would operate 
over the same L3 interfaces that present a single flat bridged network
across all routers, but because DULL GRASP is separated on a per-port basis,
no full mesh of ACP secure channels is created, but only per-port ACP
secure channels to per-port L2-adjacent ACP node neighbors.</t>
        <t>For example, in the above picture, ANswitch1 would run separate DULL GRASP instances on its ports
to ANrtr1, ANswitch2 and ANswitchI, even though all those three ports may be in the data
plane in the same (V)LAN and perform L2 switching between these ports, ANswitch1 would perform
ACP L3 routing between them.</t>
        <t>The description in the previous paragraph was specifically meant to illustrate that on hybrid
L3/L2 devices that are common in enterprise, IoT and broadband aggregation, there is only
the GRASP packet extraction (by Ethernet address) and GRASP link-local multicast per
L2-port packet injection that has to consider L2 ports at the hardware forwarding level.
The remaining operations are purely ACP control plane and setup of secure channels across the
L3 interface.  This hopefully makes support for per-L2 port ACP on those hybrid devices easy.</t>
        <t>In devices without such a mix of L2 port/interfaces and L3 interfaces (to terminate any
transport layer connections), implementation details will differ.  Logically most simply every
L2 port is considered and used as a separate L3 subnet for all ACP operations.  The fact that
the ACP only requires IPv6 link-local unicast and multicast should make support for it on any
type of L2 devices as simple as possible.</t>
        <t>A generic issue with ACP in L2 switched networks is the interaction with the Spanning Tree
Protocol.  Without further L2 enhancements, the ACP would run only across the active STP
topology and the ACP would be interrupted and re-converge with STP changes.
Ideally, ACP peering SHOULD be built also across ports that are blocked in STP so
that the ACP does not depend on STP and can continue to run unaffected across STP topology
changes, where re-convergence can be quite slow.  The above described simple implementation
options are not sufficient to achieve this.</t>
      </section>
      <!-- switched-lans-how -->
    </section>
    <!-- switched-lans -->
    <section anchor="workarounds" numbered="true" toc="default">
      <name>Support for Non-ACP Components (Normative)</name>
      <section anchor="ACPconnect" numbered="true" toc="default">
        <name>ACP Connect</name>
        <section anchor="NMS" numbered="true" toc="default">
          <name>Non-ACP Controller / NMS system</name>
          <t>The Autonomic Control Plane can be used by management systems, such as controllers or network management system (NMS) hosts (henceforth called simply "NMS hosts"), to connect to devices (or other type of nodes) through it.  For this, an NMS host needs to have access to the ACP.  The ACP is a self-protecting overlay network, which allows by default access only to trusted, autonomic systems.  Therefore, a traditional, non-ACP NMS system does not have access to the ACP by default, such as any other external node.</t>
          <t>If the NMS host is not autonomic, i.e., it does not support autonomic negotiation of the ACP, then it can be brought into the ACP by explicit configuration.  To support connections to adjacent non-ACP nodes, an ACP node SHOULD support "ACP connect" (sometimes also called "autonomic connect"):</t>
          <t>"ACP connect" is an interface level configured workaround for connection of trusted non-ACP nodes to the ACP. The ACP node on which ACP connect is configured is called an "ACP edge node". With ACP connect, the ACP is accessible from those non-ACP nodes (such as NOC systems) on such an interface without those non-ACP nodes having to support any ACP discovery or ACP channel setup.  This is also called "native" access to the ACP because to those NOC systems the interface looks like a normal network interface without any ACP secure channel that is encapsulating the traffic.</t>
          <figure anchor="acp-connect">
            <name>ACP connect</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[

                                 Data-Plane "native" (no ACP)
                                          .
+--------+       +----------------+       .        +-------------+
| ACP    |       |ACP Edge Node   |       .        |             |
| Node   |       |                |       v        |             |
|        |-------|...[ACP VRF]....+----------------|             |+
|        |   ^   |.               |                | NOC Device  ||
|        |   .   | .[Data-Plane]..+----------------| "NMS hosts" ||
|        |   .   |  [          ]  | .         ^    |             ||
+--------+   .   +----------------+  .        .    +-------------+|
             .                        .       .     +-------------+
             .                        .       .
          Data-Plane "native"         .   ACP "native" (unencrypted)
        + ACP auto-negotiated         .   "ACP connect subnet"
          and encrypted               .
                                    ACP connect interface
                                    e.g., "VRF ACP native" (config)

                                ]]></artwork>
          </figure>
          <t>ACP connect has security consequences: All systems and processes connected via ACP connect have access to all ACP nodes on the entire ACP, without further authentication.  Thus, the ACP connect interface and NOC systems connected to it needs to be physically controlled/secured.  For this reason the mechanisms described here do explicitly not include options to allow for a non-ACP router to be connected across an ACP connect interface and addresses behind such a router routed inside the ACP.</t>
          <t>Physical controlled/secured means that attackers can gain no access to the physical device hosting the ACP Edge Node, the physical interfaces and links providing the ACP connect link nor the physical devices hosting the NOC Device. In a simple case, ACP Edge node and NOC Device are co-located in an access controlled room, such as a NOC, to which attackers can not gain physical access.</t>
          <t>An ACP connect interface provides exclusively access to only the ACP.  This is likely insufficient for many NMS hosts.  Instead, they would require a second "Data-Plane" interface outside the ACP for connections between the NMS host and administrators, or Internet based services, or for direct access to the Data-Plane.  The document <xref target="RFC8368" format="default">"Using Autonomic Control Plane for Stable Connectivity of Network OAM"</xref> explains in more detail how the ACP can be integrated in a mixed NOC environment.</t>
          <t>An ACP connect interface SHOULD use an IPv6 address/prefix
from the ACP Manual Addressing Sub-Scheme (<xref target="manual-scheme" format="default"/>), letting the operator configure for example only the Subnet-ID and having the node automatically assign the remaining part of the prefix/address.  It SHOULD NOT use a prefix that is also routed outside the ACP so that the addresses clearly indicate whether it is used inside the ACP or not.</t>
          <t>The prefix of ACP connect subnets MUST be distributed by the ACP edge node into the ACP routing protocol RPL.  The NMS hosts MUST connect to prefixes in the ACP routing table via its ACP connect interface.  In the simple case where the ACP uses only one ULA prefix and all ACP connect subnets have prefixes covered by that ULA prefix, NMS hosts can rely on <xref target="RFC6724" format="default"/> to determine longest match prefix routes towards its different interfaces, ACP and Data-Plane. With RFC6724, The NMS host will select the ACP connect interface for all addresses in the ACP because any ACP destination address is longest matched by the address on the ACP connect interface.  If the NMS hosts ACP connect interface uses another prefix or if the ACP uses multiple ULA prefixes, then the NMS hosts require (static) routes towards the ACP interface for these prefixes.</t>
          <t> When an ACP Edge node receives a packet from an ACP connect interface, the ACP Edge node
MUST only forward the packet into the ACP if the packet has an IPv6 source address from that interface (this is sometimes called "RPF filtering").  This filtering rule MAY be changed through administrative measures. The more any such administrative action enable reachability of non ACP nodes to the ACP, the more this may cause security issues.</t>
          <t>To limit the security impact of ACP connect, nodes supporting it SHOULD implement a security
mechanism to allow configuration/use of ACP connect interfaces only on nodes explicitly targeted
to be deployed with it (those in physically secure locations such as a NOC).  For example,
the registrar could disable the ability to enable ACP connect on devices during enrollment
and that property could only be changed through re-enrollment.  See also <xref target="role-assignments" format="default"/>.</t>
          <t>ACP Edge nodes SHOULD have a configurable option to prohibit packets with RPI headers (see <xref target="rpl-Data-Plane" format="default"/> across an ACP connect interface. These headers are outside the scope of the RPL profile in this specification but may be used in future extensions of this specification.</t>
        </section>
        <!-- NMS -->
        <section anchor="software" numbered="true" toc="default">
          <name>Software Components</name>
          <t>The previous section assumed that ACP Edge node and NOC devices are separate physical devices and the ACP connect interface is a physical network connection. This section discusses the implication when these components are instead software components running on a single physical device.</t>
          <t>The ACP connect mechanism can not only be used to connect physically external systems (NMS hosts) to the ACP but also other applications, containers or virtual machines.  In fact, one possible way to eliminate the security issue of the external ACP connect interface is to collocate an ACP edge node and an NMS host by making one a virtual machine or container inside the other; and therefore converting the unprotected external ACP subnet into an internal virtual subnet in a single device.  This would ultimately result in a fully ACP enabled NMS host with minimum impact to the NMS hosts software architecture.  This approach is not limited to NMS hosts but could equally be applied to devices consisting of one or more VNF (virtual network functions): An internal virtual subnet connecting out-of-band management interfaces of the VNFs to an ACP edge router VNF.</t>
          <t>The core requirement is that the software components need to have a network stack that permits access to the ACP and optionally also the Data-Plane.  Like in the physical setup for NMS hosts this can be realized via two internal virtual subnets.  One that is connecting to the ACP (which could be a container or virtual machine by itself), and one (or more) connecting into the Data-Plane.</t>
          <t>This "internal" use of ACP connect approach should not considered to be a "workaround" because in this case it is possible to build a correct security model: It is not necessary to rely on unprovable external physical security mechanisms as in the case of external NMS hosts.  Instead, the orchestration of the ACP, the virtual subnets and the software components can be done by trusted software that could be considered to be part of the ANI (or even an extended ACP).  This software component is responsible for ensuring that only trusted software components will get access to that virtual subnet and that only even more trusted software components will get access to both the ACP virtual subnet and the Data-Plane (because those ACP users could leak traffic between ACP and Data-Plane).  This trust could be established for example through cryptographic means such as signed software packages.</t>
        </section>
        <!-- software -->
        <section anchor="ACautoconfig" numbered="true" toc="default">
          <name>Auto Configuration</name>
          <t>ACP edge nodes, NMS hosts and software components that as described in the previous section are meant to be composed via virtual interfaces SHOULD support on the ACP connect subnet StateLess Address Autoconfiguration (SLAAC - <xref target="RFC4862" format="default"/>) and route auto configuration according to <xref target="RFC4191" format="default"/>.</t>
          <t>The ACP edge node acts as the router on the ACP connect subnet, providing the (auto-)configured prefix for the ACP connect subnet to NMS hosts and/or software components.  The ACP edge node uses route prefix option of RFC4191 to announce the default route (::/) with a lifetime of 0 and aggregated prefixes for routes in the ACP routing table with normal lifetimes.  This will ensure that the ACP edge node does not become a default router, but that the NMS hosts and software components will route the prefixes used in the ACP to the ACP edge node.</t>
          <t>Aggregated prefix means that the ACP edge node needs to only announce the /48 ULA prefixes used in the ACP but none of the actual /64 (Manual Addressing Sub-Scheme), /127 (ACP Zone Addressing Sub-Scheme), /112 or /120 (Vlong Addressing Sub-Scheme) routes of actual ACP nodes.  If ACP interfaces are configured with non ULA prefixes, then those prefixes cannot be aggregated without further configured policy on the ACP edge node.  This explains the above recommendation to use ACP ULA prefix covered prefixes for ACP connect interfaces: They allow for a shorter list of prefixes to be signaled via RFC4191 to NMS hosts and software components.</t>
          <t>The ACP edge nodes that have a Vlong ACP address MAY allocate a subset of their /112 or /120 address prefix to ACP connect interface(s) to eliminate the need to non-autonomically configure/provision the address prefixes for such ACP connect interfaces.</t>
          <!--  See <xref target="up4291"/> for considerations how this updates the IPv6 address architecture and ULA specification.</t> -->
        </section>
        <!-- ACautoconfig -->
        <section anchor="SingleIF" numbered="true" toc="default">
          <name>Combined ACP/Data-Plane Interface (VRF Select)</name>
          <figure anchor="vrf-select">
            <name>VRF select</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[

                     Combined ACP and Data-Plane interface
                                             .
  +--------+       +--------------------+    .   +--------------+
  | ACP    |       |ACP Edge No         |    .   | NMS Host(s)  |
  | Node   |       |                    |    .   | / Software   |
  |        |       |  [ACP  ].          |    .   |              |+
  |        |       | .[VRF  ] .[VRF   ] |    v   | "ACP address"||
  |        +-------+.         .[Select].+--------+ "Date Plane  ||
  |        |   ^   | .[Data ].          |        |  Address(es)"||
  |        |   .   |  [Plane]           |        |              ||
  |        |   .   |  [     ]           |        +--------------+|
  +--------+   .   +--------------------+         +--------------+
               .
        Data-Plane "native" and + ACP auto-negotiated/encrypted

                                ]]></artwork>
          </figure>
          <t>Using two physical and/or virtual subnets (and therefore interfaces) into NMS Hosts (as per <xref target="NMS" format="default"/>) or Software (as per <xref target="software" format="default"/>) may be seen as additional complexity, for example with legacy NMS Hosts that support only one IP interface.</t>
          <t>To provide a single subnet into both ACP and Data-Plane, the ACP Edge node needs to de-multiplex packets from NMS hosts into ACP VRF and Data-Plane.  This is sometimes called "VRF select".  If the ACP VRF has no overlapping IPv6 addresses with the Data-Plane (it should have no overlapping addresses), then this function can use the IPv6 Destination address.  The problem is Source Address Selection on the NMS Host(s) according to RFC6724.</t>
          <t>Consider the simple case: The ACP uses only one ULA prefix, the ACP IPv6 prefix for the Combined ACP and Data-Plane interface is covered by that ULA prefix.  The ACP edge node announces both the ACP IPv6 prefix and one (or more) prefixes for the Data-Plane.  Without further policy configurations on the NMS Host(s), it may select its ACP address as a source address for Data-Plane ULA destinations because of Rule 8 of RFC6724.  The ACP edge node can pass on the packet to the Data-Plane, but the ACP source address should not be used for Data-Plane traffic, and return traffic may fail.</t>
          <t>If the ACP carries multiple ULA prefixes or non-ULA ACP connect prefixes, then the correct source address selection becomes even more problematic.</t>
          <t>With separate ACP connect and Data-Plane subnets and RFC4191 prefix announcements that are to be routed across the ACP connect interface, RFC6724 source address selection Rule 5 (use address of outgoing interface) will be used, so that above problems do not occur, even in more complex cases of multiple ULA and non-ULA prefixes in the ACP routing table.</t>
          <t>To achieve the same behavior with a Combined ACP and Data-Plane interface, the ACP Edge Node needs to behave as two separate routers on the interface: One link-local IPv6 address/router for its ACP reachability, and one link-local IPv6 address/router for its Data-Plane reachability.  The Router Advertisements for both are as described above (<xref target="ACautoconfig" format="default"/>): For the ACP, the ACP prefix is announced together with RFC4191 option for the prefixes routed across the ACP and lifetime=0 to disqualify this next-hop as a default router.  For the Data-Plane, the Data-Plane prefix(es) are announced together with whatever dafault router parameters are used for the Data-Plane.</t>
          <t>In result, RFC6724 source address selection Rule 5.5 may result in the same correct source address selection behavior of NMS hosts without further configuration on it as the separate ACP connect and Data-Plane interfaces.  As described in the text for Rule 5.5, this is only a MAY, because IPv6 hosts are not required to track next-hop information.  If an NMS Host does not do this, then separate ACP connect and Data-Plane interfaces are the preferable method of attachment.  Hosts implementing <xref target="RFC8028" format="default"/> should (instead of may) implement <xref target="RFC6724" format="default"/> Rule 5.5, so it is preferred for hosts to support <xref target="RFC8028" format="default"/>.</t>
          <t>ACP edge nodes MAY support the Combined ACP and Data-Plane interface.</t>
        </section>
        <!-- SingleIF -->
        <section anchor="ACgrasp" numbered="true" toc="default">
          <name>Use of GRASP</name>
          <t>GRASP can and should be possible to use across ACP connect interfaces, especially in
the architectural correct solution when it is used as a mechanism to connect Software
(e.g., ASA or legacy NMS applications) to the ACP.</t>
          <t>Given how the ACP is the security and transport substrate for GRASP, the requirements
for devices connected via ACP connect is that those are equivalently (if not better)
secured against attacks than ACP nodes that do not use ACP connect and run only
software that is equally (if not better) protected, known (or trusted) not to be malicious
and accordingly designed to isolate access to the ACP against external equipment.</t>
          <t>The difference in security is that cryptographic security of the
ACP secure channel is replaced by required physical security/control of the network connection
between an ACP edge node and the NMS or other host reachable via the ACP connect
interface. See <xref target="NMS" format="default"/>.</t>
          <t>When using "Combined ACP and Data-Plane Interfaces", care hasa to be taken that
only GRASP messages intended for the ACP GRASP domain received from Software or
NMS Hosts are forwarded by ACP edge nodes.  Currently there is no definition for
a GRASP security and transport substrate beside the ACP, so there is no definition
how such Software/NMS Host could participate in two separate GRASP Domains across
the same subnet (ACP and Data-Plane domains).  At current it is assumed that
all GRASP packets on a Combined ACP and Data-Plane interface belong to the GRASP ACP Domain.
They SHOULD all use the ACP IPv6 addresses of the Software/NMS Hosts.  The link-local
IPv6 addresses of Software/NMS Hosts (used for GRASP M_DISCOVERY and M_FLOOD messages)
are also assumed to belong to the ACP address space.</t>
        </section>
        <!-- ACgrasp -->
      </section>
      <!-- ACP connect -->
      <section anchor="remote-acp-neighbors" numbered="true" toc="default">
        <name>Connecting ACP islands over Non-ACP L3 networks (Remote ACP neighbors)</name>
        <t>Not all nodes in a network may support the ACP.  If non-ACP Layer-2 devices are between ACP nodes, the ACP will work across it since it is IP based.  However, the autonomic discovery of ACP neighbors via DULL GRASP is only intended to work across L2 connections, so it is not sufficient to autonomically create ACP connections across non-ACP Layer-3 devices.</t>
        <section anchor="conf-remote" numbered="true" toc="default">
          <name>Configured Remote ACP neighbor</name>
          <t>On the ACP node, remote ACP neighbors are configured explicitly. 
    The parameters of such a "connection" are described in the following ABNF.</t>
          <figure anchor="abnf">
            <name>Parameters for remote ACP neighbors</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
  connection = [ method , local-addr, remote-addr, ?pmtu ]
  method =  [ "IKEv2" , ?port ]
  method =/ [ "DTLS",    port ]
  local-addr  = [ address , ?vrf  ]
  remote-addr = [ address ]
  address = ("any" | ipv4-address | ipv6-address )
  vrf = tstr ; Name of a VRF on this node with local-address
 ]]></artwork>
          </figure>
          <t>Explicit configuration of a remote-peer according to this
ABNF provides all the information to build a secure channel without requiring a tunnel
to that peer and running DULL GRASP inside of it.</t>
          <t>The configuration includes the parameters otherwise signaled
via DULL GRASP: local address, remote (peer) locator and
method. The differences over DULL GRASP local neighbor
discovery and secure channel creation are as follows:</t>
          <ul spacing="compact">
            <li>The local and remote address can be IPv4 or IPv6 and are typically global scope addresses.</li>
            <li>The VRF across which the connection is built (and in which local-addr exists) can to be specified.  If vrf is not specified, it is the default VRF on the node.  In DULL GRASP the VRF is implied by the interface across which DULL GRASP operates.</li>
            <li>If local address is "any", the local address used when initiating a secure channel connection is decided by source address selection (<xref target="RFC6724" format="default"/> for IPv6). As a responder, the connection listens on all addresses of the node in the selected VRF.</li>
            <li>Configuration of port is only required for methods where no defaults exist (e.g., "DTLS").</li>
            <li>If remote address is "any", the connection is only a responder. It is a "hub" that can be used by multiple remote peers to connect simultaneously - without having to know or configure their addresses. Example: Hub site for remote "spoke" sites reachable over the Internet.</li>
            <li>Pmtu should be configurable to overcome issues/limitations of Path MTU Discovery (PMTUD).</li>
            <li>IKEv2/IPsec to remote peers should support the optional NAT Traversal (NAT-T) procedures.</li>
          </ul>
        </section>
        <section anchor="conf-tunnel" numbered="true" toc="default">
          <name>Tunneled Remote ACP Neighbor</name>

          <t>An IPinIP, GRE or other form of pre-existing tunnel is configured
        between two remote ACP peers and the virtual interfaces representing
        the tunnel are configured for "ACP enable".  This will enable IPv6
        link local addresses and DULL on this tunnel.  In result,  the tunnel
        is used for normal "L2 adjacent" candidate ACP neighbor discovery
        with DULL and secure channel setup procedures described in this document.</t>

          <t>Tunneled Remote ACP Neighbor requires two encapsulations:
        the configured tunnel and the secure channel inside of that tunnel.
        This makes it in general less desirable than Configured Remote ACP Neighbor.
        Benefits of tunnels are that it may be easier to implement because
        there is no change to the ACP functionality - just running it over
        a virtual (tunnel) interface instead of only native interfaces.
        The tunnel itself may also provide PMTUD while the secure channel
        method may not.  Or the tunnel mechanism is permitted/possible through some
        firewall while the secure channel method may not.</t>

        <t>Tunneling using an insecure tunnel encapsulation increases on average
        the risk of a MITM downgrade attack somewhere along the underlay path
        that blocks all but the most easily attacked ACP secure channel option.
        ACP nodes supporting tunneled remote ACP Neighbors SHOULD support
        configuration on such tunnel interfaces to restrict or explicitly
        select the available ACP secure channel protocols 
        (if the ACP node supports more than one ACP secure channel protocol in the first place).</t>

        </section>
        <section anchor="conf-summary" numbered="true" toc="default">
          <name>Summary</name>
          <t>Configured/Tunneled Remote ACP neighbors are less "indestructible"
        than L2 adjacent ACP neighbors based on link local addressing, since
        they depend on more correct Data-Plane operations, such as routing and global addressing.</t>
          <t>Nevertheless, these options may be crucial to incrementally deploy
        the ACP, especially if it is meant to connect islands across the Internet.
        Implementations SHOULD support at least Tunneled Remote ACP Neighbors
        via GRE tunnels - which is likely the most common router-to-router
        tunneling protocol in use today.</t>
        </section>
      </section>
      <!-- remote-acp-neighbors-->
    </section>
    <!-- workarounds -->
    <section anchor="operational" numbered="true" toc="default">
      <name>ACP Operations (Informative)</name>
      <t>The following sections document important operational aspects of the ACP. They are not normative because they do not impact the interoperability between components of the ACP, but they include recommendations/requirements for the internal operational model beneficial or necessary to achieve the desired use-case benefits of the ACP (see <xref target="usage" format="default"/>).</t>
      <ul spacing="compact">
        <li><xref target="diagnostics" format="default"/> describes recommended operator diagnostics capabilities of ACP nodes.</li>
        <li><xref target="registrar-considerations" format="default"/> describes high level how an ACP registrar needs to work, what its configuration parameters are and specific issues impacting the choices of deployment design due to renewal and revocation issues. It describes a model where ACP Registrars have their own sub-CA to provide the most distributed deployment option for ACP Registrars, and it describes considerations for centralized policy control of ACP Registrar operations.</li>
        <li><xref target="enabling-acp" format="default"/> describes suggested ACP node behavior and operational interfaces (configuration options) to manage the ACP in so-called greenfield devices (previously unconfigured) and brownfield devices (preconfigured).</li>
      </ul>
      <t>The recommendations and suggestions of this chapter were derived from operational experience gained with a commercially available pre-standard ACP implementation.</t>
      <section anchor="diagnostics" numbered="true" toc="default">
        <name>ACP (and BRSKI) Diagnostics</name>
        <t>Even though ACP and ANI in general are taking out many manual configuration mistakes
through their automation, it is important to provide good diagnostics for them.</t>
        <t>Basic standardized diagnostics would require support for (yang) models representing the
complete (auto-)configuration and operational state of all components: GRASP,
ACP and the infrastructure used by them: TLS/DTLS, IPsec, certificates, TA, time, 
VRF and so on.  While necessary, this is not sufficient:</t>
        <t>Simply representing the state of components does not allow operators to quickly take
action - unless they do understand how to interpret the data, and that can mean a
requirement for deep understanding of all components and how they interact in the ACP/ANI.</t>
        <t>Diagnostic supports should help to quickly answer the questions operators
are expected to ask, such as "is the ACP working correctly?", or "why is there no
ACP connection to a known neighboring node?"</t>
        <t>In current network management approaches, the logic to answer these
questions is most often built as centralized diagnostics software that leverages
the above mentioned data models.  While this approach is feasible for components
utilizing the ANI, it is not sufficient to diagnose the ANI itself:</t>
        <ul spacing="compact">
          <li>Developing the logic to identify common issues requires operational experience
with the components of the ANI.  Letting each management system define its
own analysis is inefficient.</li>
          <li>When the ANI is not operating correctly, it may not be possible to run diagnostics
from remote because of missing connectivity.  The ANI should therefore have diagnostic
capabilities available locally on the nodes themselves.</li>
          <li>Certain operations are difficult or impossible to monitor in real-time, such as
initial bootstrap issues in a network location where no capabilities exist to attach
local diagnostics.  Therefore it is important to also define means of capturing (logging)
diagnostics locally for later retrieval.  Ideally, these captures are also non-volatile so
that they can survive extended power-off conditions - for example when a device
that fails to be brought up zero-touch is being sent back for diagnostics at a
more appropriate location.</li>
        </ul>
        <t>The most simple form of diagnostics answering questions such as the above
is to represent the relevant information sequentially in dependency order,
so that the first non-expected/non-operational item is the most likely root
cause.  Or just log/highlight that item.  For example:</t>
        <t>Q: Is ACP operational to accept neighbor connections:
</t>
        <ul spacing="compact">
          <li>Check if any potentially necessary configuration to make ACP/ANI operational are correct (see <xref target="enabling-acp" format="default"/> for a discussion of such commands).</li>
          <li>Does the system time look reasonable, or could it be the default system time after clock chip battery failure (certificate checks depend on reasonable notion of time).</li>
          <li>Does the node have keying material - domain certificate, TA certificates, ....</li>
          <li>If no keying material and ANI is supported/enabled,
   check the state of BRSKI (not detailed in this example).</li>
          <li>
            <t>Check the validity of the domain certificate:
    </t>
            <ul spacing="compact">
              <li>Does the certificate validate against the TA?</li>
              <li>Has it been revoked?</li>
              <li>Was the last scheduled attempt to retrieve a CRL successful (e.g., do we know that our CRL information is up to date).</li>
              <li>Is the certificate valid: validity start time in the past, expiration time in the future?</li>
              <li>Does the certificate have a correctly formatted acp-node-name field?</li>
            </ul>
          </li>
          <li>Was the ACP VRF successfully created?</li>
          <li>Is ACP enabled on one or more interfaces that are up and running?</li>
        </ul>
        <t>If all this looks good, the ACP should be running locally "fine" - but we did not check any ACP neighbor relationships.</t>
        <t>Question: why does the node not create a working ACP connection to a neighbor on an interface?
</t>
        <ul spacing="compact">
          <li>Is the interface physically up? Does it have an IPv6 link-local address?</li>
          <li>Is it enabled for ACP?</li>
          <li>Do we successfully send DULL GRASP messages to the interface (link layer errors)?</li>
          <li>Do we receive DULL GRASP messages on the interface? If not, some intervening L2 equipment performing bad MLD snooping could have caused problems.  Provide e.g., diagnostics of the MLD querier IPv6 and MAC address.</li>
          <li>Do we see the ACP objective in any DULL GRASP message from that interface? Diagnose the supported secure channel methods.</li>
          <li>Do we know the MAC address of the neighbor with the ACP objective? If not, diagnose SLAAC/ND state.</li>
          <li>When did we last attempt to build an ACP secure channel to the neighbor?</li>
          <li>
            <t>If it failed, why:
    </t>
            <ul spacing="compact">
              <li>Did the neighbor close the connection on us or did we close the connection on it because the domain certificate membership failed?</li>
              <li>If the neighbor closed the connection on us, provide any error diagnostics from the secure channel protocol.</li>
              <li>
                <t>If we failed the attempt, display our local reason:
        </t>
                <ul spacing="compact">
                  <li>There was no common secure channel protocol supported by the two neighbors (this could not happen on nodes supporting this specification because it mandates common support for IPsec).</li>
                  <li>
                    <t>The ACP certificate membership check (<xref target="certcheck" format="default"/>) fails:
            </t>
                    <ul spacing="compact">
                      <li>The neighbor's certificate is not signed directly or indirectly by one of the nodes TA.  Provide diagnostics which TA it has (can identify whom the device belongs to).</li>
                      <li>The neighbor's certificate does not have the same domain (or no domain at all).  Diagnose domain-name and potentially other cert info.</li>
                      <li>The neighbor's certificate has been revoked or could not be authenticated by OCSP. </li>
                      <li>The neighbor's certificate has expired - or is not yet valid.</li>
                    </ul>
                  </li>
                </ul>
              </li>
              <li>Any other connection issues in e.g., IKEv2 / IPsec, DTLS?.</li>
            </ul>
          </li>
        </ul>
        <t>Question: Is the ACP operating correctly across its secure channels?
</t>
        <ul spacing="compact">
          <li>Are there one or more active ACP neighbors with secure channels?</li>
          <li>Is the RPL routing protocol for the ACP running?</li>
          <li>Is there a default route to the root in the ACP routing table?</li>
          <li>Is there for each direct ACP neighbor not reachable over the ACP virtual interface to the root a route in the ACP routing table?</li>
          <li>Is ACP GRASP running?</li>
          <li>Is at least one SRV.est objective cached (to support certificate renewal)?</li>
          <li>Is there at least one BRSKI registrar objective cached (in case BRSKI is supported)</li>
          <li>Is BRSKI proxy operating normally on all interfaces where ACP is operating?</li>
          <li>...</li>
        </ul>
        <t>These lists are not necessarily complete, but illustrate the principle and show that there are variety of issues ranging from normal operational causes (a neighbor in another ACP domain) over problems in the credentials management (certificate lifetimes), explicit security actions (revocation) or unexpected connectivity issues (intervening L2 equipment).</t>
        <t>The items so far are illustrating how the ANI operations can
be diagnosed with passive observation of the operational state
of its components including historic/cached/counted events.  This is
not necessary sufficient to provide good enough diagnostics overall:</t>
        <t>The components of ACP and BRSKI are designed with security in mind
but they do not attempt to provide diagnostics for building the
network itself.  Consider two examples:
</t>
        <ol type="1" spacing="compact">
          <li>BRSKI does not allow for a neighboring
    device to identify the pledges IDevID certificate.  Only the selected
    BRSKI registrar can do this, but it may be difficult to disseminate
    information about undesired pledges from those BRSKI registrars to locations/nodes
    where information about those pledges is desired.</li>
          <li>LLDP disseminates information about nodes to their immediate neighbors,
    such as node model/type/software and interface name/number of the
    connection.  This information is often helpful or even necessary
    in network diagnostics.  It can equally considered to be too insecure
    to make this information available unprotected to all possible neighbors.</li>
        </ol>
        <t>An "interested adjacent party" can always determine the IDevID certificate of a BRSKI pledge
by behaving like a BRSKI proxy/registrar.  Therefore the IDevID certificate of a BRSKI pledge 
is not meant to be protected - it just has to be queried and is not
signaled unsolicited (as it would be in LLDP) so that other observers
on the same subnet can determine who is an "interested adjacent party".</t>
        <section anchor="ta-troubleshoot" numbered="true" toc="default">
          <name>Secure Channel Peer diagnostics</name>
          <t>When using mutual certificate authentication, the TA certificate is not required
to be signalled explicitly because its hash is sufficient for certificate
chain validation.  In the case of ACP secure channel setup this leads
to limited diagnostics when authentication fails because of TA mismatch.
For this reason, <xref target="common-requirements" format="default"/> recommends to also include the TA certificate in the
secure channel signalling. This should be possible
to do without protocol modifications in the security association protocols used by the
ACP. For example, while <xref target="RFC7296" format="default"/> does not mention this, it
also does not prohibit it.</t>
          <t>One common deployment use case where the diagnostic through the signalled
TA of a candidate peer is very helpfull are multi-tenant environments such as
office buildings, where different tenants run their own networks and ACPs.
Each tenant is given supposedly disjoint L2 connectivity through the building infrastructure.
In these environments there are various common errors through which a device may
receive L2 connectivity into the wrong tenants network.</t>
          <t>While the ACP itself is not impact by this, the Data-Plane to be built later may be
impacted. Therefore it is important to be able to diagnose such undesirable
connectivity from the ACP so that any autonomic or non-autonomic mechanisms
to configure the Data-Plane can accordingly treat such interfaces. 
The information in the TA of the peer can then ease
troubleshooting of such issues.</t>
          <t>Another example case is the intended or accidental re-activation of equipment
whose TA certificate has long expired, such as redundant gear taken from storage
after years.</t> 
          <t>A third example case is when in a mergers&amp;aquisition case ACP nodes have not
been correctly provisioned with the mutual TA of previously disjoint ACP. This
is assuming that the ACP domain names where already aligned so that the ACP
domain membership check is only failing on the TA.</t>
          <t>A fourth example case is when multiple registrars where set up for the same
ACP but without correctly setting up the same TA. For example when registrars
support to also be CA themselves but are misconfigured to become TA instead
of intermediate CA.</t>
        </section>
      </section>
      <section anchor="registrar-considerations" numbered="true" toc="default">
        <name>ACP Registrars</name>
        <t>As described in <xref target="acp-registrars" format="default"/>, the ACP addressing
mechanism is designed to enable lightweight, distributed and uncoordinated
ACP registrars that are providing ACP address prefixes to candidate ACP
nodes by enrolling them with an ACP certificate into an ACP domain via
any appropriate mechanism/protocol, automated or not.</t>
        <t>This section discusses informatively more details and options for ACP registrars.</t>
        <section anchor="reg-interact" numbered="true" toc="default">
          <name>Registrar interactions</name>
          <t>This section summarizes and discusses the interactions with other entities required
by an ACP registrar.</t>
          <t>In a simple instance of an ACP network, no central NOC component beside
a TA is required. Typically, this is a root CA.  One or more uncoordinated acting
ACP registrar can be set up, performing the following interactions:</t>
          <t>To orchestrate enrolling a candidate ACP node autonomically,
the ACP registrar can rely on the ACP and use Proxies to reach the candidate ACP node,
therefore allowing minimum pre-existing (auto-)configured network services
on the candidate ACP node.  BRSKI defines the BRSKI proxy, a design that can be
adopted for various protocols that Pledges/candidate ACP nodes could want to use,
for example BRSKI over CoAP (Constrained Application Protocol), or proxying of
Netconf.</t>
          <t>To reach a TA that has no ACP connectivity, the ACP registrar would use
the Data-Plane. ACP and Data-Plane in an ACP registrar could (and by default
should be) completely isolated from each other at the network level.
Only applications such as the ACP registrar would need the ability for
 their transport stacks to access both.</t>
          <t>In non-autonomic enrollment options, the Data-Plane 
between a ACP registrar and the candidate ACP node needs to be configured
first.  This includes the ACP registrar and the candidate ACP node.
Then any appropriate set of protocols can be used between ACP registrar and
candidate ACP node to discover the other side, and then connect 
and enroll (configure) the candidate ACP node with an ACP certificate.
Netconf ZeroTouch (<xref target="RFC8572" format="default"/>)
is an example protocol that could be used for this.  BRSKI using optional
discovery mechanisms is equally a possibility for candidate ACP nodes
attempting to be enrolled across non-ACP networks, such as the Internet.</t>
          <t>When candidate ACP nodes have secure bootstrap, such as BRSKI Pledges,
they will not trust to be configured/enrolled across the network, unless
being presented with a voucher (see <xref target="RFC8366" format="default"/>) authorizing
the network to take possession of the node. An ACP registrar will then need a
method to retrieve such a voucher, either offline, or online from a MASA
(Manufacturer Authorized Signing Authority). BRSKI and Netconf
ZeroTouch are two protocols that include capabilities to present the voucher
to the candidate ACP node.</t>
          <t>An ACP registrar could operate EST for ACP certificate renewal and/or
act as a CRL Distribution point. A node performing these
services does not need to support performing (initial) enrollment, but
it does require the same above described connectivity as an ACP
registrar: via the ACP to ACP nodes and via the Data-Plane to the TA
and other sources of CRL information.</t>
        </section>
        <section anchor="reg-config" numbered="true" toc="default">
          <name>Registrar Parameter</name>
          <t>The interactions of an ACP registrar outlined <xref target="acp-registrars" format="default"/> and
<xref target="reg-interact" format="default"/> above depend on the following parameters:
</t>
          <ul spacing="compact">
            <li>A URL to the TA and credentials so that the ACP
   registrar can let the TA sign candidate ACP node certificates.</li>
            <li>The ACP domain-name.</li>
            <li>The Registrar-ID to use. This could default to a MAC address of the ACP registrar.</li>

            <li>For recovery, the next-useable Node-IDs for zone (Zone-ID=0) sub-addressing scheme,
     for Vlong /112 and for Vlong /120 sub-addressing scheme. These IDs would only need
     to be provisioned after recovering from a crash. Some other mechanism would 
     be required to remember these IDs in a backup location or to recover them
     from the set of currently known ACP nodes.</li>

            <li>Policies if candidate ACP nodes should receive a domain certificate or not,
     for example based on the devices IDevID certificate as in BRSKI. The ACP registrar may have
     a whitelist or blacklist of devices <xref target="X.520" format="default"/>  "serialNumbers" attribute in the subjects field distinguished name encoding from their IDevID certificate.</li>

            <li>Policies what type of address prefix to assign to a candidate ACP devices,
     based on likely the same information.</li>
            <li>For BRSKI or other mechanisms using vouchers: Parameters to determine
     how to retrieve vouchers for specific type of secure bootstrap candidate
     ACP nodes (such as MASA URLs), unless this information is automatically
     learned such as from the IDevID certificate of candidate ACP nodes (as defined in BRSKI).</li>
          </ul>
        </section>
        <section anchor="cert-renewal" numbered="true" toc="default">
          <name>Certificate renewal and limitations</name>
          <t>When an ACP node renews/rekeys its certificate, it may end up doing so via
a different registrar (e.g., EST server) than the one it originally received
its ACP certificate from, for example because that original ACP registrar
is gone. The ACP registrar through which the renewal/rekeying is performed
would by default trust the acp-node-name from the ACP nodes current
ACP certificate and maintain this information so that the ACP node
maintains its ACP address prefix. In EST renewal/rekeying, the ACP nodes current
ACP certificate is signaled during the TLS handshake.</t>
          <t>This simple scenario has two limitations:
</t>
          <ol type="1" spacing="compact">
            <li>The ACP registrars cannot directly assign certificates to nodes and
     therefore needs an "online" connection to the TA.</li>
            <li>Recovery from a compromised ACP registrar is difficult.
     When an ACP registrar is compromised, it can insert for example
     a conflicting acp-node-name and create thereby an attack
     against other ACP nodes through the ACP routing protocol.</li>
          </ol>
          <t>Even when such a malicious ACP registrar is detected, resolving the
problem may be difficult because it would require identifying all the
wrong ACP certificates assigned via the ACP registrar after it
was compromised. And without additional centralized tracking of assigned
certificates there is no way to do this.</t>
        </section>
        <section anchor="sub-ca" numbered="true" toc="default">
          <name>ACP Registrars with sub-CA</name>
          <t>In situations, where either of the above two limitations are an issue,
ACP registrars could also be sub-CAs. This removes the need for
connectivity to a TA whenever an ACP node is enrolled, and reduces
the need for connectivity of such an ACP registrar to a TA to only
those times when it needs to renew its own certificate. The ACP registrar
would also now use its own (sub-CA) certificate to enroll and sign the
ACP nodes certificates, and therefore it is only necessary to revoke
a compromised ACP registrars sub-CA certificate. Alternatively one can
let it expire and not renew it, when the certificate of the sub-CA is appropriately
short-lived.</t>
          <t>As the ACP domain membership check verifies a
peer ACP node's ACP certificate trust chain, it will also verify
the signing certificate which is the compromised/revoked sub-CA certificate.
Therefore ACP domain membership for an ACP node enrolled from a
compromised and discovered ACP registrar will fail.</t>
          <t>ACP nodes enrolled by a compromised ACP registrar
would automatically fail to establish ACP channels and ACP domain
certificate renewal via EST and therefore revert to their role as 
a candidate ACP members and attempt to get a new ACP certificate
from an ACP registrar - for example, via BRSKI. In result, ACP registrars that have an
associated sub-CA makes isolating and resolving issues with
compromised registrars easier.</t>
          <t>Note that ACP registrars with sub-CA functionality also can control the
lifetime of ACP certificates easier and therefore also be used as
a tool to introduce short lived certificates and not rely on CRL,
whereas the certificates for the sub-CAs themselves could be longer
 lived and subject to CRL.</t>
        </section>
        <section anchor="pms" numbered="true" toc="default">
          <name>Centralized Policy Control</name>
          <t>When using multiple, uncoordinated ACP registrars, several advanced
operations are potentially more complex than with a single, resilient
 policy control backend, for example including but not limited to:
</t>
          <ul spacing="compact">
            <li>Which candidate ACP node is permitted or not permitted into an
     ACP domain. This may not be a decision to be taken upfront, so that
     a policy per "serialNumber" attribute in the subjects field distinguished name encoding  can be loaded into every ACP registrar.
     Instead, it may better be decided in real-time including potentially
     a human decision in a NOC.</li>
            <li>Tracking of all enrolled ACP nodes and their certificate information.
     For example in support of revoking individual ACP nodes certificates.</li>
            <li>More flexible policies what type of address prefix or even what specific
     address prefix to assign to a candidate ACP node.</li>
          </ul>
          <t>These and other operations could be introduced more easily by
introducing a centralized Policy Management System (PMS) and modifying 
ACP registrar behavior so that it queries the PMS for any policy decision
occurring during the candidate ACP node enrollment process and/or the
ACP node certificate renewal process. For example, which ACP address
prefix to assign. Likewise the ACP registrar would report any relevant state
change information to the PMS as well, for example when a certificate
was successfully enrolled onto a candidate ACP node.</t>
        </section>
      </section>
      <section anchor="enabling-acp" numbered="true" toc="default">
        <name>Enabling and disabling ACP/ANI</name>
        <t> Both ACP and BRSKI require interfaces to be operational enough to support sending/receiving their packets.  In node types where interfaces are by default (e.g., without operator configuration) enabled, such as most L2 switches, this would be less of a change in behavior than in most L3 devices (e.g.: routers), where interfaces are by default disabled.  In almost all network devices it is common though for configuration to change interfaces to a physically disabled state and that would break the ACP.</t>
        <t>In this section, we discuss a suggested operational model to enable/disable interfaces and nodes for ACP/ANI in a way that minimizes the risk of operator action to break the ACP in this way, and that also minimizes operator surprise when ACP/ANI becomes supported in node software.</t>
        <section anchor="secure-enabling" numbered="true" toc="default">
          <name>Filtering for non-ACP/ANI packets</name>
          <t>Whenever this document refers to enabling an interface for ACP (or BRSKI), it only requires to permit the interface to send/receive packets necessary to operate ACP (or BRSKI) - but not any other Data-Plane packets.  Unless the Data-Plane is explicitly configured/enabled, all packets not required for ACP/BRSKI should be filtered on input and output:</t>
          <t>Both BRSKI and ACP require link-local only IPv6 operations on interfaces and DULL GRASP.  IPv6 link-local operations means the minimum signaling to auto-assign an IPv6 link-local address and talk to neighbors via their link-local address: SLAAC (Stateless Address Auto-Configuration - <xref target="RFC4862" format="default"/>) and ND (Neighbor Discovery - <xref target="RFC4861" format="default"/>).  When the device is a BRSKI pledge, it may also require TCP/TLS connections to BRSKI proxies on the interface.  When the device has keying material, and the ACP is running, it requires DULL GRASP packets and packets necessary for the secure-channel mechanism it supports, e.g., IKEv2 and IPsec ESP packets or DTLS packets to the IPv6 link-local address of an ACP neighbor on the interface.  It also requires TCP/TLS packets for its BRSKI proxy functionality, if it does support BRSKI.</t>
        </section>
        <section anchor="admin-down" numbered="true" toc="default">
          <name>Admin Down State</name>
          <t>Interfaces on m ost network equipment have at least two states: "up" and "down".  These may have product specific names.  "down" for example could be called "shutdown" and "up" could be called "no shutdown".  The "down" state disables all interface operations down to the physical level.  The "up" state enables the interface enough for all possible L2/L3 services to operate on top of it and it may also auto-enable some subset of them.  More commonly, the operations of various L2/L3 services is controlled via additional node-wide or interface level options, but they all become only active when the interface is not "down".  Therefore an easy way to ensure that all L2/L3 operations on an interface are inactive is to put the interface into "down" state.  The fact that this also physically shuts down the interface is in many cases just a side effect, but it may be important in other cases (see below, <xref target="down-fast-state-propagation" format="default"/>).</t>
          <t>One of the common problems of remote management is for the operator or SDN controller to cut its own connectivity to the remote node by a configuration impacting its own management connection into the node. The ACP itself should have no dedicated configuration other than aforementioned enablement of the ACP on brownfield ACP nodes. This leaves configuration that can not distinguish between ACP and Data-Plane as sources of configuration mistakes as these commands will impact the ACP even though they should only impact the Data-Plane.</t>
          <t>The one ubiquitous type of commands that do this on many type of routers are interface "down" commands/configurations. When such a command is applied to the interface through which the ACP provides access for remote management it would cut the remote management connection through the ACP because, as outlined above, the "down" commands typically impact the physical layer too and not only the Data-Plane services.</t>
          <t>To provide ACP/ANI resilience against such operator misconfiguration, this document 
recommends to separate the "down" state of interfaces into an "admin down" state where the physical layer is kept running and ACP/ANI can use the interface and a "physical down" state.  Any existing "down" configurations would map to "admin down".  In "admin down", any existing L2/L3 services of the Data-Plane should see no difference to "physical down" state.  To ensure that no Data-Plane packets could be sent/received, packet filtering could be established automatically as described above in <xref target="secure-enabling" format="default"/>.</t>
          <t>An example of non-ACP but ANI traffic that should be permitted to pass even in "admin-down" state is BRSKI enrollment traffic between BRSKI pledge and a BRSKI proxy.</t>
          <t>As necessary (see discussion below) new configuration options could be introduced to issue "physical down".  The options should be provided with additional checks to minimize the risk of issuing them in a way that breaks the ACP without automatic restoration.  For example they could be denied to be issued from a control connection (netconf/ssh) that goes across the interface itself ("do not disconnect yourself").  Or they could be performed only temporary and only be made permanent with additional later reconfirmation.</t>
          <t>In the following sub-sections important aspects to the introduction of "admin down" state are discussed.</t>
          <section anchor="down-security" numbered="true" toc="default">
            <name>Security</name>
            <t>Interfaces are physically brought down (or left in default down state) as a form of security.
"Admin down" state as described above provides also a high level of security
because it only permits ACP/ANI operations which are both well secured.  Ultimately, it is subject to
security review for the deployment whether "admin down" is a feasible replacement for "physical down".</t>
            <t>The need to trust the security of ACP/ANI operations needs to be weighed against
the operational benefits of permitting this: Consider the typical example of a CPE (customer
premises equipment) with no on-site network expert.  User ports are in physical
down state unless explicitly configured not to be.  In a misconfiguration situation, the uplink
connection is incorrectly plugged into such as user port.  The device is disconnected from the
network and therefore no diagnostics from the network side is possible anymore.
Alternatively, all ports default to "admin down".  The ACP (but not the Data-Plane) would
still automatically form.  Diagnostics from the network side is possible and operator
reaction could include to either make this port the operational uplink port or to instruct
re-cabling.  Security wise, only ACP/ANI could be attacked, all other functions are filtered
on interfaces in "admin down" state.</t>
          </section>
          <section anchor="down-fast-state-propagation" numbered="true" toc="default">
            <name>Fast state propagation and Diagnostics</name>
            <t>"Physical down" state propagates on many interface types (e.g., Ethernet) to the other side.
This can trigger fast L2/L3 protocol reaction on the other side and "admin down" would not
have the same (fast) result.</t>
            <t>Bringing interfaces to "physical down" state is to the best of our knowledge always
a result of operator action, but today, never the result of autonomic L2/L3 services
running on the nodes.  Therefore one option is to change the operator action to not
rely on link-state propagation anymore.  This may not be possible when both sides are
under different operator control, but in that case it is unlikely that the ACP is running
across the link and actually putting the interface into "physical down" state may
still be a good option.</t>
            <t>Ideally, fast physical state propagation is replaced by fast software driven state
propagation.  For example a DULL GRASP "admin-state" objective could be used to auto configure
a Bidirectional Forwarding Protocol (BFD, <xref target="RFC5880" format="default"/>) session between the two sides of the link that would be used to propagate the
"up" vs. admin down state.</t>
            <t>Triggering physical down state may also be used as a mean of diagnosing cabling
in the absence of easier methods.  It is more complex than automated neighbor diagnostics
because it requires coordinated remote access to both (likely) sides of a link to
determine whether up/down toggling will cause the same reaction on the remote side.</t>
            <t>See <xref target="diagnostics" format="default"/> for a discussion about how LLDP and/or diagnostics
via GRASP could be used to provide neighbor diagnostics, and therefore hopefully
eliminating the need for "physical down" for neighbor diagnostics - as long as both
neighbors support ACP/ANI.</t>
          </section>
          <section anchor="low-level-link" numbered="true" toc="default">
            <name>Low Level Link Diagnostics</name>
            <t>"Physical down" is performed to diagnose low-level interface behavior when higher layer services (e.g., IPv6) are not working.  Especially Ethernet links are subject to a wide variety of possible wrong configuration/cablings if they do not support automatic selection of variable parameters such as speed (10/100/1000 Mbps), crossover (Auto-MDIX) and connector (fiber, copper - when interfaces have multiple but can only enable one at a time).  The need for low level link diagnostic can therefore be minimized by using fully auto configuring links.</t>
            <t>In addition to "Physical down", low level diagnostics of Ethernet or other interfaces also involve the creation of other states on interfaces, such as physical Loopback (internal and/or external) or bringing down all packet transmissions for reflection/cable-length measurements.  Any of these options would disrupt ACP as well.</t>
            <t>In cases where such low-level diagnostics of an operational link is desired but where the link could be a single point of failure for the ACP, ASA on both nodes of the link could perform a negotiated diagnostics that automatically terminates in a predetermined manner without dependence on external input ensuring the link will become operational again.</t>
          </section>
          <section anchor="power-consumption" numbered="true" toc="default">
            <name>Power Consumption Issues</name>
            <t>Power consumption of "physical down" interfaces, may be significantly lower than those
in "admin down" state, for example on long-range fiber interfaces. Bringing up
interfaces, for example to probe reachability, may also consume additional power. This
can make these type of interfaces inappropriate to operate purely for the ACP when 
they are not currently needed for the Data-Plane.</t>
          </section>
        </section>
        <section anchor="if-enable" numbered="true" toc="default">
          <name>Interface level ACP/ANI enable</name>
          <t>The interface level configuration option "ACP enable" enables ACP  operations on an interface, starting with ACP neighbor discovery via DULL GRAP.  The interface level configuration option "ANI enable" on nodes supporting BRSKI and ACP starts with BRSKI pledge operations when there is no domain certificate on the node.  On ACP/BRSKI nodes, "ACP enable" may not need to be supported, but only "ANI enable".  Unless overridden by global configuration options (see later), "ACP/ANI enable" will result in "down" state on an interface to behave as "admin down".</t>
        </section>
        <section anchor="if-enable-auto" numbered="true" toc="default">
          <name>Which interfaces to auto-enable?</name>
          <t>(<xref target="discovery-grasp" format="default"/>) requires that "ACP enable" is automatically set on native interfaces, but not on non-native interfaces (reminder: a native interface is one that exists without operator configuration action such as physical interfaces in physical devices).</t>
          <t>Ideally, ACP enable is set automatically on all interfaces that provide access to additional connectivity that allows to reach more nodes of the ACP domain.  The best set of interfaces necessary to achieve this is not possible to determine automatically.  Native interfaces are the best automatic approximation.</t>
          <t>Consider an ACP domain of ACP nodes transitively connected via native interfaces.  A Data-Plane tunnel between two of these nodes that are non-adjacent is created and "ACP enable" is set for that tunnel.  ACP RPL sees this tunnel as just as a single hop.  Routes in the ACP would use this hop as an attractive path element to connect regions adjacent to the tunnel nodes.  In result, the actual hop-by-hop paths used by traffic in the ACP can become worse.  In addition, correct forwarding in the ACP now depends on correct Data-Plane forwarding config including QoS, filtering and other security on the Data-Plane path across which this tunnel runs.  This is the main issue why "ACP/ANI enable" should not be set automatically on non-native interfaces.</t>
          <t>If the tunnel would connect two previously disjoint ACP regions, then it likely would be useful for the ACP.  A Data-Plane tunnel could also run across nodes without ACP and provide additional connectivity for an already connected ACP network.  The benefit of this additional ACP redundancy has to be weighed against the problems of relying on the Data-Plane.  If a tunnel connects two separate ACP regions: how many tunnels should be created to connect these ACP regions reliably enough? Between which nodes? These are all standard tunneled network design questions not specific to the ACP, and there are no generic fully automated answers.</t>
          <t>Instead of automatically setting "ACP enable" on these type of interfaces, the decision needs to be based on the use purpose of the non-native interface and "ACP enable" needs to be set in conjunction with the mechanism through which the non-native interface is created/configured.</t>
          <t>In addition to explicit setting of "ACP/ANI enable", non-native interfaces also need to support configuration of the ACP RPL cost of the link - to avoid the problems of attracting too much traffic to the link as described above.</t>
          <t>Even native interfaces may not be able to automatically perform BRSKI or ACP because they may require additional operator input to become operational.  Example include DSL interfaces requiring PPPoE credentials or mobile interfaces requiring credentials from a SIM card.  Whatever mechanism is used to provide the necessary config to the device to enable the interface can also be expanded to decide on whether or not to set "ACP/ANI enable".</t>
          <t>The goal of automatically setting "ACP/ANI enable" on interfaces (native or not) is to eliminate unnecessary "touches" to the node to make its operation as much as possible "zero-touch" with respect to ACP/ANI.  If there are "unavoidable touches" such a creating/configuring a non-native interface or provisioning credentials for a native interface, then "ACP/ANI enable" should be added as an option to that "touch".  If a wrong "touch" is easily fixed (not creating another high-cost touch), then the default should be not to enable ANI/ACP, and if it is potentially expensive or slow to fix (e.g., parameters on SIM card shipped to remote location), then the default should be to enable ACP/ANI.</t>
        </section>
        <section anchor="node-enable" numbered="true" toc="default">
          <name>Node Level ACP/ANI enable</name>
          <t>A node level command "ACP/ANI enable [up-if-only]" enables ACP or ANI on the node (ANI = ACP + BRSKI).  Without this command set, any interface level "ACP/ANI enable" is ignored.  Once set, ACP/ANI will operate an interface where "ACP/ANI enable" is set.  Setting of interface level "ACP/ANI enable" is either automatic (default) or explicit through operator action as described in the previous section.</t>
          <t>If the option "up-if-only" is selected, the behavior of "down" interfaces is unchanged, and ACP/ANI will only operate on interfaces where "ACP/ANI enable" is set and that are "up".  When it is not set, then "down" state of interfaces with "ACP/ANI enable" is modified to behave as "admin down".</t>
          <section anchor="brownfield" numbered="true" toc="default">
            <name>Brownfield nodes</name>
            <t>A "brownfield" node is one that already has a configured Data-Plane.</t>
            <t>Executing global "ACP/ANI enable [up-if-only]" on each node is the only command necessary to create an ACP across a network of brownfield nodes once all the nodes have a domain certificate.  When BRSKI is used ("ANI enable"), provisioning of the certificates only requires set-up of a single BRSKI registrar node which could also implement a CA for the network.  This is the most simple way to introduce ACP/ANI into existing (== brownfield) networks.</t>
            <t>The need to explicitly enable ACP/ANI is especially important in brownfield nodes because otherwise software updates may introduce support for ACP/ANI: Automatic enablement of ACP/ANI in networks where the operator does not only not want ACP/ANI but where the operator likely never even heard of it could be quite irritating to the operator.  Especially when "down" behavior is changed to "admin down".</t>
            <t>Automatically setting "ANI enable" on brownfield nodes where the operator is unaware of BRSKI and MASA operations 
 could also be an unlikely but then critical security issue. If an attacker could impersonate the operator and register
as the operator at the MASA or otherwise get hold of vouchers and can get enough physical access to the network so
pledges would register to an attacking registrar, then the attacker could gain access to the
 ACP, and through the ACP gain access to the Data-Plane.</t>

            <t>In networks where the operator explicitly wants to enable the ANI this could not happen, because the operator would create a BRSKI registrar that would discover attack attempts, and the operator would be setting up his registrar with the MASA.  Nodes requiring "ownership vouchers" would not be subject to that attack.  See <xref target="I-D.ietf-anima-bootstrapping-keyinfra" format="default"/> for more details.  Note that a global "ACP enable" alone is not subject to these type of attacks, because it always depends on some other mechanism first to provision domain certificates into the device.</t>
          </section>
          <section anchor="greenfield" numbered="true" toc="default">
            <name>Greenfield nodes</name>

            <t>An ACP "greenfield" node is one that does not have any prior configuration and that can be bootstrapped into the ACP across the network. To support greenfield nodes, ACP as described in this document needs to be combined with a bootstrap protocol/mechanism that will enroll the node with the ACP keying material - ACP certificate and TA. For ANI nodes, this protocol/mechanism is BRSKI.</t>

            <t>When such a node is powered on and determines it is in greenfield condition, it enables the bootstrap protocol(s)/mechanism(s), and once the ACP keying material is enrolled, greenfield state ends and the ACP is started. When BRSKI is used, the node's state reflects this by setting "ANI enable" upon determination of greenfield state at power on.</t>

            <t>ACP greenfield nodes that in the absence of ACP would have their interfaces in "down" state SHOULD set all native interfaces into "admin down" state and only permit Data-Plane traffic required for the bootstrap protocol/mechanisms.</t>

            <t>ACP nodes supporting greenfield operations MAY want to provide backward compatibility with other forms of configuration/provisioning, especially when only a subset of the nodes are expected to be deployed with ACP. Such an ACP node SHOULD observe attempts to provision/configure the node via interfaces/methods that traditionally indicate physical possession of the node, such as a serial or USB console port or a USB memory stick with a bootstrap configuration. When such an operation is observed before enrollment of the ACP keying material has completed, the node SHOULD put itself into the greenfield state the node would have been in, if ACP/ANI was disabled at boot.</t>

            <t>When a greenfield node enables multiple enrollment/botstrap protocols/mechanisms in parallel, care must be taken not to terminate any protocol/mechanism before another one has progressed to a point where greenfield state is defined to end.</t>

            <t>Nodes that claim to support ANI greenfield operations SHOULD NOT enable in parallel to BRSKI any enrollment/bootstrap protocol/mechanism that allows Trust On First Use (TOFU, <xref target="RFC7435" format="default"/>) over interfaces other than those traditionally indicating physical possession of the node.  Protocols/mechanisms with published default username/password authentication are considered to suffer from TOFU. Securing the bootstrap protocol/mechanism by requiring a voucher (<xref target="RFC8366" format="default"/>) can be used to avoid TOFU.</t>

            <t>In summary, the goal of ACP greenfield support is to allow remote automated enrollment of ACP keying materials, and therefore automated bootstrap into the ACP and to prohibit TOFU during bootstrap with the likely exception (for backward compatibility) of bootstrapping via interfaces traditionally indicating physical possession of the node.</t>

          </section>
        </section>
        <section anchor="disabling" numbered="true" toc="default">
          <name>Undoing ANI/ACP enable</name>
          <t>Disabling ANI/ACP by undoing "ACP/ANI enable" is a risk for the reliable operations of the ACP if it can be executed by mistake or unauthorized.  
This behavior could be influenced through some additional (future) property in the certificate (e.g., in the acp-node-name extension field): In an ANI deployment intended for convenience, disabling it could be allowed without further constraints.  In an ANI deployment considered to be critical more checks would be required.
One very controlled option would be to not permit these commands unless the domain certificate has been revoked or is denied renewal.  Configuring this option would be a parameter on the BRSKI registrar(s).  As long as the node did not receive a domain certificate, undoing "ANI/ACP enable" should not have any additional constraints.</t>
        </section>
        <section anchor="enable-summary" numbered="true" toc="default">
          <name>Summary</name>
          <t>Node-wide "ACP/ANI enable [up-if-only]" commands enable the operation of ACP/ANI.  This is only auto-enabled on ANI greenfield devices, otherwise it must be configured explicitly.</t>
          <t>If the option "up-if-only" is not selected, interfaces enabled for ACP/ANI interpret "down" state as "admin down" and not "physical down".  In "admin-down" all non-ACP/ANI packets are filtered, but the physical layer is kept running to permit ACP/ANI to operate.</t>
          <t>(New) commands that result in physical interruption ("physical down", "loopback") of ACP/ANI enabled interfaces should be built to protect continuance or reestablishment of ACP as much as possible.</t>
          <t>Interface level "ACP/ANI enable" control per-interface operations.  It is enabled by default on native interfaces and has to be configured explicitly on other interfaces.</t>
          <t>Disabling "ACP/ANI enable" global and per-interface should have additional checks to minimize undesired breakage of ACP.  The degree of control could be a domain wide parameter in the domain certificates.</t>
        </section>
      </section>
      <section anchor="incremental-adoption" numbered="true" toc="default">
        <name>Partial or Incremental adoption</name>
        <t>The ACP Zone Addressing Sub-Scheme (see <xref target="zone-scheme" format="default"/>) allows incremental
adoption of the ACP in a network where ACP can be deployed on edge areas, but not
across the core that is connecting those edges.</t>
        <t>In such a setup, each edge network, such as a branch or campus of an enterprise network
has a disjoined ACP to which one or more unique Zone-IDs are assigned: ACP nodes registered for
a specific ACP zone have to receive ACP Zone Addressing Sub-scheme addresses, for example
by virtue of configuring for each such zone one or more ACP Registrars with that Zone-ID.
All the Registrars for these ACP Zones need to get ACP certificates from CAs relying on a
common set of TA and of course the same ACP domain name.</t>
        <t>These ACP zones can first be brought up as separate networks without any connection
between them and/or they can be connected across a non-ACP enabled core network through
various non-autonomic operational practices. For example, each separate ACP Zone can have an
edge node that is a layer 3 VPN PE (MPLS or IPv6 layer 3 VPN), where a complete
non-autonomic ACP-Core VPN is created by using the ACP VRFs and exchanging the routes
from those ACP VRFs across the VPNs non-autonomic routing protocol(s).</t>
        <t>While such a setup is possible with any ACP addressing sub-scheme, the
ACP-Zone Addressing sub-scheme makes it easy to configure and scalable for any
VPN routing protocols because every ACP zone would only need to indicate one or more 
/64 ACP Zone Addressing prefix routes into the ACP-Core VPN as opposed to routes
for every individual ACP node as required in the other ACP addressing schemes.</t>
        <t>Note that the non-autonomous ACP-Core VPN would require additional extensions
to propagate GRASP messages when GRASP discovery is desired across the zones.</t>

<t>For example, one could set up on each Zone edge router a remote ACP
tunnel to a GRASP hub. The GRASP hub could be implemented at the application level
and could run in the NOC of the network. It would serve to propagage
GRASP announcements between ACP Zones and/or generate GRASP announcements for NOC 
services.</t>

        <t>Such a partial deployment may prove to be sufficient or could evolve to become more
autonomous through future standardized or non-standardized enhancements, for example
by allowing GRASP messages to be propagated across the layer 3 VPN, leveraging for
example L3VPN Multicast support.</t>
        <t>Finally, these partial deployments can be merged into a single contiguous complete
autonomous ACP (given appropriate ACP support across the core) without changes
in the crypto material, because the nodes ACP certificates are fromm a single ACP.</t>
      </section>
      <section anchor="configuration" numbered="true" toc="default">
        <name>Configuration and the ACP (summary)</name>
        <t>There is no desirable configuration for the ACP. Instead, all parameters that need to be configured in support of the ACP are limitations of the solution, but they are only needed in cases where not all components are made autonomic. Whereever this is necessary, it relies on pre-existing mechanisms for configuration such as CLI or YANG (<xref target="RFC7950" format="default"/>) data models.</t>
        <t>The most important examples of such configuration include:</t>
        <ul spacing="compact">
          <li>When ACP nodes do not support an autonomic way to receive an ACP certificate, for example BRSKI, then such certificate needs to be configured via some pre-existing mechanisms outside the scope of this specification. Today, router have typically a variety of mechanisms to do this.</li>
          <li>Certificate maintenance requires PKI functions. Discovery of these functions across the ACP is automated (see <xref target="domcert-maint" format="default"/>), but their configuration is not.</li>
          <li>When non-ACP capable nodes such as pre-existing NMS need to be physically connected to the ACP, the ACP node to which they attach needs to be configured with ACP-connect according to <xref target="ACPconnect" format="default"/>. It is also possible to use that single physical connection to connect both to ACP and the Data-Plane of the network as explained in <xref target="SingleIF" format="default"/>.</li>
          <li>When devices are not autonomically bootstrapped, explicit configuration to enable the ACP needs to be applied. See <xref target="enabling-acp" format="default"/>.</li>
          <li>When the ACP needs to be extended across interfacess other than L2, the ACP as defined in this document can not autodiscover candidate neighbors automatically. Remote neighbors need to be configured, see <xref target="remote-acp-neighbors" format="default"/>.</li>
        </ul>
        <t>Once the ACP is operating, any further configuration for the Data-Plane can be configured more reliably across the ACP itself because the ACP provides addressing and connectivity (routing) independent of the Data-Plane itself. For this, the configuration methods simply need to also allow to operate across the ACP VRF - netconf, ssh or any other method.</t>
        <t>The ACP also provides additional security through its hop-by-hop encryption for any such configuration operations: Some legacy configuration methods (SNMP, TFTP, HTTP) may not use end-to-end encryption, and most of the end-to-end secured configuration methods still allow for easy passive observation along the path about configuration taking place (transport flows, port numbers, IP addresses).</t>
        <t>The ACP can and should equally be used as the transport to configure any of the aforemention non-automic components of the ACP, but in that case, the same caution needs to be exercised as with Data-Plane configuration without ACP: Misconfiguration may cause the configuring entity to be disconnected from the node it configures - for example when incorrectly unconfiguring a remote ACP neighbor through which the configured ACP node is reached.</t>
      </section>
    </section>
    <section anchor="benefit" numbered="true" toc="default">
      <name>Summary: Benefits (Informative)</name>
      <section anchor="self-healing" numbered="true" toc="default">
        <name>Self-Healing Properties</name>
        <t>The ACP is self-healing:</t>
        <ul spacing="compact">
          <li>New neighbors will automatically join the ACP after successful validation and will become reachable using their unique ULA address across the ACP.</li>
          <li>When any changes happen in the topology, the routing protocol used in the ACP will automatically adapt to the changes and will continue to provide reachability to all nodes.</li>
          <li>The ACP tracks the validity of peer certificates and tears down ACP secure channels when a peer certificate has expired. When short-lived certificates with lifetimes in the order of OCSP/CRL refresh times are used, then this allows for removal of invalid peers (whose certificate was not renewed) at similar speeds as when using OCSP/CRL. The same benefit can be achieved when using CRL/OCSP,  periodically refreshing the revocation information and also tearing down ACP secure channels when the peer's (long-lived) certificate is revoked. There is no requirement against ACP implementations to require this enhancement though to keep the mandatory implementations simpler.</li>
        </ul>
        <t>The ACP can also sustain network partitions and mergers.  Practically all ACP operations are link local, where a network partition has no impact.  Nodes authenticate each other using the domain certificates to establish the ACP locally.  Addressing inside the ACP remains unchanged, and the routing protocol inside both parts of the ACP will lead to two working (although partitioned) ACPs.</t>
        <t>There are few central dependencies: A CRL may not be available during a network partition; a suitable policy to not immediately disconnect neighbors when no CRL is available can address this issue.  Also, an ACP Registrar or Certification Authority might not be available during a partition.  This may delay renewal of certificates that are to expire in the future, and it may prevent the enrollment of new nodes during the partition.</t>
        <t>Highly resilient ACP designs can be built by using ACP Registrars with embedded sub-CA, as outlined in <xref target="sub-ca" format="default"/>. As long as a partition is left with one or more of such ACP Registrars, it can continue to enroll new candidate ACP nodes as long as the ACP Registrar's sub-CA certificate does not expire. Because the ACP addressing relies on unique Registrar-IDs, a later re-merge of partitions will also not cause problems with ACP addresses assigned during partitioning.</t>
        <t>After a network partition, a re-merge will just establish the previous status, certificates can be renewed, the CRL is available, and new nodes can be enrolled everywhere.  Since all nodes use the same TA, a re-merge will be smooth.</t>
        <t>Merging two networks with different TA requires the ACP nodes to trust the union of TA.  As long as the routing-subdomain hashes are different, the addressing will not overlap. Accidentally, overlaps will only happen in the unlikely event of a 40-bit hash collision in SHA256 (see <xref target="addressing" format="default"/>).
Note that the complete mechanisms to merge networks is out of scope of this specification.</t>
        <t>It is also highly desirable for implementation of the ACP to be able to run it over interfaces that are administratively down.  If this is not feasible, then it might instead be possible to request explicit operator override upon administrative actions that would administratively bring down an interface across which the ACP is running.  Especially if bringing down the ACP is known to disconnect the operator from the node.  For example any such down administrative action could perform a dependency check to see if the transport connection across which this action is performed is affected by the down action (with default RPL routing used, packet forwarding will be symmetric, so this is actually possible to check).</t>
      </section>
      <!-- self-healing -->
      <section anchor="self-protecting" numbered="true" toc="default">
        <name>Self-Protection Properties</name>
        <section anchor="self-protecting-outside" numbered="true" toc="default">
          <name>From the outside</name>
          <t>As explained in <xref target="self-creation" format="default"/>, the ACP is based on secure channels built between nodes that have mutually authenticated each other with their domain certificates.  The channels themselves are protected using standard encryption technologies such as DTLS or IPsec which provide additional authentication during channel establishment, data integrity and data confidentiality protection of data inside the ACP and in addition, provide replay protection.</t>
          <t>Attacker will not be able to join the ACP unless they have a valid ACP certificate. On-path attackers without a valid ACP certificate can not inject packets into the ACP due to ACP secure channels. They can also not decrypt ACP traffic except if they can crack the encryption. They can attempt behavioral traffic analysis on the encrypted ACP traffic.</t>
          <t>The degree to which compromised ACP nodes can impact the ACP depends on the implementation of the ACP nodes and their impairment. When an attacker has only gained administrative privileges to configure ACP nodes remotely, the attacker can disrupt the ACP only through one of the few configuration options to disable it, see <xref target="enabling-acp" format="default"/>, or by configuring of non-autonomic ACP options if those are supported on the impaired ACP nodes, see <xref target="workarounds" format="default"/>. Injecting or extracting traffic into/from an impaired ACP node is only possible when an impaired ACP node supports ACP connect (see <xref target="ACPconnect" format="default"/>) and the attacker can control traffic into/from one of the ACP nodes interfaces, such as by having physical access to the ACP node.</t>
          <t>The ACP also serves as protection (through authentication and encryption) for protocols relevant to OAM that may not have secured protocol stack options or where implementation or deployment of those options fail on some vendor/product/customer limitations.  This includes protocols such as SNMP (<xref target="RFC3411" format="default"/>), NTP (<xref target="RFC5905" format="default"/>), PTP (<xref target="IEEE-1588-2008" format="default"/>), DNS (<xref target="RFC3596" format="default"/>), DHCPv6 (<xref target="RFC3315" format="default"/>), syslog (<xref target="RFC3164" format="default"/>), Radius (<xref target="RFC2865" format="default"/>), Diameter (<xref target="RFC6733" format="default"/>), TACACS (<xref target="RFC1492" format="default"/>), IPFIX (<xref target="RFC7011" format="default"/>), Netflow (<xref target="RFC3954" format="default"/>) - just to name a few. Not all of these protocol references are necessarily the latest version of protocols but versions that are still widely deployed.</t>
          <t>Protection via the ACP secure hop-by-hop channels for these protocols is meant to be only a stopgap though: The ultimate goal is for these and other protocols to use end-to-end encryption utilizing the domain certificate and rely on the ACP secure channels primarily for zero-touch reliable connectivity, but not primarily for security.</t>
          <t>The remaining attack vector would be to attack the underlying ACP protocols themselves, either via directed attacks or by denial-of-service attacks.  However, as the ACP is built using link-local IPv6 addresses, remote attacks from the Data-Plane are impossible as long as the Data-Plane has no facilities to remotely sent IPv6 link-local packets.  The only exception are ACP connected interfaces which require higher physical protection.  The ULA addresses are only reachable inside the ACP context, therefore, unreachable from the Data-Plane.  Also, the ACP protocols should be implemented to be attack resistant and not consume unnecessary resources even while under attack.</t>
        </section>
        <section anchor="self-protecting-inside" numbered="true" toc="default">
          <name>From the inside</name>
          <t>The security model of the ACP is based on trusting all members of the group of nodes
 that receive an ACP certificate for the same domain.  Attacks from the inside by
a compromised group member are therefore the biggest challenge.</t>
          <t>Group members must be protected against attackers so that there is no easy way to compromise them,
or use them as a proxy for attacking other devices across the ACP. For example, management plane
functions (transport ports) should only be reachable from the ACP but not the Data-Plane.
Especially for those management plane functions that have no good protection by themselves because they
do not have secure end-to-end transport and to whom ACP not only provides automatic reliable
 connectivity but also protection against attacks.  Protection across all potential
attack vectors is typically easier to do in devices whose software is designed from the ground up with
 ACP in mind than with legacy software based systems where the ACP is added on as another feature.</t>
          <t>As explained above, traffic across the ACP should still be end-to-end encrypted whenever
possible.  This includes traffic such as GRASP, EST and BRSKI inside the ACP.  This minimizes
man in the middle attacks by compromised ACP group members.  Such attackers cannot eavesdrop
or modify communications, they can just filter them (which is unavoidable by any means).</t>
          <t>See <xref target="compromised" format="default"/> for further considerations how to avoid and deal with
compromised nodes.</t>
        </section>
      </section>
      <!-- self-protecting -->
      <section anchor="admin-view" numbered="true" toc="default">
        <name>The Administrator View</name>
        <t>An ACP is self-forming, self-managing and self-protecting, therefore has minimal dependencies on the administrator of the network.  Specifically, since it is (intended to be) independent of configuration, there is only limited scope for configuration errors on the ACP itself.  The administrator may have the option to enable or disable the entire approach, but detailed configuration is not possible.  This means that the ACP must not be reflected in the running configuration of nodes, except a possible on/off switch (and even that is undesirable).</t>
        <t>While configuration (except for <xref target="workarounds" format="default"/> and  <xref target="registrar-considerations" format="default"/>)
 is not possible, an administrator must have full visibility of the ACP and all its parameters, to be able to do trouble-shooting.  Therefore, an ACP must support all show and debug options, as for any other network function.  Specifically, a network management system or controller must be able to discover the ACP, and monitor its health.  This visibility of ACP operations must clearly be separated from visibility of Data-Plane so automated systems will never have to deal with ACP aspects unless they explicitly desire to do so.</t>
        <t>Since an ACP is self-protecting, a node not supporting the ACP, or without a valid domain certificate cannot connect to it.  This means that by default a traditional controller or network management system cannot connect to an ACP.  See <xref target="NMS" format="default"/> for more details on how to connect an NMS host into the ACP.</t>
      </section>
      <!-- admin-view -->
    </section>
    <!-- benefits -->
    <section anchor="security" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>A set of ACP nodes with ACP certificates for the same ACP domain and with ACP functionality enabled is automatically "self-building": The ACP is automatically established between neighboring ACP nodes. It is also "self-protecting": The ACP secure channels are authenticated and encrypted. No configuration is required for this.</t>
      <t>The self-protecting property does not include workarounds for non-autonomic components as explained in <xref target="workarounds" format="default"/>. See <xref target="self-protecting" format="default"/> for details of how the ACP protects itself against attacks from the outside and to a more limited degree from the inside as well.</t>
      <t>However, the security of the ACP depends on a number of other factors:
                                </t>
      <ul spacing="compact">
        <li>The usage of domain certificates depends on a valid supporting PKI infrastructure.  If the chain of trust of this PKI infrastructure is compromised, the security of the ACP is also compromised.  This is typically under the control of the network administrator.</li>
        <li>ACP nodes receive their certificates from ACP registrars. These ACP registrars are security critical dependencies of the ACP:  Procedures and protocols for ACP registrars are outside the scope of this specification as explained in <xref target="registrars-protocols" format="default"/>, only requirements against the resulting ACP certificates are specified.</li>

        <li>Every ACP registrar (for enrollment of ACP certificates) and ACP EST server (for renewal of ACP certificates) is a security critical entity and its protocols are security critical protocols. Both need to be hardened against attacks, similar to a CA and its protocols. A malicious registrar can enroll malicious nodes to an ACP network (if the CA delegates this policy to the registrar) or break ACP routing for example by assigning duplicate ACP address assignment to ACP nodes via their ACP certificates.</li>

        <li>ACP nodes that are ANI nodes rely on BRSKI as the protocol for ACP registrars. For ANI type ACP nodes, the security considerations of BRSKI apply. It enables automated, secure enrollment of ACP certificates.</li>

        <li>BRSKI and potentially other ACP registrar protocol options require that nodes have an (X.509v3 based) IDevID. IDevIDs are an option for ACP registrars to securely identify candidate ACP nodes that should be enrolled into an ACP domain.</li>

        <li>For IDevIDs to securely identify the node to which it IDevID is assigned, the node it needs to (1) utilize hardware support such as a Trusted Platform Module (TPM) to protect against extraction/cloning of the private key of the IDevID and (2) a hardware/software infrastructure to prohibit execution of non authenticated software to protect against malicious use of the IDevID.</li>

        <li>Like the IDevID, the ACP certificate should equally be protected from extraction or other abuse by the same ACP node infrastructure. This infrastructure for IDevID and ACP certificate is beneficial independent of the ACP registrar protocol used (BRSKI or other).</li>

        <li>Renewal of ACP certificates requires support for EST, therefore the security considerations of <xref target="RFC7030" format="default"/> related to certificate renewal/rekeying and TP renewal apply to the ACP. EST security considerations when using other than mutual certificate authentication do not apply nor do considerations for initial enrollment via EST apply, except for ANI type ACP nodes because BRSKI leverages EST.</li>

        <li>A malicious ACP node could declare itself to be an EST server via GRASP across the ACP if malicious software could be executed on it. CA should therefore authenticate only known trustworthy EST servers, such as nodes with hardware protections against malicious software. When Registrars use their ACP certificate to authenticate towards a CA, the id-kp-cmcRA <xref target="RFC6402" format="default"/> extended key usage attribute allows the CA to determine that the ACP node was permitted during enrollment to act as an ACP registrar.  Without the ability to talk to the CA, a malicious EST server can still attract ACP nodes attempting to renew their keying material, but they will fail to perform successful renewal of a valid ACP certificate. The ACP node attempting to use the malicious EST server can then continue to use a different EST server, and log a failure against a malicious EST server.</li>

        <li>A malicious ACP node could declare itself to be an EST server via GRASP across the ACP if malicious software could be executed on it. CA should therefore authenticate only known trustworthy EST servers, such as nodes with hardware protections against malicious software. Without the ability to talk to the CA, a malicious EST server can still attract ACP nodes attempting to renew their keying material, but they will fail to perform successful renewal of a valid ACP certificate. The ACP node attempting to use the malicious EST server can then continue to use a different EST server, and log a failure against a malicious EST server.</li>

        <li>Malicious on-path ACP nodes may filter valid EST server announcements across the ACP, but such malicious ACP nodes could equally filter any ACP traffic such as the EST traffic itself. Either attack requires the ability to execute malicious software on an impaired ACP node though.</li>

        <li>In the abscence of malicious software injection, an attacker that can misconfigure an ACP node which is supporting EST server functionality could attempt to configure a malicious CA. This would not result in the ability to successfully renew ACP certificates, but it could result in DoS attacks by becoming an EST server and making ACP nodes attempting their ACP certificate renewal via this impaired ACP node. This problem can be avoided when the EST server implementation can verify that the CA configured is indeed providing renewal for certificates of the nodes ACP. The ability to do so depends on the EST-Server to CA protocol, which is outside the scope of this document.</li>
      </ul>

<t>In summary, attacks against the PKI/certificate dependencies of the ACP can be minimized by a variety of hardware/software commponents including options such as TPM for IDevID/ACP-certificate, prohibitions against execution of non-trusted software and design aspects of the EST Server functionality for the ACP to eliminate configuration level impairment.</t>

      <t>Because ACP peers select one out of potentially more than one mutually supported ACP secure channel protocols via the approach described in <xref target="channel-selection"/>, ACP secure channel setup is subject to downgrade attacks by MITM attackers. This can be discovered by additional mechanisms described in <xref target="downgrade"/>.</t>

<t>The security model of the ACP as defined in this document is tailored for use with private PKI. The TA of a private PKI provide the security against maliciously created ACP certificates to give access to an ACP. Such attacks can create fake ACP certificates with correct looking AcpNodeNames, but those certificates would not pass the certificate path validation of the ACP domain membership check (see <xref target="certcheck"/>, point 2).</t>

<t>If public CA are to be used, ACP registrars would need to prove ownership of the domain-name of AcpNodeNames to the public CA. However, maintaining the ULA based address allocation when using a public CA might be considered to be a violation of the private allocation expectation of ULA prefixes. To avoid this issue, further changes to registrar address allocation procedures might be needed, for example using global IPv6 address prefixes owned by the public CA instead of ULA.</t>

      <t>There is no prevention of source-address spoofing inside the ACP.  This implies that if an attacker gains access to the ACP, it can spoof all addresses inside the ACP and fake messages from any other node. New protocol/services run across the ACP should therefore use end-to-end authentication inside the ACP. This is already done by GRASP as specified in this document.</t>

      <t>The ACP is designed to enable automation of current network management and future autonomic peer-to-peer/distributed network automation. Any ACP member can send ACP IPv6 packet to other ACP members and announce via ACP GRASP services to all ACP members without dependency against centralized components.</t>

      <t>The ACP relies on peer-to-peer authentication and authorization using ACP certificates.  This security model is necessary to enable the autonomic ad-hoc any-to-any connectivity between ACP nodes. It provides infrastructure protection through hop by hop authentication and encryption - without relying on third parties. For any services where this complete autonomic peer-to-peer group security model is appropriate, the ACP certificate can also be used unchanged. For example for any type of Data-Plane routing protocol security.</t>

      <t>This ACP security model is designed primarily to protect against attack from the outside, but not against attacks from the inside.  To protect against spoofing attacks from compromised on-path ACP nodes, end-to-end encryption inside the ACP is used by new ACP signaling: GRASP across the ACP using TLS. The same is expected from any non-legacy services/protocols using the ACP. Because no group-keys are used, there is no risk for impacted nodes to access end-to-end encrypted traffic from other ACP nodes.</t>

      <t>Attacks from impacted ACP nodes against the ACP are more difficult than against the Data-Plane because of the autoconfiguration of the ACP and the absence of configuration options that could be abused that allow to change/break ACP behavior. This is excluding configuration for workaround in support of non-autonomic components.</t>

      <t>Mitigation against compromised ACP members is possible through standard automated certificate management mechanisms including revocation and non-renewal of short-lived certificates. In this version of the specification, there are no further optimization of these mechanisms defined for the ACP (but see <xref target="compromised" format="default"/>).</t>

      <t>Higher layer service built using ACP certificates should not solely rely on undifferentiated group security when another model is more appropriate/more secure. For example central network configuration relies on a security model where only few especially trusted nodes are allowed to configure the Data-Plane of network nodes (CLIL, Netconf). This can be done through ACP certificates by differentiating them and introduce roles. See <xref target="role-assignments" format="default"/>.</t>
      <!--

                        <t>Fundamentally, security depends on avoiding operator and network operations automation mistakes, implementation and architecture.  Autonomic approaches such as the ACP largely eliminate operator mistakes and make it easier to recover from network operations mistakes. Implementation and architectural mistakes are still possible, as in all networking technologies.</t> 

-->
      <t>Operators and provisioning software developers need to be aware of how the provisioning/configuration of network devices impacts the ability of the operator / provisioning software to remotely access the network nodes. By using the ACP, most of the issues  of configuration/provisioning caused loss of connectivity for remote provisioning/configuration will be eliminated, see <xref target="self-creation" format="default"/>. Only few exceptions such as explicit physical interface down configuration will be left <xref target="admin-down" format="default"/>.</t>

      <t>Many details of ACP are designed with security in mind and discussed elsewhere in the document:</t>
      <t>IPv6 addresses used by nodes in the ACP are covered as part of the node's domain certificate as described in <xref target="domcert-acpinfo" format="default"/>.  This allows even verification of ownership of a peer's IPv6 address when using a connection authenticated with the domain certificate.</t>
      <t>The ACP acts as a security (and transport) substrate for GRASP inside the ACP such that GRASP is not only protected by attacks from the outside, but also by attacks from compromised inside attackers - by relying not only on hop-by-hop security of ACP secure channels, but adding end-to-end security for those GRASP messages.  See <xref target="GRASP-substrate" format="default"/>.</t>
      <t>ACP provides for secure, resilient zero-touch discovery of EST servers for certificate renewal.  See <xref target="domcert-maint" format="default"/>.</t>
      <t>ACP provides extensible, auto-configuring hop-by-hop protection of the ACP infrastructure via the negotiation of hop-by-hop secure channel protocols.  See <xref target="channel-selection" format="default"/>.</t>

      <t>The ACP is designed to minimize attacks from the outside by minimizing its dependency against any non-ACP (Data-Plane) operations/configuration on a node.  See also <xref target="general_addressing" format="default"/>.</t>

      <t>In combination with BRSKI, ACP enables a resilient, fully zero-touch network solution for short-lived certificates that can be renewed or re-enrolled even after unintentional expiry (e.g., because of interrupted connectivity).  See <xref target="bootstrap" format="default"/>.</t>

      <t>Because ACP secure channels can be long lived, but certificates used may be short lived, secure channels, for example built via IPsec need to be terminated when peer certificates expire. See <xref target="Profiles" format="default"/>.</t>

      <t><xref target="acp-l2-switches-how" format="default"/> describes how to implement a routed
ACP topology operating on what effectively is a large bridge-domain when using
L3/L2 routers that operate at L2 in the Data-Plane. In this case, the ACP is
subject to much higher likelyhood of attacks by other nodes "stealing"
L2 addresses than in the actual routed case. Especially when the bridged network
includes non-trusted devices such as hosts.  This is a generic issue in L2 LANs.
L2/L3 devices often already have some form of "port security" to prohibit this.  They rely on
NDP or DHCP learning of which port/MAC-address and IPv6 address belong together and block
MAC/IPv6 source addresses from wrong ports.  This type of function needs to be
enabled to prohibit DoS attacks and specifically to protect the ACP.  Likewise the
GRASP DULL instance needs to ensure that the IPv6 address in the locator-option matches the source IPv6 address of the DULL GRASP packet.</t>
    </section>
    <!-- security -->
    <section anchor="iana" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>This document defines the "Autonomic Control Plane".</t>
      <t>For the ANIMA-ACP-2020 ASN.1 module, IANA is asked to register
value IANA1 for "id-mod-anima-acpnodename-2020" in the "SMI
Security for PKIX Module Identifier" (1.3.6.1.5.5.7.0) registry.</t>
      <t>For the otherName / AcpNodeName, IANA is asked to register a value for IANA2 for
id-on-AcpNodeName in the "SMI Security for PKIX Other Name
Forms" (1.3.6.1.5.5.7.8) registry.</t>
      <t> The IANA is requested to register the value "AN_ACP" (without quotes)
to the GRASP Objectives Names Table in the GRASP Parameter Registry.  The
specification for this value is this document, <xref target="discovery-grasp" format="default"/>.</t>
      <t> The IANA is requested to register the value "SRV.est" (without quotes)
to the GRASP Objectives Names Table in the GRASP Parameter Registry.  The
specification for this value is this document, <xref target="domcert-maint" format="default"/>.</t>
      <t>Explanation: This document chooses the initially strange looking format "SRV.&lt;service-name&gt;" because these objective names would be in line with potential future simplification of the GRASP objective registry. Today, every name in the GRASP objective registry needs to be explicitly allocated with IANA. In the future, this type of objective names could considered to be automatically registered in that registry for the same service for which &lt;service-name&gt; is registered according to <xref target="RFC6335" format="default"/>. This explanation is solely informational and has no impact on the requested registration.</t>
      <t> The IANA is requested to create an ACP Parameter Registry with
currently one registry table - the "ACP Address Type" table.</t>
      <t>"ACP Address Type" Table.  The value in this table are numeric values 0...3 paired with a name (string).  Future values MUST be assigned using the Standards Action policy defined by <xref target="RFC8126" format="default"/>.  The following initial values are assigned by this document:</t>
      <t>
0: ACP Zone Addressing Sub-Scheme (ACP RFC  
1: ACP Vlong Addressing Sub-Scheme (ACP RFC <xref target="addr-scheme" format="default"/>) / ACP Manual Addressing Sub-Scheme (ACP RFC <xref target="manual-scheme" format="default"/>)
<xref target="Vlong" format="default"/>) 
</t>
    </section>
    <!-- iana -->
    <section anchor="ack" numbered="true" toc="default">
      <name>Acknowledgements</name>
      <t>This work originated from an Autonomic Networking project at Cisco Systems, which started in early 2010.  Many people contributed to this project and the idea of the Autonomic Control Plane, amongst which (in alphabetical order): Ignas Bagdonas, Parag Bhide, Balaji BL, Alex Clemm, Yves Hertoghs, Bruno Klauser, Max Pritikin, Michael Richardson, Ravi Kumar Vadapalli.</t>
      <t>Special thanks to Brian Carpenter, Elwyn Davies, Joel Halpern and Sheng Jiang for their thorough reviews.</t>
      <t>Many thanks Ben Kaduk, Roman Danyliv and Eric Rescorla for their thorough SEC AD reviews and to Valery Smyslov, Tero Kivinen, Paul Wouters and Yoav Nir for review of IPsec and IKEv2 parameters and helping to understand those and other security protocol details better.</t>
      <t>Further input, review or suggestions were received from: Rene Struik, Benoit Claise, William Atwood and Yongkang Zhang.</t>
    </section>
    <!-- ack -->

    <section anchor="contributors" numbered="true" toc="default">
      <name>Contributors</name>

        <t>For all things GRASP including validation code, ongoing document text support and technical input.</t>

        <contact fullname="Brian Carpenter" initials="B. E." surname="Carpenter">
          <organization abbrev="Univ. of Auckland"/>
          <address>
            <postal>
              <street>School of Computer Science</street>
              <street>University of Auckland</street>
              <street>PB 92019</street>
              <city>Auckland</city>
              <region/>
              <code>1142</code>
              <country>New Zealand</country>
            </postal>
            <email>brian.e.carpenter@gmail.com</email>
          </address>
        </contact>

        <t>For RPL contributions and all things BRSKI/bootstrap including validation code, ongoing document text support and technical input.</t>

    <contact fullname="Michael C. Richardson" initials="M." surname="Richardson">
      <organization abbrev="Sandelman">Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </contact>

        <t>For the RPL technology choices and text.</t>

   <contact initials="P" surname="Thubert" fullname="Pascal Thubert">
      <organization abbrev="Cisco Systems">Cisco Systems, Inc</organization>
      <address>
         <postal>
            <street>Building D</street>
            <street>45 Allee des Ormes - BP1200 </street>
            <city>MOUGINS - Sophia Antipolis</city>
            <code>06254</code>
            <country>FRANCE</country>
         </postal>
         <phone>+33 497 23 26 34</phone>
         <email>pthubert@cisco.com</email>
      </address>
   </contact>

    </section>
    <!-- contributors -->

    <section anchor="changes" numbered="true" toc="default">
      <name>Change log [RFC Editor: Please remove]</name>
      <section numbered="true" toc="default">
        <name>Summary of changes since entering IESG review</name>
        <t>This text replaces the prior changelog with a summary to provide guidance for further IESG review.</t>
        <t>Please see revision -21 for the individual changelogs of prior versions .</t>
        <section numbered="true" toc="default">
          <name>Reviews (while in IESG review status) / status</name>
          <t>This document entered IESG review with version -13. It has since seen the following reviews:</t>
          <t/>
          <t>IESG: Original owner/Yes: Terry Manderson (INT).</t>
          <t>IESG: No Objection: Deborah Brungard (RTG), Alissa Cooper (GEN), Warren Kumari (OPS), Mirja Kuehlewind (TSV), Alexey Melnikov (ART), Adam Roach (ART).</t>
          <t>IESG: No Objection, not counted anymore as they have left IESG: Ben Campbell (ART), Spencer Dawkins (TSV).</t>
          <t>IESG: Open DISCUSS hopefully resolved by this version: Eric Rescorla (SEC, left IESG), Benjamin Kaduk (SEC).</t>
          <t>Other: Michael Richardson (WG), Brian Carpenter (WG), Pascal Thubert (WG), Frank Xialiang (WG), Elwyn Davies (GEN), Joel Halpern (RTGdir), Yongkang Zhang (WG), William Atwood (WG).</t>
        </section>
        <section numbered="true" toc="default">
          <name>BRSKI / ACP registrar related enhancements</name>
          <t>Only after ACP entered IESG review did it become clear that the in-progress BRSKI document would not provide all the explanations needed for ACP registrars as expected earlier by ACP authors. Instead, BRSKI will only specify a subset of required ACP behavior related to certificate handling and registrar. There, it became clear that the ACP draft should specify generic ACP registrar behavior independent of BRSKI so ACP could be implemented with or without BRSKI and any manual/proprietary or future standardized BRSKI alternatives (for example via NetConf) would understand the requirements for ACP registrars and its certificate handling.</t>
          <t>This lead to additional text about ACP registrars in the ACP document:</t>
          <t>1. Defined relationship ACP / ANI (ANI = ACP + BRSKI).</t>
          <t>6.1.4 (new) Overview of TA required for ACP.</t>
          <t>6.1.5.5 Added explanations/requirements for Re-enrollment.</t>
          <t>6.10.7 Normative requirements for ACP registrars (BRSKI or not).</t>
          <t>10.2 Operational expectations against ACP registrars (BRSKI or not).</t>
        </section>
        <section numbered="true" toc="default">
          <name>Normative enhancements since start of IESG review</name>
          <t>In addition to above ACP registrar / BRSKI related enhancements there is a range of minor normative (also explanatory) enhancements since the start of IESG review:</t>
          <t>6.1.1 Hex digits in ACP domain information field now upper-case (no specific reason except that both options are equally good, but capitalized ones are used in rfc5234).</t>
          <t>6.1.5.3 Added explanations about CRLs.</t>
          <t>6.1.5.6 Added explanations of behavior under failing certificates.</t>
          <t>6.1.2 Allow ACP adddress '0' in ACP domain information field: presence of address indicates permission to build ACP secure channel to node, 0 indicates that the address of the node is assigned by (future) other means than certificate.  Non-autonomic nodes have no address at all (that was in -13), and can only connect via ACP connect interfaces to ACP.</t>
          <t>6.1.3 Distinction of real ACP nodes (with address) and those with domain certificate without address added as a new rule to ACP domain membership check.</t>
          <t>6.6 Added throttling of secure-channel setup attempts.</t>
          <t>6.11.1.14 Removed requirement to handle unknown destination ACP traffic in low-end nodes that would never be RPL roots.</t>
          <t>6.12.5 Added recommendation to use IPv6 DAD.</t>
          <t>6.1.1, 6.7.1.1, 6.7.2, 6.7.3, 6.8.2 Various refined additional certificate, secure channel protocol (IPsec/IKEv2 and DTLS) and ACP GRASP TLS protocol parameter requirements to ensure interoperating implementations (from SEC-AD review).</t>
        </section>
        <section numbered="true" toc="default">
          <name>Explanatory enhancements since start of IESG review</name>
          <t>Beyond the functional enhancements from the previous two sections, the mayority of changes since -13 are additional explanations from review feedback, textual nits and restructuring - with no functional requirement additions/changes.</t>
          <t>1.1 Added "applicability and scope" section with summarized explanations.</t>
          <t>2.Added in-band vs. out-of-band management definitions.</t>
          <t>6.1.2 (was 6.1.1) expanded explanations of reasoning for elements of the ACP domain information field.</t>
          <t>6.1.3 refined explanations of ACP domain membership check and justifications for it.</t>
          <t>6.5 Elaborated step-by-step secure channel setup.</t>
          <t>6.10  Additional explanations for addressing modes, additional table of addressing formats (thanks MichaelR).</t>
          <t>6.10.5 introduced 'F' bit position as a better visual representation in the Vlong address space.</t>
          <t>6.11.1.1 extensive overhaul to improve readability of use of RPL (from IESG feedback of non-routing/RPL experts).</t>
          <t>6.12.2 Added caution about unconfiguring Data-Plane IPv6 addresses and impact to ACP (limitation of current ACP design, and pointint to more details in 10.2).</t>
          <t>10.4 New explanations / summary of configurations for ACP (aka: all config is undesirable and only required for integrating with non-autonomic components, primarily ACP-connect and Registrars).</t>
          <t>11. Textually enhanced / better structured security considerations section after IESG security review.</t>
          <t>A. (new) Moved all explanations and discussions about futures from section 10 into this new appendix. This text should not be removed because it captures a lot of repeated asked questions in WG and during reviews and from users, and also captures ideas for some likely important followup work. But none of this is relevant to implementing (section 6) and operating (section 10) the ACP.</t>
        </section>
      </section>
      <section numbered="true" toc="default">
        <name>draft-ietf-anima-autonomic-control-plane-29</name>
        <t>Discuss/Comments from Barry Leiba:</t>
        <t>Various editorial nits - thanks.</t>
        <t>6.1 New section pulling in TLS requirements, no need anymore to duplicat for ACP GRASP, EST, BRSKI (ACP/ANI nodes) and (if desired) OCSP/CRLDP. Added rule to start use secure channel only after negotiation has finished. Added rules not to optimize negotiation across multiple L2 interfaces to the same peer.</t>
        <t>6.6 Changed role names in secure channel negotiation process: Alice/Bob -> Decider/Follower. Explanation enhancements. Added definition for ACP nodes with "0" address.</t>
        <t>6.8.3 Improved explanation how IKEv2 forces preference of IPsec over GRE due to ACP IPsec profiles being Tunneled vs. Transport.</t>
        <t>6.8.4 Limited mentioning of DTLS version requirements to this section.</t>
        <t>6.9.2 Removed TLS requirements, they are now in 6.1.</t>
        <t>6.10.6 Removed explanation of IANA allocation requirement. Redundant - already in IANA section, and was seen as confusing.</t>
        <t>8.1.1 Clarified that there can be security impacts when weakening directly connected address RPF filtering for ACP connect interfaces.</t>
        <t></t>
        <t>Discuss/Comments from Ben Kaduk:</t>
        <t>Many good editorial improvements - thanks!.</t>
        <t>5. added explanation of what to do upon failed secure channel establishment.</t>
        <t>6.1.1. refined/extended cert public cey crypto algo and better distinguished algo for the keys of the cert and the key of the signer.</t>
        <t>6.1.1. and following: explicitly defining "serialNumber" to be the X.520 subject name serialNumber, not the certificate serial Number.</t>
        <t> 6.1.1. emhasize additional authorization step for EST servers (id-kp-cmcRA).</t>
        <t>6.1.2 changed AcpNodeName ABNF to again use 32HEXDIG instead of self-defined variation, because authors overlooked that ABNF is case agnostic (which is fine). Added recommendation to encode as lower case. Added full ABNF encoding for extensions (any characters as in "atoms" except the new "+" separator).</t>
        <t>6.1.5.3. New text to explain reason for use of HTTPS (instead of HTTP) for CRLDP and when and how to use HTTPS then.</t>
        <t>6.1.5.5. added text explaning why/how and when to maintain TA data upon failing cert renewal (one version with BRSKI, one version with other, ess secure bootstrap protocols).</t>
        <t>6.3. new text and requirement about the signaling of transport ports in DULL GRASP - benefits (no well-known ports required), and problems (additional DoS attack vector, albeit not worse than pre-existing ones, depending on setup of L2 subnets.).</t>
        <t>6.7.3.1.1. Specified AUTH_HMAC_SHA2_256_128 (as the ESP authentication algorithm).</t>
        <t>6.8.2. Added recommendations for TLS_AES_256_GCM_SHA384, TLS_CHACHA20_POLY1305_SHA256 when supporting TLS 1.3.</t>
        <t>8.2.2. Added explanation about downgrade attack across configured ACP tunnels and what to do against it.</t>
        <t>9.3.5.2. Rewrote most of section as it originally was too centric on BRSKI. Should now well describe expectations against automated bootstrap. Introduces new requirement not to call node as in support of ANI if is ALSO has TOFU bootstrap.</t>
        <t>11. Expanded text about malicious EST servers. Added paragraph about ACP secure channel downgrade attacks. Added paragraphs about private PKI as a core to allow security against fake certificates, added paragraph about considerationsproblems when using public PI.</t>
        <t>A.10.9 New appendix suggesting how to discover ACP secure channel negotiation downgrade attacks.</t>
        <t></t>
        <t>Discuss from Roman Dayliw:</t>
        <t>6.1.5.1 - Added requirement to only announce SRV.est when a working CA connection.</t>
        <t>15 - Amended security considerations with text about registrar dependencies, security of IDevID/ACP-certificate, EST-Server and GRASP for EST server discovery.</t> 
        <t>Other:</t>
        <t>Conversion to XML v3. Solved empty () taxonomy xref problems. Various formatting fixes for v3.</t>
        <t>Added contributors section.</t>
      </section>
      <section numbered="true" toc="default">
        <name>draft-ietf-anima-autonomic-control-plane-28</name>
        <t>IESG review Roman Danyliw:</t>
        <t>6. Requested additional text elaborating misconfiguration plus attack vectors.</t>
        <t>6.1.3.1 Added paragraph about unsecured NTP as basis for time in the absence of other options.</t>
        <t>6.7.2 reworded text about additional secure channel protocol reqiurements.</t>
        <t> 6.7.3.1.2. Added requirement for ACP nodes supporting IKEv2 to support RFC8247 (not sure how that got dropped from prior versions.</t>
        <t>Replaced minimum crypto requirements definition via specific AES options with more generic "symmetric key/hash strength" requirements.</t>
        <t>6.10.7.3. Added example how to derive addressing scheme from IDevID (PID). Added explanation how to deal with non-persistant registrar address database (hint: it sucks or is wasteful, what did you expect).</t>
        <t>8.1.1. Added explanation for 'Physical controlled/secured'.</t>
        <t>8.1.5. Removed 'Physical controlled/secured' text, refer back to 8.1.1.</t>
        <t>8.2.1. Fixed ABNF 'or' syntax line.</t>
        <t>9.3.2. Added explanation of remote management problem with interface "down" type commands.</t>
        <t>10.2.1. Added explanations for attacks from impaired ACP nodes.</t>
        <t>11. Rewrote intro paragraph. Removed text referring to enrollment/registrars as they are out of scope of ACP (dependencies only).</t>
        <t>11. Added note about need for new protocols inside ACP to use end-to-end authentication.</t>
        <t>11. Rewrote paragraph about operator mistakes so as to be actionably. Operators must not make mistakes - but ACP minimizes the mistakes they can make.</t>
        <t>ACP domain certificate -&gt; ACP certificate.</t>
        <t>Various other cosmetic edits (thanks!) and typo fixes (sorry for not running full spell check for every version. Will definitely do before RFC editor).</t>
        <t>Other:</t>
        <t>6.12.5.2.1./6.12.5.2.2. Added text explaining link breakage wrt. RTL (came about re-analyzing behavior after question about hop count).</t>
        <t>Removed now unnecessary references for earlier rrc822Name otherName choice.</t>
      </section>
      <section numbered="true" toc="default">
        <name>draft-ietf-anima-autonomic-control-plane-27</name>
        <t>Too many revisions with too many fixes. Lets do a one-word change revision for a change now if it helps to accelerate the review process.</t>
        <t>Added "subjectAltName /" to make it unambiguous that AcpNodeName is indeed a SAN (from Russ).</t>
      </section>
      <section numbered="true" toc="default">
        <name>draft-ietf-anima-autonomic-control-plane-26</name>
        <t>Russ Housley review of -25.</t>
        <t>1.1 Explicit reference for TLS 1.2 RFC.</t>
        <t>2.  Changed term of "ACP Domain Information" to AcpNodeName (ASN.1) / acp-node-name (ABNF), also through rest of document.</t>
        <t>2.  Improved CA behavior definition. changed IDevID/LDevID to IDevID/LDevID certificate to be more unambiguous.</t>
        <t>2.  Changed definition of root CA to just refer to how its used in RFC7030 CA root key update, because thats the only thing relevant to ACP.</t>
        <t>6.1.1 Moved ECDH requirement to end of text as it was not related to the subject of the initial paragraps. Likewise reference to CABFORUM.</t>
        <t>6.1.1 Reduced cert key requirements to only be MUST for certs with 2048 RSA public key and P-256 curves. Reduced longer keys to SHOULD.</t>
        <t>6.1.2 Changed text for conversion from rfc822Name to otherName / AcpNode, removed all the explanations of benefits coming with rfc822Name *sob* *sob* *sob*.</t>
        <t>6.1.2.1 New ASN.1 definition for otherName / AcpNodeName.</t>
        <t>6.1.3 Fixed up text. re the handling of missing connectivity for CRLDP / OCSP.</t>
        <t>6.1.4 Fixed up text re. inability to use public CA to situation with otherName / AcpNodeName (no more ACME rfc822Name validation for us *sob* *sob* *sob*).</t>
        <t>12. Added ASN.1 registration requests to IANA section.</t>
        <t>Appenices. Minor changes for rfc822Name to otherName change.</t>
        <t>Various minor verbal fixes/enhancements.</t>
      </section>
      <section numbered="true" toc="default">
        <name>draft-ietf-anima-autonomic-control-plane-25</name>
        <t>Crypto parameter discuss from Valery Smyslov and Paul Wouters and resulting changes.</t>
        <t>6.7.2 Moved Michael Richardson suggested diagnostic of signaling TA from IPsec section to this general requirements section and added explanation how this may be inappropriate if TA payload is considered secret by TA owner.</t>
        <t>6.7.3.1 Added traffic selectors for native IPsec. Improved text explanation.</t>
        <t>6.7.3.1.2 removed misleading text about signaling TA when using intermediate certs.</t>
        <t>6.7.3.1.2 Removed requirement for 'PKCS #7 wrapped X.509 certificate' requirement on request of Valery Smyslov as it is not defined in RFC7296 and there are enough options mandated in RFC7296. Replaced with just informative text to educate readers who are not IPsec experts what the mandatory option in RFC7296 is that allows to signal certificates.</t>
        <t>6.7.3.1.2 Added SHOULD requirement how to deal with CERTREQ so that 6.7.2 requirement for TA diagnostics will work in IKEv2 (ignoring CERTREQ is permitted by IKEv2). Added explanation how this will result in TA cert diagnostics.</t>
        <t>6.7.3.1.2 Added requirement for IKEv2 to operate on link-local addresses for ACP so at to assume ACT cert as the only possible authenticator - to avoid potentialy failing section from multiple available certs on a router.</t>
        <t>6.7.3.1.2 fixed PKIX- style OID to ASN.1 object AlgorithmIdentifier (Paul).</t>
        <t>6.7.3.2 Added IPsec traffic selectors for IPsec with GRE.</t>
        <t>6.7.5 Added notion that IPsec/GRE MAY be preferred over IPsec/native. Luckily IPsec/native uses tunneling, whereas IPsec/GRE uses transport mode, and there is a long discuss whether it is permitted to even build IPsec connectings that only support transports instead of always being able to fall back to tunnel mode. Added explanatory paragraph why ACP nodes may prefer GRE over native (wonder how that was missing..).</t>
        <t>9.1.1 Added section to explain need for secure channel peer diagnostics via signaling of TA. Four examples given.</t>
        <t>Paul Wouters mentioned that ipkcs7 had to be used in some interop cases with windows CA, but that is an issue of ACP Registrar having to convert into PKCS#7 to talk to a windows CA, and this spec is not concerned with that, except to know that it is feasible, so not mentioned in text anywhere, just tracking discussion here in changelog.</t>
        <t/>
        <t>Michael Richardson:</t>
        <t>3.1.3 Added point in support of rfc822address that CA may not support to sign certificates with new attributes (such as new otherName).</t>
        <t/>
        <t>Michael Richardson/Brian Carpenter fix:</t>
        <t>6.1.5.1/6.3 Fixed GRASP examples.</t>
        <t/>
        <t>Joe Halpern review:</t>
        <t>1. Enhanded introduction text for in-band and of out-of-band, explaining how ACP is an in-band network aiming to achieve all possible benefits of an out-of-band network.</t>
        <t>1. Comprehensive explanation for term Data-Plane as it is only logically following pre-established terminology on a fully autonomic node, when used for existing nodes augmented with ACP, Data-Plane has more functionality than usually associated with the term.</t>
        <t>2. Removed explanatory text for Data-Plane, referring to section 1.</t>
        <t>2. Reduced explanation in definition of in-band (management/signaling), out-of-band-signaling, now pointing to section 1.</t>
        <t>5. Rewrote a lot of the steps (overview) as this text was not reviewed for long time. Added references to normative section for each step to hopefully avoid feedback of not explaining terms used (really not possible to give good summary without using forward references).</t>
        <t>2. Separate out-of-band-management definition from virtual out-of-band-management definition (later one for ACP).</t>
        <t>2. Added definitions for RPI and RPL.</t>
        <t>6.1.1. added note about end-to-end authentication to distinguish channel security from overall ACP security model.</t>
        <t>6.5 Fixed bugs in channel selection signaling step description (Alice vs. Bob).</t>
        <t>6.7.1 Removed redundant channel selection explanation.</t>
        <t>6.10.3 remove locator/identifier terminology from zone addressing scheme description (unnecessary), removed explanations (now in 9.4), simplified text, clarified requirement for Node-ID to be unique, recommend to use primarily zone 0.</t>
        <t>6.10.3.1 Removed. Included a lot of insufficient suggestions for future stanards extensions, most of it was wrong or would need to be revisited by WG anyhow. Idea now (just here for comment): Announce via GRASP Zone-ID (e.g.: from per-zone edge-node/registrar) into a zone of the ACP so all nodes supporting the scheme can automatically self-allocate the Zone-ID.</t>
        <t>6.11.1.1 (RPL overview), eliminated redundant text.</t>
        <t>6.11.1.1.1 New subsection to better structure overview.</t>
        <t>6.11.1.1.2 New subsection to better group overview, replaced TTL explanation (just the symptom) with hopefully better reconvergence text (intent of the profile) for the ACP RPL profile.</t>
        <t>6.11.1.1.6 Added text to explain simple choice for rank_factor.</t>
        <t>6.11.1.13 moved explanation for RPI up into 6.11.1.1.</t>
        <t>6.12.5.1 rewrote section for ACP Loopback Interface.</t>
        <t>9.4 New informative/informational section for partial or incremental adoption of ACP to help understand why there is the Zone interface sub-scheme, and how to use it.</t>
        <t/>
        <t>Unrelated fixes:</t>
        <t>Ask to RFC editor to add most important abbreviations to RFC editor abbreviation list.</t>
        <t>6.10.2 changed names in ACP addressing scheme table to be less suggestive of use.</t>
        <t>Russ Hously review:</t>
        <t>2. Fixed definition of "Enrollment", "Trust Anchor", "CA", and "root CA". Changed "Certificate Authority" to "Certification Authority" throughout the document (correct term according to X.509).</t>
        <t>6.1 Fixed explanation of mutual ACP trust.</t>
        <t>6.1.1 s/X509/X509v3/.</t>
        <t>6.1.2 created bulleted lists for explanations and justifications for choices of ACP certificate encoding. No semantic changes, just to make it easier to refer to the points in discussions (rfcdiff seems to have a bug showing text differences due to formatting changes).</t>
        <t>6.1.3 Moved content of rule #1 into previous rule #2 because certification chain validation does imply validation of lifetime. numbers of all rules reduced by 1, changed hopefully all references to the rule numbers in the document.</t>
        <t>      Rule #3, Hopefully fixed linguistic problem self-contradiction of MUST by lower casing MUST in the explanation part and rewriting the condition when this is not applicable.</t>
        <t>6.1.4 Replaced redundant term "Trust Point" (TP) with Trust Anchor (TA"). Replaced throughout document Trust Anchor with abbreviation TA.</t>
        <t>      Enhanced several sentences/rewrote paragraphs to make explanations clearer.</t>
        <t>6.6 Added explanation how ACP nodes must throttle their attempts for connection making purely on the result of their own connection attempts, not based on those connections where they are responder.</t>
        <t/>
      </section>
      <section numbered="true" toc="default">
        <name>draft-ietf-anima-autonomic-control-plane-24</name>
        <t>Leftover from -23 review by Eric Vyncke:</t>
        <t>Swapping sections 9 and 10, section 9 was meant to be at end of document and summarize. Its not meant to be misinterpreted as introducing any new information. This did happen because section 10 was added after section 9.</t>
      </section>
      <section numbered="true" toc="default">
        <name>draft-ietf-anima-autonomic-control-plane-23</name>
        <t>Note: big rfcdiff of TOC is an rfcdiff bug, changes really minimal.</t>
        <t>Review of IPsec security with Mcr and ipsec mailing list.</t>
        <t>6.7.1 - new section: Moved general considerations for secure channel protocols here, refined them.</t>
        <t>6.7.2 - new section: Moved common requirements for secure channel protocols here, refined them.</t>
        <t>6.7.3.1.1. - improved requirements text related to RFC8221, better explamations re. HW acceleration issues.</t>
        <t>6.7.3.1.2. - improved requirements text related to RFC8247, (some requirements still discussed to be redundant, will be finalized in next weeks.</t>
        <t/>
        <t>Eric Vyncke review of -21:</t>
        <t> Only noting most important changes, long list of smaller text/readability enhancements.</t>
        <t>2. - New explanation of "normative" , "informational" section title tags. alphabetic reordering of terms, refined definitions for CA, CRL. root CA.</t>
        <t>6.1.1. - explanation when IDevID parameters may be copied into LDevID.</t>
        <t>6.1.2. - Fixed hex digits in ACP domain information to lower case.</t>
        <t>6.1.3.1. - New section on Realtime clock and Time Validation.</t>
        <t>6.3 - Added explanation that DTLS means &gt;= version 1.2 (not only 1.2).</t>
        <t>6.7 - New text in this main section explaing relationship of ACP secure channels and ACP virtual interfaces - with forward references to virtual interface section.</t>
        <t>6.8.2 - reordered text and picture, no text change.</t>
        <t>6.10.7.2 - describe first how Registrar-ID can be allocted for all type of registrars, then refined text for how to potentially use MAC addresses on physical registrars.</t>
        <t>6.11.1.1 - Added text how this profile does not use Data-Plane artefacts (RPI) because hadware forwarding. This was previously hidden only later in the text.</t>
        <t>6.11.1.13. - Rewrote RPL Data-Plane artefact text. Provide decoder ring for abbreviations and all relevant RFCs.</t>
        <t>6.12.5.2. - Added more explicit text that secure channels are mapped into virtual interfaces, moved different type of interfaces used by ACP into seperate subsections to be able to refer to them.</t>
        <t>7.2 - Rewrote/refined text for ACP on L2, prior text was confusing and did not well explain why ACP for L2/L3 switches can be implemented without any L2 (HW) changes. Also missing explanation of only running GRASP untagged when VLANs are used.</t>
        <t>8.1.1 - Added requirement for ACP Edge nodes to allow configurable filtering of  IPv6 RPI headers.</t>
        <t>11. - (security section). Moved explanation of address stealing from 7.2 to here.</t>
      </section>
      <section numbered="true" toc="default">
        <name>draft-ietf-anima-autonomic-control-plane-22</name>
        <t>Ben Kaduk review of -21:</t>
        <t>RFC822 encoding of ACP domain information:</t>
        <t>6.1.2 rewrote text for explaining / justifying use of rfc822name as identifier for node CP in certificate (was discussed in thread, but badly written in prior versions).</t>
        <t>6.1.2 Changed EBNF syntax to use "+" after rfcSELF because that is the known primary name to extensions separator in many email systems ("." was wrong in prior versions).</t>
        <t>6.1.2 Rewrote/improved explanations for use of rfc822name field to explain better why it is PKIX compliant and the right thing to do.</t>
        <t>Crypto parameters for IPsec:</t>
        <t>6.1 - Added explanation of why manual keying for ACP is not feasible for ACP. Surprisingly, that text did not exist. Referred to by IPsec text (6.7.1), but here is the right place to describe the reasoning.</t>
        <t>6.1.2 - Small textual refinement referring to requirements to authenticate peers (for the special cases of empty or '0' ACP address in ACP domain information field.</t>
        <t>6.3 - To better justify Bens proposed change of secure channel protocol being IPsec vs. GRASP objective being IKEv2, better explained how protocol indicated in GRASP objective-value is name of protocol used to negotiate secure channel, use example of IKEv2 to negotiate IPsec.</t>
        <t>6.7.1 - refinemenet similar to 6.3.</t>
        <t> - moved new paragraph from Bens pull request up from 6.7.1.1 to 6.7.1 as it equally applies to GRE encapped IPsec (looks nicer one level up).</t>
        <t>- created subsections 6.7.1.1 (IPsec/ESP) / 6.7.1.2 (IKEv2) to clearer distinguish between these two requirements blocks.</t>
        <t>- Refined the text in these two sections to hopefully be a good answer to Valery's concern of not randomnly mocking with existing requirements docs (rfc8247 / rfc8221).</t>
        <t>6.7.1.1.1 - IPsec/ESP requirements section:</t>
        <t>- MUST support rfc8221 mandatory EXCEPT for the superceeding requirements in this section. Previously, this was not quite clear from the text.</t>
        <t>- Hopefully persuasive explanations about the requirements levels for ENCR_AES_GCM_16, ENCR_AES_CBC, ENCR_AES_CCM_8 and ENCR_CHACHA20_POLY1305: Restructured text for why not ENCR_AES_CBC (was in prior version, just not well structured), added new expanations for ENCR_AES_CCM_8 and ENCR_CHACHA20_POLY130.</t>
        <t>- In simple terms, requirements for ENCR_AES_CBC, ENCR_AES_CCM_8, ENCR_CHACHACHA are SHOULD when they are implementable with rqual or faster performancce than ENCR_AES_GCM_16.</t>
        <t>- Removed text about "additional rfc8221" reqiurements MAY be used. Now the logic is that all other requirements apply. Hopefully we have written enough so that we prohibited downgrades.</t>
        <t>6.7.1.1.2 - RFC8247 requirements:</t>
        <t>- Added mandate to support rfc8247, added explanation that there is no "stripping down" requirement, just additional stronger requirements to mandate correct use of ACP certificartes during authentication.</t>
        <t>- refined text on identifying ACP by IPv6 address to be clearer: Identifying in the context of IKEv2 and cases for '0' in ACP domain information.</t>
        <t>- removed last two paragraphs about relationship to rfc8247, as his is now written in first paragraph of the section.</t>
        <t>End of Ben Kaduk review related fixes.</t>
        <t> Other:</t>
        <t>Forgot to update example of ACP domain information to use capitalized hex-digits as required by HEXDIG used.</t>
        <t>Added reference to RFC8316 (AN use-cases) to beginning of section 3 (ACP use cases).</t>
        <t>Small Enhanced IPsec parameters description / requirements fixes (from Michael Richardson).</t>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>Normative References</name>
      <reference anchor="RFC1034" target="https://www.rfc-editor.org/info/rfc1034">
        <front>
          <title>Domain names - concepts and facilities</title>
          <seriesInfo name="DOI" value="10.17487/RFC1034"/>
          <seriesInfo name="RFC" value="1034"/>
          <seriesInfo name="STD" value="13"/>
          <author initials="P.V." surname="Mockapetris" fullname="P.V. Mockapetris">
            <organization/>
          </author>
          <date year="1987" month="November"/>
          <abstract>
            <t>This RFC is the revised basic definition of The Domain Name System.  It obsoletes RFC-882.  This memo describes the domain style names and their used for host address look up and electronic mail forwarding.  It discusses the clients and servers in the domain name system and the protocol used between them.</t>
          </abstract>
        </front>
      </reference>

      <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119">
        <front>
          <title>Key words for use in RFCs to Indicate Requirement Levels</title>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="BCP" value="14"/>
          <author initials="S." surname="Bradner" fullname="S. Bradner">
            <organization/>
          </author>
          <date year="1997" month="March"/>
          <abstract>
            <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
          </abstract>
        </front>
      </reference>

      <reference anchor="RFC3810" target="https://www.rfc-editor.org/info/rfc3810">
        <front>
          <title>Multicast Listener Discovery Version 2 (MLDv2) for IPv6</title>
          <seriesInfo name="DOI" value="10.17487/RFC3810"/>
          <seriesInfo name="RFC" value="3810"/>
          <author initials="R." surname="Vida" fullname="R. Vida" role="editor">
            <organization/>
          </author>
          <author initials="L." surname="Costa" fullname="L. Costa" role="editor">
            <organization/>
          </author>
          <date year="2004" month="June"/>
          <abstract>
            <t>This document updates RFC 2710, and it specifies Version 2 of the ulticast Listener Discovery Protocol (MLDv2).  MLD is used by an IPv6 router to discover the presence of multicast listeners on directly attached links, and to discover which multicast addresses are of interest to those neighboring nodes.  MLDv2 is designed to be interoperable with MLDv1.  MLDv2 adds the ability for a node to report interest in listening to packets with a particular multicast address only from specific source addresses or from all sources except for specific source addresses.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC4191" target="https://www.rfc-editor.org/info/rfc4191">
        <front>
          <title>Default Router Preferences and More-Specific Routes</title>
          <seriesInfo name="DOI" value="10.17487/RFC4191"/>
          <seriesInfo name="RFC" value="4191"/>
          <author initials="R." surname="Draves" fullname="R. Draves">
            <organization/>
          </author>
          <author initials="D." surname="Thaler" fullname="D. Thaler">
            <organization/>
          </author>
          <date year="2005" month="November"/>
          <abstract>
            <t>This document describes an optional extension to Router Advertisement messages for communicating default router preferences and more-specific routes from routers to hosts.  This improves the ability of hosts to pick an appropriate router, especially when the host is multi-homed and the routers are on different links.  The preference values and specific routes advertised to hosts require administrative configuration; they are not automatically derived from routing tables.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC4193" target="https://www.rfc-editor.org/info/rfc4193">
        <front>
          <title>Unique Local IPv6 Unicast Addresses</title>
          <seriesInfo name="DOI" value="10.17487/RFC4193"/>
          <seriesInfo name="RFC" value="4193"/>
          <author initials="R." surname="Hinden" fullname="R. Hinden">
            <organization/>
          </author>
          <author initials="B." surname="Haberman" fullname="B. Haberman">
            <organization/>
          </author>
          <date year="2005" month="October"/>
          <abstract>
            <t>This document defines an IPv6 unicast address format that is globally unique and is intended for local communications, usually inside of a site. These addresses are not expected to be routable on the global Internet.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC4291" target="https://www.rfc-editor.org/info/rfc4291">
        <front>
          <title>IP Version 6 Addressing Architecture</title>
          <seriesInfo name="DOI" value="10.17487/RFC4291"/>
          <seriesInfo name="RFC" value="4291"/>
          <author initials="R." surname="Hinden" fullname="R. Hinden">
            <organization/>
          </author>
          <author initials="S." surname="Deering" fullname="S. Deering">
            <organization/>
          </author>
          <date year="2006" month="February"/>
          <abstract>
            <t>This specification defines the addressing architecture of the IP Version 6 (IPv6) protocol.  The document includes the IPv6 addressing model, text representations of IPv6 addresses, definition of IPv6 unicast addresses, anycast addresses, and multicast addresses, and an IPv6 node's required addresses.</t>
            <t>This document obsoletes RFC 3513, "IP Version 6 Addressing Architecture".   [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC4301" target="https://www.rfc-editor.org/info/rfc4301">
        <front>
          <title>Security Architecture for the Internet Protocol</title>
          <seriesInfo name="DOI" value="10.17487/RFC4301"/>
          <seriesInfo name="RFC" value="4301"/>
          <author initials="S." surname="Kent" fullname="S. Kent">
            <organization/>
          </author>
          <author initials="K." surname="Seo" fullname="K. Seo">
            <organization/>
          </author>
          <date year="2005" month="December"/>
          <abstract>
            <t>This document describes an updated version of the "Security Architecture for IP", which is designed to provide security services for traffic at the IP layer.  This document obsoletes RFC 2401 (November 1998).  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>

      <reference anchor="RFC4492" target="https://www.rfc-editor.org/info/rfc4492">
        <front>
          <title>Elliptic Curve Cryptography (ECC) Cipher Suites for Transport Layer Security (TLS)</title>
          <seriesInfo name="DOI" value="10.17487/RFC4492"/>
          <seriesInfo name="RFC" value="4492"/>
          <author initials="S." surname="Blake-Wilson" fullname="S. Blake-Wilson">
            <organization/>
          </author>
          <author initials="N." surname="Bolyard" fullname="N. Bolyard">
            <organization/>
          </author>
          <author initials="V." surname="Gupta" fullname="V. Gupta">
            <organization/>
          </author>
          <author initials="C." surname="Hawk" fullname="C. Hawk">
            <organization/>
          </author>
          <author initials="B." surname="Moeller" fullname="B. Moeller">
            <organization/>
          </author>
          <date year="2006" month="May"/>
          <abstract>
            <t>This document describes new key exchange algorithms based on Elliptic Curve Cryptography (ECC) for the Transport Layer Security (TLS) protocol.  In particular, it specifies the use of Elliptic Curve Diffie-Hellman (ECDH) key agreement in a TLS handshake and the use of Elliptic Curve Digital Signature Algorithm (ECDSA) as a new authentication mechanism.  This memo provides information for the Internet community.</t>
          </abstract>
        </front>
      </reference>

      <reference anchor="RFC4861" target="https://www.rfc-editor.org/info/rfc4861">
        <front>
          <title>Neighbor Discovery for IP version 6 (IPv6)</title>
          <seriesInfo name="DOI" value="10.17487/RFC4861"/>
          <seriesInfo name="RFC" value="4861"/>
          <author initials="T." surname="Narten" fullname="T. Narten">
            <organization/>
          </author>
          <author initials="E." surname="Nordmark" fullname="E. Nordmark">
            <organization/>
          </author>
          <author initials="W." surname="Simpson" fullname="W. Simpson">
            <organization/>
          </author>
          <author initials="H." surname="Soliman" fullname="H. Soliman">
            <organization/>
          </author>
          <date year="2007" month="September"/>
          <abstract>
            <t>This document specifies the Neighbor Discovery protocol for IP Version 6.  IPv6 nodes on the same link use Neighbor Discovery to discover each other's presence, to determine each other's link-layer addresses, to find routers, and to maintain reachability information about the paths to active neighbors.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC4862" target="https://www.rfc-editor.org/info/rfc4862">
        <front>
          <title>IPv6 Stateless Address Autoconfiguration</title>
          <seriesInfo name="DOI" value="10.17487/RFC4862"/>
          <seriesInfo name="RFC" value="4862"/>
          <author initials="S." surname="Thomson" fullname="S. Thomson">
            <organization/>
          </author>
          <author initials="T." surname="Narten" fullname="T. Narten">
            <organization/>
          </author>
          <author initials="T." surname="Jinmei" fullname="T. Jinmei">
            <organization/>
          </author>
          <date year="2007" month="September"/>
          <abstract>
            <t>This document specifies the steps a host takes in deciding how to autoconfigure its interfaces in IP version 6.  The autoconfiguration process includes generating a link-local address, generating global addresses via stateless address autoconfiguration, and the Duplicate Address Detection procedure to verify the uniqueness of the addresses on a link.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC5234" target="https://www.rfc-editor.org/info/rfc5234">
        <front>
          <title>Augmented BNF for Syntax Specifications: ABNF</title>
          <seriesInfo name="DOI" value="10.17487/RFC5234"/>
          <seriesInfo name="RFC" value="5234"/>
          <seriesInfo name="STD" value="68"/>
          <author initials="D." surname="Crocker" fullname="D. Crocker" role="editor">
            <organization/>
          </author>
          <author initials="P." surname="Overell" fullname="P. Overell">
            <organization/>
          </author>
          <date year="2008" month="January"/>
          <abstract>
            <t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC5246" target="https://www.rfc-editor.org/info/rfc5246">
        <front>
          <title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
          <seriesInfo name="DOI" value="10.17487/RFC5246"/>
          <seriesInfo name="RFC" value="5246"/>
          <author initials="T." surname="Dierks" fullname="T. Dierks">
            <organization/>
          </author>
          <author initials="E." surname="Rescorla" fullname="E. Rescorla">
            <organization/>
          </author>
          <date year="2008" month="August"/>
          <abstract>
            <t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC5280" target="https://www.rfc-editor.org/info/rfc5280">
        <front>
          <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
          <seriesInfo name="DOI" value="10.17487/RFC5280"/>
          <seriesInfo name="RFC" value="5280"/>
          <author initials="D." surname="Cooper" fullname="D. Cooper">
            <organization/>
          </author>
          <author initials="S." surname="Santesson" fullname="S. Santesson">
            <organization/>
          </author>
          <author initials="S." surname="Farrell" fullname="S. Farrell">
            <organization/>
          </author>
          <author initials="S." surname="Boeyen" fullname="S. Boeyen">
            <organization/>
          </author>
          <author initials="R." surname="Housley" fullname="R. Housley">
            <organization/>
          </author>
          <author initials="W." surname="Polk" fullname="W. Polk">
            <organization/>
          </author>
          <date year="2008" month="May"/>
          <abstract>
            <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6347" target="https://www.rfc-editor.org/info/rfc6347">
        <front>
          <title>Datagram Transport Layer Security Version 1.2</title>
          <seriesInfo name="DOI" value="10.17487/RFC6347"/>
          <seriesInfo name="RFC" value="6347"/>
          <author initials="E." surname="Rescorla" fullname="E. Rescorla">
            <organization/>
          </author>
          <author initials="N." surname="Modadugu" fullname="N. Modadugu">
            <organization/>
          </author>
          <date year="2012" month="January"/>
          <abstract>
            <t>This document specifies version 1.2 of the Datagram Transport Layer Security (DTLS) protocol.  The DTLS protocol provides communications privacy for datagram protocols.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  The DTLS protocol is based on the Transport Layer Security (TLS) protocol and provides equivalent security guarantees.  Datagram semantics of the underlying transport are preserved by the DTLS protocol.  This document updates DTLS 1.0 to work with TLS version 1.2.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6550" target="https://www.rfc-editor.org/info/rfc6550">
        <front>
          <title>RPL: IPv6 Routing Protocol for Low-Power and Lossy Networks</title>
          <seriesInfo name="DOI" value="10.17487/RFC6550"/>
          <seriesInfo name="RFC" value="6550"/>
          <author initials="T." surname="Winter" fullname="T. Winter" role="editor">
            <organization/>
          </author>
          <author initials="P." surname="Thubert" fullname="P. Thubert" role="editor">
            <organization/>
          </author>
          <author initials="A." surname="Brandt" fullname="A. Brandt">
            <organization/>
          </author>
          <author initials="J." surname="Hui" fullname="J. Hui">
            <organization/>
          </author>
          <author initials="R." surname="Kelsey" fullname="R. Kelsey">
            <organization/>
          </author>
          <author initials="P." surname="Levis" fullname="P. Levis">
            <organization/>
          </author>
          <author initials="K." surname="Pister" fullname="K. Pister">
            <organization/>
          </author>
          <author initials="R." surname="Struik" fullname="R. Struik">
            <organization/>
          </author>
          <author initials="JP." surname="Vasseur" fullname="JP. Vasseur">
            <organization/>
          </author>
          <author initials="R." surname="Alexander" fullname="R. Alexander">
            <organization/>
          </author>
          <date year="2012" month="March"/>
          <abstract>
            <t>Low-Power and Lossy Networks (LLNs) are a class of network in which both the routers and their interconnect are constrained.  LLN routers typically operate with constraints on processing power, memory, and energy (battery power).  Their interconnects are characterized by high loss rates, low data rates, and instability.  LLNs are comprised of anything from a few dozen to thousands of routers.  Supported traffic flows include point-to-point (between devices inside the LLN), point-to-multipoint (from a central control point to a subset of devices inside the LLN), and multipoint-to-point (from devices inside the LLN towards a central control point).  This document specifies the IPv6 Routing Protocol for Low-Power and Lossy Networks (RPL), which provides a mechanism whereby multipoint-to-point traffic from devices inside the LLN towards a central control point as well as point-to-multipoint traffic from the central control point to the devices inside the LLN are supported.  Support for point-to-point traffic is also available.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6551" target="https://www.rfc-editor.org/info/rfc6551">
        <front>
          <title>Routing Metrics Used for Path Calculation in Low-Power and Lossy Networks</title>
          <seriesInfo name="DOI" value="10.17487/RFC6551"/>
          <seriesInfo name="RFC" value="6551"/>
          <author initials="JP." surname="Vasseur" fullname="JP. Vasseur" role="editor">
            <organization/>
          </author>
          <author initials="M." surname="Kim" fullname="M. Kim" role="editor">
            <organization/>
          </author>
          <author initials="K." surname="Pister" fullname="K. Pister">
            <organization/>
          </author>
          <author initials="N." surname="Dejean" fullname="N. Dejean">
            <organization/>
          </author>
          <author initials="D." surname="Barthel" fullname="D. Barthel">
            <organization/>
          </author>
          <date year="2012" month="March"/>
          <abstract>
            <t>Low-Power and Lossy Networks (LLNs) have unique characteristics compared with traditional wired and ad hoc networks that require the specification of new routing metrics and constraints.  By contrast, with typical Interior Gateway Protocol (IGP) routing metrics using hop counts or link metrics, this document specifies a set of link and node routing metrics and constraints suitable to LLNs to be used by the Routing Protocol for Low-Power and Lossy Networks (RPL).   [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6552" target="https://www.rfc-editor.org/info/rfc6552">
        <front>
          <title>Objective Function Zero for the Routing Protocol for Low-Power and Lossy Networks (RPL)</title>
          <seriesInfo name="DOI" value="10.17487/RFC6552"/>
          <seriesInfo name="RFC" value="6552"/>
          <author initials="P." surname="Thubert" fullname="P. Thubert" role="editor">
            <organization/>
          </author>
          <date year="2012" month="March"/>
          <abstract>
            <t>The Routing Protocol for Low-Power and Lossy Networks (RPL) specification defines a generic Distance Vector protocol that is adapted to a variety of network types by the application of specific Objective Functions (OFs).  An OF states the outcome of the process used by a RPL node to select and optimize routes within a RPL Instance based on the Information Objects available; an OF is not an algorithm.</t>
            <t>This document specifies a basic Objective Function that relies only on the objects that are defined in the RPL and does not use any protocol extensions.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6553" target="https://www.rfc-editor.org/info/rfc6553">
        <front>
          <title>The Routing Protocol for Low-Power and Lossy Networks (RPL) Option for Carrying RPL Information in Data-Plane Datagrams</title>
          <seriesInfo name="DOI" value="10.17487/RFC6553"/>
          <seriesInfo name="RFC" value="6553"/>
          <author initials="J." surname="Hui" fullname="J. Hui">
            <organization/>
          </author>
          <author initials="JP." surname="Vasseur" fullname="JP. Vasseur">
            <organization/>
          </author>
          <date year="2012" month="March"/>
          <abstract>
            <t>The Routing Protocol for Low-Power and Lossy Networks (RPL) includes routing information in data-plane datagrams to quickly identify inconsistencies in the routing topology.  This document describes the RPL Option for use among RPL routers to include such routing information.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC7030" target="https://www.rfc-editor.org/info/rfc7030">
        <front>
          <title>Enrollment over Secure Transport</title>
          <seriesInfo name="DOI" value="10.17487/RFC7030"/>
          <seriesInfo name="RFC" value="7030"/>
          <author initials="M." surname="Pritikin" fullname="M. Pritikin" role="editor">
            <organization/>
          </author>
          <author initials="P." surname="Yee" fullname="P. Yee" role="editor">
            <organization/>
          </author>
          <author initials="D." surname="Harkins" fullname="D. Harkins" role="editor">
            <organization/>
          </author>
          <date year="2013" month="October"/>
          <abstract>
            <t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC7296" target="https://www.rfc-editor.org/info/rfc7296">
        <front>
          <title>Internet Key Exchange Protocol Version 2 (IKEv2)</title>
          <seriesInfo name="DOI" value="10.17487/RFC7296"/>
          <seriesInfo name="RFC" value="7296"/>
          <seriesInfo name="STD" value="79"/>
          <author initials="C." surname="Kaufman" fullname="C. Kaufman">
            <organization/>
          </author>
          <author initials="P." surname="Hoffman" fullname="P. Hoffman">
            <organization/>
          </author>
          <author initials="Y." surname="Nir" fullname="Y. Nir">
            <organization/>
          </author>
          <author initials="P." surname="Eronen" fullname="P. Eronen">
            <organization/>
          </author>
          <author initials="T." surname="Kivinen" fullname="T. Kivinen">
            <organization/>
          </author>
          <date year="2014" month="October"/>
          <abstract>
            <t>This document describes version 2 of the Internet Key Exchange (IKE) protocol.  IKE is a component of IPsec used for performing mutual authentication and establishing and maintaining Security Associations (SAs).  This document obsoletes RFC 5996, and includes all of the errata for it.  It advances IKEv2 to be an Internet Standard.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC7525" target="https://www.rfc-editor.org/info/rfc7525">
        <front>
          <title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
          <seriesInfo name="DOI" value="10.17487/RFC7525"/>
          <seriesInfo name="RFC" value="7525"/>
          <seriesInfo name="BCP" value="195"/>
          <author initials="Y." surname="Sheffer" fullname="Y. Sheffer">
            <organization/>
          </author>
          <author initials="R." surname="Holz" fullname="R. Holz">
            <organization/>
          </author>
          <author initials="P." surname="Saint-Andre" fullname="P. Saint-Andre">
            <organization/>
          </author>
          <date year="2015" month="May"/>
          <abstract>
            <t>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) are widely used to protect data exchanged over application protocols such as HTTP, SMTP, IMAP, POP, SIP, and XMPP.  Over the last few years, several serious attacks on TLS have emerged, including attacks on its most commonly used cipher suites and their modes of operation.  This document provides recommendations for improving the security of deployed services that use TLS and DTLS. The recommendations are applicable to the majority of use cases.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC7676" target="https://www.rfc-editor.org/info/rfc7676">
        <front>
          <title>IPv6 Support for Generic Routing Encapsulation (GRE)</title>
          <seriesInfo name="DOI" value="10.17487/RFC7676"/>
          <seriesInfo name="RFC" value="7676"/>
          <author initials="C." surname="Pignataro" fullname="C. Pignataro">
            <organization/>
          </author>
          <author initials="R." surname="Bonica" fullname="R. Bonica">
            <organization/>
          </author>
          <author initials="S." surname="Krishnan" fullname="S. Krishnan">
            <organization/>
          </author>
          <date year="2015" month="October"/>
          <abstract>
            <t>Generic Routing Encapsulation (GRE) can be used to carry any network- layer payload protocol over any network-layer delivery protocol. Currently, GRE procedures are specified for IPv4, used as either the payload or delivery protocol.  However, GRE procedures are not specified for IPv6.</t>
            <t>This document specifies GRE procedures for IPv6, used as either the payload or delivery protocol.</t>
          </abstract>
        </front>
      </reference>

      <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174">
        <front>
          <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="BCP" value="14"/>
          <author initials="B." surname="Leiba" fullname="B. Leiba">
            <organization/>
          </author>
          <date year="2017" month="May"/>
          <abstract>
            <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
          </abstract>
        </front>
      </reference>


      <reference anchor="RFC8221" target="https://www.rfc-editor.org/info/rfc8221">
        <front>
          <title>Cryptographic Algorithm Implementation Requirements and Usage Guidance for Encapsulating Security Payload (ESP) and Authentication Header (AH)</title>
          <seriesInfo name="DOI" value="10.17487/RFC8221"/>
          <seriesInfo name="RFC" value="8221"/>
          <author initials="P." surname="Wouters" fullname="P. Wouters">
            <organization/>
          </author>
          <author initials="D." surname="Migault" fullname="D. Migault">
            <organization/>
          </author>
          <author initials="J." surname="Mattsson" fullname="J. Mattsson">
            <organization/>
          </author>
          <author initials="Y." surname="Nir" fullname="Y. Nir">
            <organization/>
          </author>
          <author initials="T." surname="Kivinen" fullname="T. Kivinen">
            <organization/>
          </author>
          <date year="2017" month="October"/>
          <abstract>
            <t>This document replaces RFC 7321, "Cryptographic Algorithm Implementation         Requirements and Usage Guidance for Encapsulating Security Payload               (ESP) and Authentication Header (AH)".  The goal of this document is to enable ESP and AH to benefit from cryptography that is up to date while making IPsec interoperable.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC8247" target="https://www.rfc-editor.org/info/rfc8247">
        <front>
          <title>Algorithm Implementation Requirements and Usage Guidance for the Internet Key Exchange Protocol Version 2 (IKEv2)</title>
          <seriesInfo name="DOI" value="10.17487/RFC8247"/>
          <seriesInfo name="RFC" value="8247"/>
          <author initials="Y." surname="Nir" fullname="Y. Nir">
            <organization/>
          </author>
          <author initials="T." surname="Kivinen" fullname="T. Kivinen">
            <organization/>
          </author>
          <author initials="P." surname="Wouters" fullname="P. Wouters">
            <organization/>
          </author>
          <author initials="D." surname="Migault" fullname="D. Migault">
            <organization/>
          </author>
          <date year="2017" month="September"/>
          <abstract>
            <t>The IPsec series of protocols makes use of various cryptographic algorithms in order to provide security services.  The Internet Key Exchange (IKE) protocol is used to negotiate the IPsec Security Association (IPsec SA) parameters, such as which algorithms should be used.  To ensure interoperability between different implementations, it is necessary to specify a set of algorithm implementation requirements and usage guidance to ensure that there is at least one algorithm that all implementations support.  This document updates RFC 7296 and obsoletes RFC 4307 in defining the current algorithm implementation requirements and usage guidance for IKEv2, and does minor cleaning up of the IKEv2 IANA registry.  This document does not update the algorithms used for packet encryption using IPsec Encapsulating Security Payload (ESP).</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446">
        <front>
          <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
          <seriesInfo name="RFC" value="8446"/>
          <author initials="E." surname="Rescorla" fullname="E. Rescorla">
            <organization/>
          </author>
          <date year="2018" month="August"/>
          <abstract>
            <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
            <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610">
        <front>
          <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
          <seriesInfo name="RFC" value="8610"/>
          <author initials="H." surname="Birkholz" fullname="H. Birkholz">
            <organization/>
          </author>
          <author initials="C." surname="Vigano" fullname="C. Vigano">
            <organization/>
          </author>
          <author initials="C." surname="Bormann" fullname="C. Bormann">
            <organization/>
          </author>
          <date year="2019" month="June"/>
          <abstract>
            <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="I-D.ietf-anima-bootstrapping-keyinfra" target="http://www.ietf.org/internet-drafts/draft-ietf-anima-bootstrapping-keyinfra-43.txt">
        <front>
          <title>Bootstrapping Remote Secure Key Infrastructures (BRSKI)</title>
          <seriesInfo name="Internet-Draft" value="draft-ietf-anima-bootstrapping-keyinfra-43"/>
          <author initials="M" surname="Pritikin" fullname="Max Pritikin">
            <organization/>
          </author>
          <author initials="M" surname="Richardson" fullname="Michael Richardson">
            <organization/>
          </author>
          <author initials="T" surname="Eckert" fullname="Toerless Eckert">
            <organization/>
          </author>
          <author initials="M" surname="Behringer" fullname="Michael Behringer">
            <organization/>
          </author>
          <author initials="K" surname="Watsen" fullname="Kent Watsen">
            <organization/>
          </author>
          <date month="August" day="7" year="2020"/>
          <abstract>
            <t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur using a routable address and a cloud service, or using only link-local connectivity, or on limited/ disconnected networks.  Support for deployment models with less stringent security requirements is included.  Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="I-D.ietf-anima-grasp" target="http://www.ietf.org/internet-drafts/draft-ietf-anima-grasp-15.txt">
        <front>
          <title>A Generic Autonomic Signaling Protocol (GRASP)</title>
          <seriesInfo name="Internet-Draft" value="draft-ietf-anima-grasp-15"/>
          <author initials="C" surname="Bormann" fullname="Carsten Bormann">
            <organization/>
          </author>
          <author initials="B" surname="Carpenter" fullname="Brian Carpenter">
            <organization/>
          </author>
          <author initials="B" surname="Liu" fullname="Bing Liu">
            <organization/>
          </author>
          <date month="July" day="13" year="2017"/>
          <abstract>
            <t>This document specifies the GeneRic Autonomic Signaling Protocol (GRASP), which enables autonomic nodes and autonomic service agents to dynamically discover peers, to synchronize state with each other, and to negotiate parameter settings with each other.  GRASP depends on an external security environment that is described elsewhere.  The technical objectives and parameters for specific application scenarios are to be described in separate documents.  Appendices briefly discuss requirements for the protocol and existing protocols with comparable features.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="IKEV2IANA" target="https://www.iana.org/assignments/ikev2-parameters/ikev2-parameters.xhtml">
        <front>
          <title>Internet Key Exchange Version 2 (IKEv2) Parameters</title>
          <author fullname="IANA">
            <organization/>
          </author>
          <date/>
        </front>
      </reference>
    </references>
    <references>
      <name>Informative References</name>
      <!-- references whose text got removed over the versions of the doc:
                        <?rfc include='reference.RFC.4122'?> - No idea
                        <?rfc include='reference.RFC.5082'?> - GTSM was considered for GRASP, text removed
                        <?rfc include="reference.I-D.carpenter-anima-ani-objectives"?>
                        <?rfc include="reference.I-D.richardson-anima-6join-discovery.xml"?>
                        -->
      <reference anchor="I-D.ietf-anima-prefix-management" target="http://www.ietf.org/internet-drafts/draft-ietf-anima-prefix-management-07.txt">
        <front>
          <title>Autonomic IPv6 Edge Prefix Management in Large-scale Networks</title>
          <seriesInfo name="Internet-Draft" value="draft-ietf-anima-prefix-management-07"/>
          <author initials="S" surname="Jiang" fullname="Sheng Jiang">
            <organization/>
          </author>
          <author initials="Z" surname="Du" fullname="Zongpeng Du">
            <organization/>
          </author>
          <author initials="B" surname="Carpenter" fullname="Brian Carpenter">
            <organization/>
          </author>
          <author initials="Q" surname="Sun" fullname="Qiong Sun">
            <organization/>
          </author>
          <date month="December" day="18" year="2017"/>
          <abstract>
            <t>This document defines two autonomic technical objectives for IPv6 prefix management at the edge of large-scale ISP networks, with an extension to support IPv4 prefixes.  An important purpose of the document is to use it for validation of the design of various components of the autonomic networking infrastructure.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="I-D.ietf-acme-star" target="http://www.ietf.org/internet-drafts/draft-ietf-acme-star-11.txt">
        <front>
          <title>Support for Short-Term, Automatically-Renewed (STAR) Certificates in Automated Certificate Management Environment (ACME)</title>
          <seriesInfo name="Internet-Draft" value="draft-ietf-acme-star-11"/>
          <author initials="Y" surname="Sheffer" fullname="Yaron Sheffer">
            <organization/>
          </author>
          <author initials="D" surname="Lopez" fullname="Diego Lopez">
            <organization/>
          </author>
          <author initials="O" surname="Dios" fullname="Oscar de Dios">
            <organization/>
          </author>
          <author initials="A" surname="Pastor" fullname="Antonio Pastor">
            <organization/>
          </author>
          <author initials="T" surname="Fossati" fullname="Thomas Fossati">
            <organization/>
          </author>
          <date month="October" day="24" year="2019"/>
          <abstract>
            <t>Public-key certificates need to be revoked when they are compromised, that is, when the associated private key is exposed to an unauthorized entity.  However the revocation process is often unreliable.  An alternative to revocation is issuing a sequence of certificates, each with a short validity period, and terminating this sequence upon compromise.  This memo proposes an ACME extension to enable the issuance of short-term and automatically renewed (STAR) X.509 certificates.  [RFC Editor: please remove before publication]  While the draft is being developed, the editor's version can be found at https://github.com/yaronf/I-D/tree/master/STAR.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="I-D.ietf-tls-dtls13" target="http://www.ietf.org/internet-drafts/draft-ietf-tls-dtls13-38.txt">
        <front>
          <title>The Datagram Transport Layer Security (DTLS) Protocol Version 1.3</title>
          <seriesInfo name="Internet-Draft" value="draft-ietf-tls-dtls13-38"/>
          <author initials="E" surname="Rescorla" fullname="Eric Rescorla">
            <organization/>
          </author>
          <author initials="H" surname="Tschofenig" fullname="Hannes Tschofenig">
            <organization/>
          </author>
          <author initials="N" surname="Modadugu" fullname="Nagendra Modadugu">
            <organization/>
          </author>
          <date month="May" day="29" year="2020"/>
          <abstract>
            <t>This document specifies Version 1.3 of the Datagram Transport Layer Security (DTLS) protocol.  DTLS 1.3 allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.  The DTLS 1.3 protocol is intentionally based on the Transport Layer Security (TLS) 1.3 protocol and provides equivalent security guarantees with the exception of order protection/non-replayability. Datagram semantics of the underlying transport are preserved by the DTLS protocol.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC1112" target="https://www.rfc-editor.org/info/rfc1112">
        <front>
          <title>Host extensions for IP multicasting</title>
          <seriesInfo name="DOI" value="10.17487/RFC1112"/>
          <seriesInfo name="RFC" value="1112"/>
          <seriesInfo name="STD" value="5"/>
          <author initials="S.E." surname="Deering" fullname="S.E. Deering">
            <organization/>
          </author>
          <date year="1989" month="August"/>
          <abstract>
            <t>This memo specifies the extensions required of a host implementation of the Internet Protocol (IP) to support multicasting.  Recommended procedure for IP multicasting in the Internet.  This RFC obsoletes RFCs 998 and 1054.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC1492" target="https://www.rfc-editor.org/info/rfc1492">
        <front>
          <title>An Access Control Protocol, Sometimes Called TACACS</title>
          <seriesInfo name="DOI" value="10.17487/RFC1492"/>
          <seriesInfo name="RFC" value="1492"/>
          <author initials="C." surname="Finseth" fullname="C. Finseth">
            <organization/>
          </author>
          <date year="1993" month="July"/>
          <abstract>
            <t>This RFC documents the extended TACACS protocol use by the Cisco Systems terminal servers.  This same protocol is used by the University of Minnesota's distributed authentication system.  This memo provides information for the Internet community.  It does not specify an Internet standard.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC1654" target="https://www.rfc-editor.org/info/rfc1654">
        <front>
          <title>A Border Gateway Protocol 4 (BGP-4)</title>
          <seriesInfo name="DOI" value="10.17487/RFC1654"/>
          <seriesInfo name="RFC" value="1654"/>
          <author initials="Y." surname="Rekhter" fullname="Y. Rekhter" role="editor">
            <organization/>
          </author>
          <author initials="T." surname="Li" fullname="T. Li" role="editor">
            <organization/>
          </author>
          <date year="1994" month="July"/>
          <abstract>
            <t>This document defines an inter-autonomous system routing protocol for the Internet.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC1918" target="https://www.rfc-editor.org/info/rfc1918">
        <front>
          <title>Address Allocation for Private Internets</title>
          <seriesInfo name="DOI" value="10.17487/RFC1918"/>
          <seriesInfo name="RFC" value="1918"/>
          <seriesInfo name="BCP" value="5"/>
          <author initials="Y." surname="Rekhter" fullname="Y. Rekhter">
            <organization/>
          </author>
          <author initials="B." surname="Moskowitz" fullname="B. Moskowitz">
            <organization/>
          </author>
          <author initials="D." surname="Karrenberg" fullname="D. Karrenberg">
            <organization/>
          </author>
          <author initials="G. J." surname="de Groot" fullname="G. J. de Groot">
            <organization/>
          </author>
          <author initials="E." surname="Lear" fullname="E. Lear">
            <organization/>
          </author>
          <date year="1996" month="February"/>
          <abstract>
            <t>This document describes address allocation for private internets.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
          </abstract>
        </front>
      </reference>

      <reference anchor="RFC2315" target="https://www.rfc-editor.org/info/rfc2315">
        <front>
          <title>PKCS #7: Cryptographic Message Syntax Version 1.5</title>
          <seriesInfo name="DOI" value="10.17487/RFC2315"/>
          <seriesInfo name="RFC" value="2315"/>
          <author initials="B." surname="Kaliski" fullname="B. Kaliski">
            <organization/>
          </author>
          <date year="1998" month="March"/>
          <abstract>
            <t>This document describes a general syntax for data that may have cryptography applied to it, such as digital signatures and digital envelopes.  This memo provides information for the Internet community. It does not specify an Internet standard of any kind.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC2409" target="https://www.rfc-editor.org/info/rfc2409">
        <front>
          <title>The Internet Key Exchange (IKE)</title>
          <seriesInfo name="DOI" value="10.17487/RFC2409"/>
          <seriesInfo name="RFC" value="2409"/>
          <author initials="D." surname="Harkins" fullname="D. Harkins">
            <organization/>
          </author>
          <author initials="D." surname="Carrel" fullname="D. Carrel">
            <organization/>
          </author>
          <date year="1998" month="November"/>
          <abstract>
            <t>This memo describes a hybrid protocol. The purpose is to negotiate, and provide authenticated keying material for, security associations in a protected manner.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC2865" target="https://www.rfc-editor.org/info/rfc2865">
        <front>
          <title>Remote Authentication Dial In User Service (RADIUS)</title>
          <seriesInfo name="DOI" value="10.17487/RFC2865"/>
          <seriesInfo name="RFC" value="2865"/>
          <author initials="C." surname="Rigney" fullname="C. Rigney">
            <organization/>
          </author>
          <author initials="S." surname="Willens" fullname="S. Willens">
            <organization/>
          </author>
          <author initials="A." surname="Rubens" fullname="A. Rubens">
            <organization/>
          </author>
          <author initials="W." surname="Simpson" fullname="W. Simpson">
            <organization/>
          </author>
          <date year="2000" month="June"/>
          <abstract>
            <t>This document describes a protocol for carrying authentication, authorization, and configuration information between a Network Access Server which desires to authenticate its links and a shared Authentication Server.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC3164" target="https://www.rfc-editor.org/info/rfc3164">
        <front>
          <title>The BSD Syslog Protocol</title>
          <seriesInfo name="DOI" value="10.17487/RFC3164"/>
          <seriesInfo name="RFC" value="3164"/>
          <author initials="C." surname="Lonvick" fullname="C. Lonvick">
            <organization/>
          </author>
          <date year="2001" month="August"/>
          <abstract>
            <t>This document describes the observed behavior of the syslog protocol. This memo provides information for the Internet community.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC3315" target="https://www.rfc-editor.org/info/rfc3315">
        <front>
          <title>Dynamic Host Configuration Protocol for IPv6 (DHCPv6)</title>
          <seriesInfo name="DOI" value="10.17487/RFC3315"/>
          <seriesInfo name="RFC" value="3315"/>
          <author initials="R." surname="Droms" fullname="R. Droms" role="editor">
            <organization/>
          </author>
          <author initials="J." surname="Bound" fullname="J. Bound">
            <organization/>
          </author>
          <author initials="B." surname="Volz" fullname="B. Volz">
            <organization/>
          </author>
          <author initials="T." surname="Lemon" fullname="T. Lemon">
            <organization/>
          </author>
          <author initials="C." surname="Perkins" fullname="C. Perkins">
            <organization/>
          </author>
          <author initials="M." surname="Carney" fullname="M. Carney">
            <organization/>
          </author>
          <date year="2003" month="July"/>
        </front>
      </reference>
      <reference anchor="RFC3411" target="https://www.rfc-editor.org/info/rfc3411">
        <front>
          <title>An Architecture for Describing Simple Network Management Protocol (SNMP) Management Frameworks</title>
          <seriesInfo name="DOI" value="10.17487/RFC3411"/>
          <seriesInfo name="RFC" value="3411"/>
          <seriesInfo name="STD" value="62"/>
          <author initials="D." surname="Harrington" fullname="D. Harrington">
            <organization/>
          </author>
          <author initials="R." surname="Presuhn" fullname="R. Presuhn">
            <organization/>
          </author>
          <author initials="B." surname="Wijnen" fullname="B. Wijnen">
            <organization/>
          </author>
          <date year="2002" month="December"/>
          <abstract>
            <t>This document describes an architecture for describing Simple Network Management Protocol (SNMP) Management Frameworks.  The architecture is designed to be modular to allow the evolution of the SNMP protocol standards over time.  The major portions of the architecture are an SNMP engine containing a Message Processing Subsystem, a Security Subsystem and an Access Control Subsystem, and possibly multiple SNMP applications which provide specific functional processing of management data.  This document obsoletes RFC 2571.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC3596" target="https://www.rfc-editor.org/info/rfc3596">
        <front>
          <title>DNS Extensions to Support IP Version 6</title>
          <seriesInfo name="DOI" value="10.17487/RFC3596"/>
          <seriesInfo name="RFC" value="3596"/>
          <seriesInfo name="STD" value="88"/>
          <author initials="S." surname="Thomson" fullname="S. Thomson">
            <organization/>
          </author>
          <author initials="C." surname="Huitema" fullname="C. Huitema">
            <organization/>
          </author>
          <author initials="V." surname="Ksinant" fullname="V. Ksinant">
            <organization/>
          </author>
          <author initials="M." surname="Souissi" fullname="M. Souissi">
            <organization/>
          </author>
          <date year="2003" month="October"/>
          <abstract>
            <t>This document defines the changes that need to be made to the Domain Name System (DNS) to support hosts running IP version 6 (IPv6).  The changes include a resource record type to store an IPv6 address, a domain to support lookups based on an IPv6 address, and updated definitions of existing query types that return Internet addresses as part of additional section processing.  The extensions are designed to be compatible with existing applications and, in particular, DNS implementations themselves.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC3920" target="https://www.rfc-editor.org/info/rfc3920">
        <front>
          <title>Extensible Messaging and Presence Protocol (XMPP): Core</title>
          <seriesInfo name="DOI" value="10.17487/RFC3920"/>
          <seriesInfo name="RFC" value="3920"/>
          <author initials="P." surname="Saint-Andre" fullname="P. Saint-Andre" role="editor">
            <organization/>
          </author>
          <date year="2004" month="October"/>
          <abstract>
            <t>This memo defines the core features of the Extensible Messaging and Presence Protocol (XMPP), a protocol for streaming Extensible Markup Language (XML) elements in order to exchange structured information in close to real time between any two network endpoints.  While XMPP provides a generalized, extensible framework for exchanging XML data, it is used mainly for the purpose of building instant messaging and presence applications that meet the requirements of RFC 2779.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC3954" target="https://www.rfc-editor.org/info/rfc3954">
        <front>
          <title>Cisco Systems NetFlow Services Export Version 9</title>
          <seriesInfo name="DOI" value="10.17487/RFC3954"/>
          <seriesInfo name="RFC" value="3954"/>
          <author initials="B." surname="Claise" fullname="B. Claise" role="editor">
            <organization/>
          </author>
          <date year="2004" month="October"/>
          <abstract>
            <t>This document specifies the data export format for version 9 of Cisco Systems' NetFlow services, for use by implementations on the network elements and/or matching collector programs.  The version 9 export format uses templates to provide access to observations of IP packet flows in a flexible and extensible manner.  A template defines a collection of fields, with corresponding descriptions of structure and semantics.  This memo provides information for the Internet community.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC4007" target="https://www.rfc-editor.org/info/rfc4007">
        <front>
          <title>IPv6 Scoped Address Architecture</title>
          <seriesInfo name="DOI" value="10.17487/RFC4007"/>
          <seriesInfo name="RFC" value="4007"/>
          <author initials="S." surname="Deering" fullname="S. Deering">
            <organization/>
          </author>
          <author initials="B." surname="Haberman" fullname="B. Haberman">
            <organization/>
          </author>
          <author initials="T." surname="Jinmei" fullname="T. Jinmei">
            <organization/>
          </author>
          <author initials="E." surname="Nordmark" fullname="E. Nordmark">
            <organization/>
          </author>
          <author initials="B." surname="Zill" fullname="B. Zill">
            <organization/>
          </author>
          <date year="2005" month="March"/>
          <abstract>
            <t>This document specifies the architectural characteristics, expected behavior, textual representation, and usage of IPv6 addresses of different scopes.  According to a decision in the IPv6 working group, this document intentionally avoids the syntax and usage of unicast site-local addresses.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC4210" target="https://www.rfc-editor.org/info/rfc4210">
        <front>
          <title>Internet X.509 Public Key Infrastructure Certificate Management Protocol (CMP)</title>
          <seriesInfo name="DOI" value="10.17487/RFC4210"/>
          <seriesInfo name="RFC" value="4210"/>
          <author initials="C." surname="Adams" fullname="C. Adams">
            <organization/>
          </author>
          <author initials="S." surname="Farrell" fullname="S. Farrell">
            <organization/>
          </author>
          <author initials="T." surname="Kause" fullname="T. Kause">
            <organization/>
          </author>
          <author initials="T." surname="Mononen" fullname="T. Mononen">
            <organization/>
          </author>
          <date year="2005" month="September"/>
          <abstract>
            <t>This document describes the Internet X.509 Public Key Infrastructure (PKI) Certificate Management Protocol (CMP).  Protocol messages are defined for X.509v3 certificate creation and management.  CMP provides on-line interactions between PKI components, including an exchange between a Certification Authority (CA) and a client system.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC4364" target="https://www.rfc-editor.org/info/rfc4364">
        <front>
          <title>BGP/MPLS IP Virtual Private Networks (VPNs)</title>
          <seriesInfo name="DOI" value="10.17487/RFC4364"/>
          <seriesInfo name="RFC" value="4364"/>
          <author initials="E." surname="Rosen" fullname="E. Rosen">
            <organization/>
          </author>
          <author initials="Y." surname="Rekhter" fullname="Y. Rekhter">
            <organization/>
          </author>
          <date year="2006" month="February"/>
          <abstract>
            <t>This document describes a method by which a Service Provider may use an IP backbone to provide IP Virtual Private Networks (VPNs) for its customers.  This method uses a "peer model", in which the customers' edge routers (CE routers) send their routes to the Service Provider's edge routers (PE routers); there is no "overlay" visible to the customer's routing algorithm, and CE routers at different sites do not peer with each other.  Data packets are tunneled through the backbone, so that the core routers do not need to know the VPN routes.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC4429" target="https://www.rfc-editor.org/info/rfc4429">
        <front>
          <title>Optimistic Duplicate Address Detection (DAD) for IPv6</title>
          <seriesInfo name="DOI" value="10.17487/RFC4429"/>
          <seriesInfo name="RFC" value="4429"/>
          <author initials="N." surname="Moore" fullname="N. Moore">
            <organization/>
          </author>
          <date year="2006" month="April"/>
          <abstract>
            <t>Optimistic Duplicate Address Detection is an interoperable modification of the existing IPv6 Neighbor Discovery (RFC 2461) and Stateless Address Autoconfiguration (RFC 2462) processes.  The intention is to minimize address configuration delays in the successful case, to reduce disruption as far as possible in the failure case, and to remain interoperable with unmodified hosts and routers.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC4541" target="https://www.rfc-editor.org/info/rfc4541">
        <front>
          <title>Considerations for Internet Group Management Protocol (IGMP) and Multicast Listener Discovery (MLD) Snooping Switches</title>
          <seriesInfo name="DOI" value="10.17487/RFC4541"/>
          <seriesInfo name="RFC" value="4541"/>
          <author initials="M." surname="Christensen" fullname="M. Christensen">
            <organization/>
          </author>
          <author initials="K." surname="Kimball" fullname="K. Kimball">
            <organization/>
          </author>
          <author initials="F." surname="Solensky" fullname="F. Solensky">
            <organization/>
          </author>
          <date year="2006" month="May"/>
          <abstract>
            <t>This memo describes the recommendations for Internet Group Management Protocol (IGMP) and Multicast Listener Discovery (MLD) snooping switches.  These are based on best current practices for IGMPv2, with further considerations for IGMPv3- and MLDv2-snooping.  Additional areas of relevance, such as link layer topology changes and Ethernet-specific encapsulation issues, are also considered.  This memo provides information for the Internet community.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC4604" target="https://www.rfc-editor.org/info/rfc4604">
        <front>
          <title>Using Internet Group Management Protocol Version 3 (IGMPv3) and Multicast Listener Discovery Protocol Version 2 (MLDv2) for Source-Specific Multicast</title>
          <seriesInfo name="DOI" value="10.17487/RFC4604"/>
          <seriesInfo name="RFC" value="4604"/>
          <author initials="H." surname="Holbrook" fullname="H. Holbrook">
            <organization/>
          </author>
          <author initials="B." surname="Cain" fullname="B. Cain">
            <organization/>
          </author>
          <author initials="B." surname="Haberman" fullname="B. Haberman">
            <organization/>
          </author>
          <date year="2006" month="August"/>
          <abstract>
            <t>The Internet Group Management Protocol Version 3 (IGMPv3) and the Multicast Listener Discovery Protocol Version 2 (MLDv2) are protocols that allow a host to inform its neighboring routers of its desire to receive IPv4 and IPv6 multicast transmissions, respectively. Source-specific multicast (SSM) is a form of multicast in which a receiver is required to specify both the network-layer address of the source and the multicast destination address in order to receive the multicast transmission.  This document defines the notion of an "SSM-aware" router and host, and clarifies and (in some cases) modifies the behavior of IGMPv3 and MLDv2 on SSM-aware routers and hosts to accommodate source-specific multicast.  This document updates the IGMPv3 and MLDv2 specifications.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC4607" target="https://www.rfc-editor.org/info/rfc4607">
        <front>
          <title>Source-Specific Multicast for IP</title>
          <seriesInfo name="DOI" value="10.17487/RFC4607"/>
          <seriesInfo name="RFC" value="4607"/>
          <author initials="H." surname="Holbrook" fullname="H. Holbrook">
            <organization/>
          </author>
          <author initials="B." surname="Cain" fullname="B. Cain">
            <organization/>
          </author>
          <date year="2006" month="August"/>
          <abstract>
            <t>IP version 4 (IPv4) addresses in the 232/8 (232.0.0.0 to 232.255.255.255) range are designated as source-specific multicast (SSM) destination addresses and are reserved for use by source-specific applications and protocols.  For IP version 6 (IPv6), the address prefix FF3x::/32 is reserved for source-specific multicast use.  This document defines an extension to the Internet network service that applies to datagrams sent to SSM addresses and defines the host and router requirements to support this extension.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC4610" target="https://www.rfc-editor.org/info/rfc4610">
        <front>
          <title>Anycast-RP Using Protocol Independent Multicast (PIM)</title>
          <seriesInfo name="DOI" value="10.17487/RFC4610"/>
          <seriesInfo name="RFC" value="4610"/>
          <author initials="D." surname="Farinacci" fullname="D. Farinacci">
            <organization/>
          </author>
          <author initials="Y." surname="Cai" fullname="Y. Cai">
            <organization/>
          </author>
          <date year="2006" month="August"/>
          <abstract>
            <t>This specification allows Anycast-RP (Rendezvous Point) to be used inside a domain that runs Protocol Independent Multicast (PIM) only. Other multicast protocols (such as Multicast Source Discovery Protocol (MSDP), which has been used traditionally to solve this problem) are not required to support Anycast-RP.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC4941" target="https://www.rfc-editor.org/info/rfc4941">
        <front>
          <title>Privacy Extensions for Stateless Address Autoconfiguration in IPv6</title>
          <seriesInfo name="DOI" value="10.17487/RFC4941"/>
          <seriesInfo name="RFC" value="4941"/>
          <author initials="T." surname="Narten" fullname="T. Narten">
            <organization/>
          </author>
          <author initials="R." surname="Draves" fullname="R. Draves">
            <organization/>
          </author>
          <author initials="S." surname="Krishnan" fullname="S. Krishnan">
            <organization/>
          </author>
          <date year="2007" month="September"/>
          <abstract>
            <t>Nodes use IPv6 stateless address autoconfiguration to generate addresses using a combination of locally available information and information advertised by routers.  Addresses are formed by combining network prefixes with an interface identifier.  On an interface that contains an embedded IEEE Identifier, the interface identifier is typically derived from it.  On other interface types, the interface identifier is generated through other means, for example, via random number generation.  This document describes an extension to IPv6 stateless address autoconfiguration for interfaces whose interface identifier is derived from an IEEE identifier.  Use of the extension causes nodes to generate global scope addresses from interface identifiers that change over time, even in cases where the interface contains an embedded IEEE identifier.  Changing the interface identifier (and the global scope addresses generated from it) over time makes it more difficult for eavesdroppers and other information collectors to identify when different addresses used in different transactions actually correspond to the same node.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC4985" target="https://www.rfc-editor.org/info/rfc4985">
        <front>
          <title>Internet X.509 Public Key Infrastructure Subject Alternative Name for Expression of Service Name</title>
          <seriesInfo name="DOI" value="10.17487/RFC4985"/>
          <seriesInfo name="RFC" value="4985"/>
          <author initials="S." surname="Santesson" fullname="S. Santesson">
            <organization/>
          </author>
          <date year="2007" month="August"/>
          <abstract>
            <t>This document defines a new name form for inclusion in the otherName field of an X.509 Subject Alternative Name extension that allows a certificate subject to be associated with the service name and domain name components of a DNS Service Resource Record.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC5790" target="https://www.rfc-editor.org/info/rfc5790">
        <front>
          <title>Lightweight Internet Group Management Protocol Version 3 (IGMPv3) and Multicast Listener Discovery Version 2 (MLDv2) Protocols</title>
          <seriesInfo name="DOI" value="10.17487/RFC5790"/>
          <seriesInfo name="RFC" value="5790"/>
          <author initials="H." surname="Liu" fullname="H. Liu">
            <organization/>
          </author>
          <author initials="W." surname="Cao" fullname="W. Cao">
            <organization/>
          </author>
          <author initials="H." surname="Asaeda" fullname="H. Asaeda">
            <organization/>
          </author>
          <date year="2010" month="February"/>
          <abstract>
            <t>This document describes lightweight IGMPv3 and MLDv2 protocols (LW- IGMPv3 and LW-MLDv2), which simplify the standard (full) versions of IGMPv3 and MLDv2.  The interoperability with the full versions and the previous versions of IGMP and MLD is also taken into account.   [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC5880" target="https://www.rfc-editor.org/info/rfc5880">
        <front>
          <title>Bidirectional Forwarding Detection (BFD)</title>
          <seriesInfo name="DOI" value="10.17487/RFC5880"/>
          <seriesInfo name="RFC" value="5880"/>
          <author initials="D." surname="Katz" fullname="D. Katz">
            <organization/>
          </author>
          <author initials="D." surname="Ward" fullname="D. Ward">
            <organization/>
          </author>
          <date year="2010" month="June"/>
          <abstract>
            <t>This document describes a protocol intended to detect faults in the bidirectional path between two forwarding engines, including interfaces, data link(s), and to the extent possible the forwarding engines themselves, with potentially very low latency.  It operates independently of media, data protocols, and routing protocols. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC5905" target="https://www.rfc-editor.org/info/rfc5905">
        <front>
          <title>Network Time Protocol Version 4: Protocol and Algorithms Specification</title>
          <seriesInfo name="DOI" value="10.17487/RFC5905"/>
          <seriesInfo name="RFC" value="5905"/>
          <author initials="D." surname="Mills" fullname="D. Mills">
            <organization/>
          </author>
          <author initials="J." surname="Martin" fullname="J. Martin" role="editor">
            <organization/>
          </author>
          <author initials="J." surname="Burbank" fullname="J. Burbank">
            <organization/>
          </author>
          <author initials="W." surname="Kasch" fullname="W. Kasch">
            <organization/>
          </author>
          <date year="2010" month="June"/>
          <abstract>
            <t>The Network Time Protocol (NTP) is widely used to synchronize computer clocks in the Internet.  This document describes NTP version 4 (NTPv4), which is backwards compatible with NTP version 3 (NTPv3), described in RFC 1305, as well as previous versions of the protocol. NTPv4 includes a modified protocol header to accommodate the Internet Protocol version 6 address family.  NTPv4 includes fundamental improvements in the mitigation and discipline algorithms that extend the potential accuracy to the tens of microseconds with modern workstations and fast LANs.  It includes a dynamic server discovery scheme, so that in many cases, specific server configuration is not required.  It corrects certain errors in the NTPv3 design and implementation and includes an optional extension mechanism.   [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC5912" target="https://www.rfc-editor.org/info/rfc5912">
        <front>
          <title>New ASN.1 Modules for the Public Key Infrastructure Using X.509 (PKIX)</title>
          <seriesInfo name="DOI" value="10.17487/RFC5912"/>
          <seriesInfo name="RFC" value="5912"/>
          <author initials="P." surname="Hoffman" fullname="P. Hoffman">
            <organization/>
          </author>
          <author initials="J." surname="Schaad" fullname="J. Schaad">
            <organization/>
          </author>
          <date year="2010" month="June"/>
          <abstract>
            <t>The Public Key Infrastructure using X.509 (PKIX) certificate format, and many associated formats, are expressed using ASN.1.  The current ASN.1 modules conform to the 1988 version of ASN.1.  This document updates those ASN.1 modules to conform to the 2002 version of ASN.1. There are no bits-on-the-wire changes to any of the formats; this is simply a change to the syntax.  This document is not an Internet  Standards Track specification; it is published for informational  purposes.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6241" target="https://www.rfc-editor.org/info/rfc6241">
        <front>
          <title>Network Configuration Protocol (NETCONF)</title>
          <seriesInfo name="DOI" value="10.17487/RFC6241"/>
          <seriesInfo name="RFC" value="6241"/>
          <author initials="R." surname="Enns" fullname="R. Enns" role="editor">
            <organization/>
          </author>
          <author initials="M." surname="Bjorklund" fullname="M. Bjorklund" role="editor">
            <organization/>
          </author>
          <author initials="J." surname="Schoenwaelder" fullname="J. Schoenwaelder" role="editor">
            <organization/>
          </author>
          <author initials="A." surname="Bierman" fullname="A. Bierman" role="editor">
            <organization/>
          </author>
          <date year="2011" month="June"/>
          <abstract>
            <t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6335" target="https://www.rfc-editor.org/info/rfc6335">
        <front>
          <title>Internet Assigned Numbers Authority (IANA) Procedures for the Management of the Service Name and Transport Protocol Port Number Registry</title>
          <seriesInfo name="DOI" value="10.17487/RFC6335"/>
          <seriesInfo name="RFC" value="6335"/>
          <seriesInfo name="BCP" value="165"/>
          <author initials="M." surname="Cotton" fullname="M. Cotton">
            <organization/>
          </author>
          <author initials="L." surname="Eggert" fullname="L. Eggert">
            <organization/>
          </author>
          <author initials="J." surname="Touch" fullname="J. Touch">
            <organization/>
          </author>
          <author initials="M." surname="Westerlund" fullname="M. Westerlund">
            <organization/>
          </author>
          <author initials="S." surname="Cheshire" fullname="S. Cheshire">
            <organization/>
          </author>
          <date year="2011" month="August"/>
          <abstract>
            <t>This document defines the procedures that the Internet Assigned Numbers Authority (IANA) uses when handling assignment and other requests related to the Service Name and Transport Protocol Port Number registry.  It also discusses the rationale and principles behind these procedures and how they facilitate the long-term sustainability of the registry.</t>
            <t>This document updates IANA's procedures by obsoleting the previous UDP and TCP port assignment procedures defined in Sections 8 and 9.1 of the IANA Allocation Guidelines, and it updates the IANA service name and port assignment procedures for UDP-Lite, the Datagram Congestion Control Protocol (DCCP), and the Stream Control Transmission Protocol (SCTP).  It also updates the DNS SRV specification to clarify what a service name is and how it is registered.  This memo documents an Internet Best Current Practice.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6402" target="https://www.rfc-editor.org/info/rfc6402">
        <front>
          <title>Certificate Management over CMS (CMC) Updates</title>
          <seriesInfo name="DOI" value="10.17487/RFC6402"/>
          <seriesInfo name="RFC" value="6402"/>
          <author initials="J." surname="Schaad" fullname="J. Schaad">
            <organization/>
          </author>
          <date year="2011" month="November"/>
          <abstract>
            <t>This document contains a set of updates to the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS).  This document updates RFC 5272, RFC 5273, and RFC 5274.</t>
            <t>The new items in this document are: new controls for future work in doing server side key generation, definition of a Subject Information Access value to identify CMC servers, and the registration of a port number for TCP/IP for the CMC service to run on.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6407" target="https://www.rfc-editor.org/info/rfc6407">
        <front>
          <title>The Group Domain of Interpretation</title>
          <seriesInfo name="DOI" value="10.17487/RFC6407"/>
          <seriesInfo name="RFC" value="6407"/>
          <author initials="B." surname="Weis" fullname="B. Weis">
            <organization/>
          </author>
          <author initials="S." surname="Rowles" fullname="S. Rowles">
            <organization/>
          </author>
          <author initials="T." surname="Hardjono" fullname="T. Hardjono">
            <organization/>
          </author>
          <date year="2011" month="October"/>
          <abstract>
            <t>This document describes the Group Domain of Interpretation (GDOI) protocol specified in RFC 3547.  The GDOI provides group key management to support secure group communications according to the architecture specified in RFC 4046.  The GDOI manages group security associations, which are used by IPsec and potentially other data security protocols.  This document replaces RFC 3547.   [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6554" target="https://www.rfc-editor.org/info/rfc6554">
        <front>
          <title>An IPv6 Routing Header for Source Routes with the Routing Protocol for Low-Power and Lossy Networks (RPL)</title>
          <seriesInfo name="DOI" value="10.17487/RFC6554"/>
          <seriesInfo name="RFC" value="6554"/>
          <author initials="J." surname="Hui" fullname="J. Hui">
            <organization/>
          </author>
          <author initials="JP." surname="Vasseur" fullname="JP. Vasseur">
            <organization/>
          </author>
          <author initials="D." surname="Culler" fullname="D. Culler">
            <organization/>
          </author>
          <author initials="V." surname="Manral" fullname="V. Manral">
            <organization/>
          </author>
          <date year="2012" month="March"/>
          <abstract>
            <t>In Low-Power and Lossy Networks (LLNs), memory constraints on routers may limit them to maintaining, at most, a few routes.  In some configurations, it is necessary to use these memory-constrained routers to deliver datagrams to nodes within the LLN.  The Routing Protocol for Low-Power and Lossy Networks (RPL) can be used in some deployments to store most, if not all, routes on one (e.g., the Directed Acyclic Graph (DAG) root) or a few routers and forward the IPv6 datagram using a source routing technique to avoid large routing tables on memory-constrained routers.  This document specifies a new IPv6 Routing header type for delivering datagrams within a RPL routing domain.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6724" target="https://www.rfc-editor.org/info/rfc6724">
        <front>
          <title>Default Address Selection for Internet Protocol Version 6 (IPv6)</title>
          <seriesInfo name="DOI" value="10.17487/RFC6724"/>
          <seriesInfo name="RFC" value="6724"/>
          <author initials="D." surname="Thaler" fullname="D. Thaler" role="editor">
            <organization/>
          </author>
          <author initials="R." surname="Draves" fullname="R. Draves">
            <organization/>
          </author>
          <author initials="A." surname="Matsumoto" fullname="A. Matsumoto">
            <organization/>
          </author>
          <author initials="T." surname="Chown" fullname="T. Chown">
            <organization/>
          </author>
          <date year="2012" month="September"/>
          <abstract>
            <t>This document describes two algorithms, one for source address selection and one for destination address selection.  The algorithms specify default behavior for all Internet Protocol version 6 (IPv6) implementations.  They do not override choices made by applications or upper-layer protocols, nor do they preclude the development of more advanced mechanisms for address selection.  The two algorithms share a common context, including an optional mechanism for allowing administrators to provide policy that can override the default behavior.  In dual-stack implementations, the destination address selection algorithm can consider both IPv4 and IPv6 addresses -- depending on the available source addresses, the algorithm might prefer IPv6 addresses over IPv4 addresses, or vice versa.</t>
            <t>Default address selection as defined in this specification applies to all IPv6 nodes, including both hosts and routers.  This document obsoletes RFC 3484.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6733" target="https://www.rfc-editor.org/info/rfc6733">
        <front>
          <title>Diameter Base Protocol</title>
          <seriesInfo name="DOI" value="10.17487/RFC6733"/>
          <seriesInfo name="RFC" value="6733"/>
          <author initials="V." surname="Fajardo" fullname="V. Fajardo" role="editor">
            <organization/>
          </author>
          <author initials="J." surname="Arkko" fullname="J. Arkko">
            <organization/>
          </author>
          <author initials="J." surname="Loughney" fullname="J. Loughney">
            <organization/>
          </author>
          <author initials="G." surname="Zorn" fullname="G. Zorn" role="editor">
            <organization/>
          </author>
          <date year="2012" month="October"/>
          <abstract>
            <t>The Diameter base protocol is intended to provide an Authentication, Authorization, and Accounting (AAA) framework for applications such as network access or IP mobility in both local and roaming situations.  This document specifies the message format, transport, error reporting, accounting, and security services used by all Diameter applications.  The Diameter base protocol as defined in this document obsoletes RFC 3588 and RFC 5719, and it must be supported by all new Diameter implementations.  [STANDARDS-TRACK]</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6762" target="https://www.rfc-editor.org/info/rfc6762">
        <front>
          <title>Multicast DNS</title>
          <seriesInfo name="DOI" value="10.17487/RFC6762"/>
          <seriesInfo name="RFC" value="6762"/>
          <author initials="S." surname="Cheshire" fullname="S. Cheshire">
            <organization/>
          </author>
          <author initials="M." surname="Krochmal" fullname="M. Krochmal">
            <organization/>
          </author>
          <date year="2013" month="February"/>
          <abstract>
            <t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t>
            <t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t>
            <t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6763" target="https://www.rfc-editor.org/info/rfc6763">
        <front>
          <title>DNS-Based Service Discovery</title>
          <seriesInfo name="DOI" value="10.17487/RFC6763"/>
          <seriesInfo name="RFC" value="6763"/>
          <author initials="S." surname="Cheshire" fullname="S. Cheshire">
            <organization/>
          </author>
          <author initials="M." surname="Krochmal" fullname="M. Krochmal">
            <organization/>
          </author>
          <date year="2013" month="February"/>
          <abstract>
            <t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6824" target="https://www.rfc-editor.org/info/rfc6824">
        <front>
          <title>TCP Extensions for Multipath Operation with Multiple Addresses</title>
          <seriesInfo name="DOI" value="10.17487/RFC6824"/>
          <seriesInfo name="RFC" value="6824"/>
          <author initials="A." surname="Ford" fullname="A. Ford">
            <organization/>
          </author>
          <author initials="C." surname="Raiciu" fullname="C. Raiciu">
            <organization/>
          </author>
          <author initials="M." surname="Handley" fullname="M. Handley">
            <organization/>
          </author>
          <author initials="O." surname="Bonaventure" fullname="O. Bonaventure">
            <organization/>
          </author>
          <date year="2013" month="January"/>
          <abstract>
            <t>TCP/IP communication is currently restricted to a single path per connection, yet multiple paths often exist between peers.  The simultaneous use of these multiple paths for a TCP/IP session would improve resource usage within the network and, thus, improve user experience through higher throughput and improved resilience to network failure.</t>
            <t>Multipath TCP provides the ability to simultaneously use multiple paths between peers.  This document presents a set of extensions to traditional TCP to support multipath operation.  The protocol offers the same type of service to applications as TCP (i.e., reliable bytestream), and it provides the components necessary to establish and use multiple TCP flows across potentially disjoint paths.  This  document defines an Experimental Protocol for the Internet community.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC6830" target="https://www.rfc-editor.org/info/rfc6830">
        <front>
          <title>The Locator/ID Separation Protocol (LISP)</title>
          <seriesInfo name="DOI" value="10.17487/RFC6830"/>
          <seriesInfo name="RFC" value="6830"/>
          <author initials="D." surname="Farinacci" fullname="D. Farinacci">
            <organization/>
          </author>
          <author initials="V." surname="Fuller" fullname="V. Fuller">
            <organization/>
          </author>
          <author initials="D." surname="Meyer" fullname="D. Meyer">
            <organization/>
          </author>
          <author initials="D." surname="Lewis" fullname="D. Lewis">
            <organization/>
          </author>
          <date year="2013" month="January"/>
          <abstract>
            <t>This document describes a network-layer-based protocol that enables separation of IP addresses into two new numbering spaces: Endpoint Identifiers (EIDs) and Routing Locators (RLOCs).  No changes are required to either host protocol stacks or to the "core" of the Internet infrastructure.  The Locator/ID Separation Protocol (LISP) can be incrementally deployed, without a "flag day", and offers Traffic Engineering, multihoming, and mobility benefits to early adopters, even when there are relatively few LISP-capable sites.</t>
            <t>Design and development of LISP was largely motivated by the problem statement produced by the October 2006 IAB Routing and Addressing Workshop.  This document defines an Experimental Protocol for the Internet community.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC7011" target="https://www.rfc-editor.org/info/rfc7011">
        <front>
          <title>Specification of the IP Flow Information Export (IPFIX) Protocol for the Exchange of Flow Information</title>
          <seriesInfo name="DOI" value="10.17487/RFC7011"/>
          <seriesInfo name="RFC" value="7011"/>
          <seriesInfo name="STD" value="77"/>
          <author initials="B." surname="Claise" fullname="B. Claise" role="editor">
            <organization/>
          </author>
          <author initials="B." surname="Trammell" fullname="B. Trammell" role="editor">
            <organization/>
          </author>
          <author initials="P." surname="Aitken" fullname="P. Aitken">
            <organization/>
          </author>
          <date year="2013" month="September"/>
          <abstract>
            <t>This document specifies the IP Flow Information Export (IPFIX) protocol, which serves as a means for transmitting Traffic Flow information over the network.  In order to transmit Traffic Flow information from an Exporting Process to a Collecting Process, a common representation of flow data and a standard means of communicating them are required.  This document describes how the IPFIX Data and Template Records are carried over a number of transport protocols from an IPFIX Exporting Process to an IPFIX Collecting Process.  This document obsoletes RFC 5101.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC7404" target="https://www.rfc-editor.org/info/rfc7404">
        <front>
          <title>Using Only Link-Local Addressing inside an IPv6 Network</title>
          <seriesInfo name="DOI" value="10.17487/RFC7404"/>
          <seriesInfo name="RFC" value="7404"/>
          <author initials="M." surname="Behringer" fullname="M. Behringer">
            <organization/>
          </author>
          <author initials="E." surname="Vyncke" fullname="E. Vyncke">
            <organization/>
          </author>
          <date year="2014" month="November"/>
          <abstract>
            <t>In an IPv6 network, it is possible to use only link-local addresses on infrastructure links between routers.  This document discusses the advantages and disadvantages of this approach to facilitate the decision process for a given network.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC7426" target="https://www.rfc-editor.org/info/rfc7426">
        <front>
          <title>Software-Defined Networking (SDN): Layers and Architecture Terminology</title>
          <seriesInfo name="DOI" value="10.17487/RFC7426"/>
          <seriesInfo name="RFC" value="7426"/>
          <author initials="E." surname="Haleplidis" fullname="E. Haleplidis" role="editor">
            <organization/>
          </author>
          <author initials="K." surname="Pentikousis" fullname="K. Pentikousis" role="editor">
            <organization/>
          </author>
          <author initials="S." surname="Denazis" fullname="S. Denazis">
            <organization/>
          </author>
          <author initials="J." surname="Hadi Salim" fullname="J. Hadi Salim">
            <organization/>
          </author>
          <author initials="D." surname="Meyer" fullname="D. Meyer">
            <organization/>
          </author>
          <author initials="O." surname="Koufopavlou" fullname="O. Koufopavlou">
            <organization/>
          </author>
          <date year="2015" month="January"/>
          <abstract>
            <t>Software-Defined Networking (SDN) refers to a new approach for network programmability, that is, the capacity to initialize, control, change, and manage network behavior dynamically via open interfaces.  SDN emphasizes the role of software in running networks through the introduction of an abstraction for the data forwarding plane and, by doing so, separates it from the control plane.  This separation allows faster innovation cycles at both planes as experience has already shown.  However, there is increasing confusion as to what exactly SDN is, what the layer structure is in an SDN architecture, and how layers interface with each other.  This document, a product of the IRTF Software-Defined Networking Research Group (SDNRG), addresses these questions and provides a concise reference for the SDN research community based on relevant peer-reviewed literature, the RFC series, and relevant documents by other standards organizations.</t>
          </abstract>
        </front>
      </reference>

        <reference anchor="RFC7435" target="https://www.rfc-editor.org/info/rfc7435" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7435.xml">
          <front>
            <title>Opportunistic Security: Some Protection Most of the Time</title>
            <seriesInfo name="DOI" value="10.17487/RFC7435"/>
            <seriesInfo name="RFC" value="7435"/>
            <author initials="V." surname="Dukhovni" fullname="V. Dukhovni">
              <organization/>
            </author>
            <date year="2014" month="December"/>
            <abstract>
              <t>This document defines the concept "Opportunistic Security" in the context of communications protocols.  Protocol designs based on Opportunistic Security use encryption even when authentication is not available, and use authentication when possible, thereby removing barriers to the widespread use of encryption on the Internet.</t>
            </abstract>
          </front>
        </reference>
      <reference anchor="RFC7575" target="https://www.rfc-editor.org/info/rfc7575">
        <front>
          <title>Autonomic Networking: Definitions and Design Goals</title>
          <seriesInfo name="DOI" value="10.17487/RFC7575"/>
          <seriesInfo name="RFC" value="7575"/>
          <author initials="M." surname="Behringer" fullname="M. Behringer">
            <organization/>
          </author>
          <author initials="M." surname="Pritikin" fullname="M. Pritikin">
            <organization/>
          </author>
          <author initials="S." surname="Bjarnason" fullname="S. Bjarnason">
            <organization/>
          </author>
          <author initials="A." surname="Clemm" fullname="A. Clemm">
            <organization/>
          </author>
          <author initials="B." surname="Carpenter" fullname="B. Carpenter">
            <organization/>
          </author>
          <author initials="S." surname="Jiang" fullname="S. Jiang">
            <organization/>
          </author>
          <author initials="L." surname="Ciavaglia" fullname="L. Ciavaglia">
            <organization/>
          </author>
          <date year="2015" month="June"/>
          <abstract>
            <t>Autonomic systems were first described in 2001.  The fundamental goal is self-management, including self-configuration, self-optimization, self-healing, and self-protection.  This is achieved by an autonomic function having minimal dependencies on human administrators or centralized management systems.  It usually implies distribution across network elements.</t>
            <t>This document defines common language and outlines design goals (and what are not design goals) for autonomic functions.  A high-level reference model illustrates how functional elements in an Autonomic Network interact.  This document is a product of the IRTF's Network Management Research Group.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC7576" target="https://www.rfc-editor.org/info/rfc7576">
        <front>
          <title>General Gap Analysis for Autonomic Networking</title>
          <seriesInfo name="DOI" value="10.17487/RFC7576"/>
          <seriesInfo name="RFC" value="7576"/>
          <author initials="S." surname="Jiang" fullname="S. Jiang">
            <organization/>
          </author>
          <author initials="B." surname="Carpenter" fullname="B. Carpenter">
            <organization/>
          </author>
          <author initials="M." surname="Behringer" fullname="M. Behringer">
            <organization/>
          </author>
          <date year="2015" month="June"/>
          <abstract>
            <t>This document provides a problem statement and general gap analysis for an IP-based Autonomic Network that is mainly based on distributed network devices.  The document provides background by reviewing the current status of autonomic aspects of IP networks and the extent to which current network management depends on centralization and human administrators.  Finally, the document outlines the general features that are missing from current network abilities and are needed in the ideal Autonomic Network concept.</t>
            <t>This document is a product of the IRTF's Network Management Research Group.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC7585" target="https://www.rfc-editor.org/info/rfc7585">
        <front>
          <title>Dynamic Peer Discovery for RADIUS/TLS and RADIUS/DTLS Based on the Network Access Identifier (NAI)</title>
          <seriesInfo name="DOI" value="10.17487/RFC7585"/>
          <seriesInfo name="RFC" value="7585"/>
          <author initials="S." surname="Winter" fullname="S. Winter">
            <organization/>
          </author>
          <author initials="M." surname="McCauley" fullname="M. McCauley">
            <organization/>
          </author>
          <date year="2015" month="October"/>
          <abstract>
            <t>This document specifies a means to find authoritative RADIUS servers for a given realm.  It is used in conjunction with either RADIUS over Transport Layer Security (RADIUS/TLS) or RADIUS over Datagram Transport Layer Security (RADIUS/DTLS).</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC7721" target="https://www.rfc-editor.org/info/rfc7721">
        <front>
          <title>Security and Privacy Considerations for IPv6 Address Generation Mechanisms</title>
          <seriesInfo name="DOI" value="10.17487/RFC7721"/>
          <seriesInfo name="RFC" value="7721"/>
          <author initials="A." surname="Cooper" fullname="A. Cooper">
            <organization/>
          </author>
          <author initials="F." surname="Gont" fullname="F. Gont">
            <organization/>
          </author>
          <author initials="D." surname="Thaler" fullname="D. Thaler">
            <organization/>
          </author>
          <date year="2016" month="March"/>
          <abstract>
            <t>This document discusses privacy and security considerations for several IPv6 address generation mechanisms, both standardized and non-standardized.  It evaluates how different mechanisms mitigate different threats and the trade-offs that implementors, developers, and users face in choosing different addresses or address generation mechanisms.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC7761" target="https://www.rfc-editor.org/info/rfc7761">
        <front>
          <title>Protocol Independent Multicast - Sparse Mode (PIM-SM): Protocol Specification (Revised)</title>
          <seriesInfo name="DOI" value="10.17487/RFC7761"/>
          <seriesInfo name="RFC" value="7761"/>
          <seriesInfo name="STD" value="83"/>
          <author initials="B." surname="Fenner" fullname="B. Fenner">
            <organization/>
          </author>
          <author initials="M." surname="Handley" fullname="M. Handley">
            <organization/>
          </author>
          <author initials="H." surname="Holbrook" fullname="H. Holbrook">
            <organization/>
          </author>
          <author initials="I." surname="Kouvelas" fullname="I. Kouvelas">
            <organization/>
          </author>
          <author initials="R." surname="Parekh" fullname="R. Parekh">
            <organization/>
          </author>
          <author initials="Z." surname="Zhang" fullname="Z. Zhang">
            <organization/>
          </author>
          <author initials="L." surname="Zheng" fullname="L. Zheng">
            <organization/>
          </author>
          <date year="2016" month="March"/>
          <abstract>
            <t>This document specifies Protocol Independent Multicast - Sparse Mode (PIM-SM).  PIM-SM is a multicast routing protocol that can use the underlying unicast routing information base or a separate multicast-capable routing information base.  It builds unidirectional shared trees rooted at a Rendezvous Point (RP) per group, and it optionally creates shortest-path trees per source.</t>
            <t>This document obsoletes RFC 4601 by replacing it, addresses the errata filed against it, removes the optional (*,*,RP), PIM Multicast Border Router features and authentication using IPsec that lack sufficient deployment experience (see Appendix A), and moves the PIM specification to Internet Standard.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC7950" target="https://www.rfc-editor.org/info/rfc7950">
        <front>
          <title>The YANG 1.1 Data Modeling Language</title>
          <seriesInfo name="DOI" value="10.17487/RFC7950"/>
          <seriesInfo name="RFC" value="7950"/>
          <author initials="M." surname="Bjorklund" fullname="M. Bjorklund" role="editor">
            <organization/>
          </author>
          <date year="2016" month="August"/>
          <abstract>
            <t>YANG is a data modeling language used to model configuration data, state data, Remote Procedure Calls, and notifications for network management protocols.  This document describes the syntax and semantics of version 1.1 of the YANG language.  YANG version 1.1 is a maintenance release of the YANG language, addressing ambiguities and defects in the original specification.  There are a small number of backward incompatibilities from YANG version 1.  This document also specifies the YANG mappings to the Network Configuration Protocol (NETCONF).</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC8028" target="https://www.rfc-editor.org/info/rfc8028">
        <front>
          <title>First-Hop Router Selection by Hosts in a Multi-Prefix Network</title>
          <seriesInfo name="DOI" value="10.17487/RFC8028"/>
          <seriesInfo name="RFC" value="8028"/>
          <author initials="F." surname="Baker" fullname="F. Baker">
            <organization/>
          </author>
          <author initials="B." surname="Carpenter" fullname="B. Carpenter">
            <organization/>
          </author>
          <date year="2016" month="November"/>
          <abstract>
            <t>This document describes expected IPv6 host behavior in a scenario that has more than one prefix, each allocated by an upstream network that is assumed to implement BCP 38 ingress filtering, when the host has multiple routers to choose from.  It also applies to other scenarios such as the usage of stateful firewalls that effectively act as address-based filters.  Host behavior in choosing a first-hop router may interact with source address selection in a given implementation.  However, the selection of the source address for a packet is done before the first-hop router for that packet is chosen. Given that the network or host is, or appears to be, multihomed with multiple provider-allocated addresses, that the host has elected to use a source address in a given prefix, and that some but not all neighboring routers are advertising that prefix in their Router Advertisement Prefix Information Options, this document specifies to which router a host should present its transmission.  It updates RFC 4861.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126">
        <front>
          <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="BCP" value="26"/>
          <author initials="M." surname="Cotton" fullname="M. Cotton">
            <organization/>
          </author>
          <author initials="B." surname="Leiba" fullname="B. Leiba">
            <organization/>
          </author>
          <author initials="T." surname="Narten" fullname="T. Narten">
            <organization/>
          </author>
          <date year="2017" month="June"/>
          <abstract>
            <t>Many protocols make use of points of extensibility that use constants to identify various protocol parameters.  To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper.  For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
            <t>To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed.  This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
            <t>This is the third edition of this document; it obsoletes RFC 5226.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC8366" target="https://www.rfc-editor.org/info/rfc8366">
        <front>
          <title>A Voucher Artifact for Bootstrapping Protocols</title>
          <seriesInfo name="DOI" value="10.17487/RFC8366"/>
          <seriesInfo name="RFC" value="8366"/>
          <author initials="K." surname="Watsen" fullname="K. Watsen">
            <organization/>
          </author>
          <author initials="M." surname="Richardson" fullname="M. Richardson">
            <organization/>
          </author>
          <author initials="M." surname="Pritikin" fullname="M. Pritikin">
            <organization/>
          </author>
          <author initials="T." surname="Eckert" fullname="T. Eckert">
            <organization/>
          </author>
          <date year="2018" month="May"/>
          <abstract>
            <t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a "voucher".</t>
            <t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA).</t>
            <t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC8316" target="https://www.rfc-editor.org/info/rfc8316">
        <front>
          <title>Autonomic Networking Use Case for Distributed Detection of Service Level Agreement (SLA) Violations</title>
          <seriesInfo name="DOI" value="10.17487/RFC8316"/>
          <seriesInfo name="RFC" value="8316"/>
          <author initials="J." surname="Nobre" fullname="J. Nobre">
            <organization/>
          </author>
          <author initials="L." surname="Granville" fullname="L. Granville">
            <organization/>
          </author>
          <author initials="A." surname="Clemm" fullname="A. Clemm">
            <organization/>
          </author>
          <author initials="A." surname="Gonzalez Prieto" fullname="A. Gonzalez Prieto">
            <organization/>
          </author>
          <date year="2018" month="February"/>
          <abstract>
            <t>This document describes an experimental use case that employs autonomic networking for the monitoring of Service Level Agreements (SLAs).  The use case is for detecting violations of SLAs in a distributed fashion.  It strives to optimize and dynamically adapt the autonomic deployment of active measurement probes in a way that maximizes the likelihood of detecting service-level violations with a given resource budget to perform active measurements.  This optimization and adaptation should be done without any outside guidance or intervention.</t>
            <t>This document is a product of the IRTF Network Management Research Group (NMRG).  It is published for informational purposes.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC8368" target="https://www.rfc-editor.org/info/rfc8368">
        <front>
          <title>Using an Autonomic Control Plane for Stable Connectivity of Network Operations, Administration, and Maintenance (OAM)</title>
          <seriesInfo name="DOI" value="10.17487/RFC8368"/>
          <seriesInfo name="RFC" value="8368"/>
          <author initials="T." surname="Eckert" fullname="T. Eckert" role="editor">
            <organization/>
          </author>
          <author initials="M." surname="Behringer" fullname="M. Behringer">
            <organization/>
          </author>
          <date year="2018" month="May"/>
          <abstract>
            <t>Operations, Administration, and Maintenance (OAM), as per BCP 161, for data networks is often subject to the problem of circular dependencies when relying on connectivity provided by the network to be managed for the OAM purposes.</t>
            <t>Provisioning while bringing up devices and networks tends to be more difficult to automate than service provisioning later on.  Changes in core network functions impacting reachability cannot be automated because of ongoing connectivity requirements for the OAM equipment itself, and widely used OAM protocols are not secure enough to be carried across the network without security concerns.</t>
            <t>This document describes how to integrate OAM processes with an autonomic control plane in order to provide stable and secure connectivity for those OAM processes.  This connectivity is not subject to the aforementioned circular dependencies.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC8398" target="https://www.rfc-editor.org/info/rfc8398">
        <front>
          <title>Internationalized Email Addresses in X.509 Certificates</title>
          <seriesInfo name="DOI" value="10.17487/RFC8398"/>
          <seriesInfo name="RFC" value="8398"/>
          <author initials="A." surname="Melnikov" fullname="A. Melnikov" role="editor">
            <organization/>
          </author>
          <author initials="W." surname="Chuang" fullname="W. Chuang" role="editor">
            <organization/>
          </author>
          <date year="2018" month="May"/>
          <abstract>
            <t>This document defines a new name form for inclusion in the otherName field of an X.509 Subject Alternative Name and Issuer Alternative Name extension that allows a certificate subject to be associated with an internationalized email address.</t>
            <t>This document updates RFC 5280.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC8402" target="https://www.rfc-editor.org/info/rfc8402">
        <front>
          <title>Segment Routing Architecture</title>
          <seriesInfo name="DOI" value="10.17487/RFC8402"/>
          <seriesInfo name="RFC" value="8402"/>
          <author initials="C." surname="Filsfils" fullname="C. Filsfils" role="editor">
            <organization/>
          </author>
          <author initials="S." surname="Previdi" fullname="S. Previdi" role="editor">
            <organization/>
          </author>
          <author initials="L." surname="Ginsberg" fullname="L. Ginsberg">
            <organization/>
          </author>
          <author initials="B." surname="Decraene" fullname="B. Decraene">
            <organization/>
          </author>
          <author initials="S." surname="Litkowski" fullname="S. Litkowski">
            <organization/>
          </author>
          <author initials="R." surname="Shakir" fullname="R. Shakir">
            <organization/>
          </author>
          <date year="2018" month="July"/>
          <abstract>
            <t>Segment Routing (SR) leverages the source routing paradigm.  A node steers a packet through an ordered list of instructions, called "segments".  A segment can represent any instruction, topological or service based.  A segment can have a semantic local to an SR node or global within an SR domain.  SR provides a mechanism that allows a flow to be restricted to a specific topological path, while maintaining per-flow state only at the ingress node(s) to the SR domain.</t>
            <t>SR can be directly applied to the MPLS architecture with no change to the forwarding plane.  A segment is encoded as an MPLS label.  An ordered list of segments is encoded as a stack of labels.  The segment to process is on the top of the stack.  Upon completion of a segment, the related label is popped from the stack.</t>
            <t>SR can be applied to the IPv6 architecture, with a new type of routing header.  A segment is encoded as an IPv6 address.  An ordered list of segments is encoded as an ordered list of IPv6 addresses in the routing header.  The active segment is indicated by the Destination Address (DA) of the packet.  The next active segment is indicated by a pointer in the new routing header.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="RFC8572" target="https://www.rfc-editor.org/info/rfc8572">
        <front>
          <title>Secure Zero Touch Provisioning (SZTP)</title>
          <seriesInfo name="DOI" value="10.17487/RFC8572"/>
          <seriesInfo name="RFC" value="8572"/>
          <author initials="K." surname="Watsen" fullname="K. Watsen">
            <organization/>
          </author>
          <author initials="I." surname="Farrer" fullname="I. Farrer">
            <organization/>
          </author>
          <author initials="M." surname="Abrahamsson" fullname="M. Abrahamsson">
            <organization/>
          </author>
          <date year="2019" month="April"/>
          <abstract>
            <t>This document presents a technique to securely provision a networking device when it is booting in a factory-default state.  Variations in the solution enable it to be used on both public and private networks.  The provisioning steps are able to update the boot image, commit an initial configuration, and execute arbitrary scripts to address auxiliary needs.  The updated device is subsequently able to establish secure connections with other systems.  For instance, a device may establish NETCONF (RFC 6241) and/or RESTCONF (RFC 8040) connections with deployment-specific network management systems.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="I-D.ietf-anima-reference-model" target="http://www.ietf.org/internet-drafts/draft-ietf-anima-reference-model-10.txt">
        <front>
          <title>A Reference Model for Autonomic Networking</title>
          <seriesInfo name="Internet-Draft" value="draft-ietf-anima-reference-model-10"/>
          <author initials="M" surname="Behringer" fullname="Michael Behringer">
            <organization/>
          </author>
          <author initials="B" surname="Carpenter" fullname="Brian Carpenter">
            <organization/>
          </author>
          <author initials="T" surname="Eckert" fullname="Toerless Eckert">
            <organization/>
          </author>
          <author initials="L" surname="Ciavaglia" fullname="Laurent Ciavaglia">
            <organization/>
          </author>
          <author initials="J" surname="Nobre" fullname="Jeferson Nobre">
            <organization/>
          </author>
          <date month="November" day="22" year="2018"/>
          <abstract>
            <t>This document describes a reference model for Autonomic Networking for managed networks.  It defines the behaviour of an autonomic node, how the various elements in an autonomic context work together, and how autonomic services can use the infrastructure.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="I-D.eckert-anima-noc-autoconfig" target="http://www.ietf.org/internet-drafts/draft-eckert-anima-noc-autoconfig-00.txt">
        <front>
          <title>Autoconfiguration of NOC services in ACP networks via GRASP</title>
          <seriesInfo name="Internet-Draft" value="draft-eckert-anima-noc-autoconfig-00"/>
          <author initials="T" surname="Eckert" fullname="Toerless Eckert">
            <organization/>
          </author>
          <date month="July" day="2" year="2018"/>
          <abstract>
            <t>This document defines standards for the autoconfiguration of crucial NOC services on ACP nodes via GRASP.  It enables secure remote access to zero-touch bootstrapped ANI devices via SSH/Netconf with Radius/ Diameter authentication and authorization and provides lifecycle autoconfiguration for other crucial services such as syslog, NTP (clock synchronization) and DNS for operational purposes.</t>
          </abstract>
        </front>
      </reference>
      <reference anchor="IEEE-1588-2008" target="http://standards.ieee.org/findstds/standard/1588-2008.html">
        <front>
          <title>
                            IEEE Standard for a Precision Clock Synchronization Protocol for Networked Measurement and Control Systems
                            </title>
          <author fullname="IEEE">
            <organization>IEEE Standards Board</organization>
          </author>
          <date month="December" year="2008"/>
        </front>
      </reference>
      <reference anchor="AR8021" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
        <front>
          <title>
                            IEEE Standard for Local and metropolitan area networks - Secure Device Identity
                            </title>
          <author fullname="WG802.1 - Higher Layer LAN Protocols Working Group">
            <organization>IEEE SA-Standards Board</organization>
          </author>
          <date month="December" year="2009"/>
        </front>
      </reference>
      <reference anchor="IEEE-802.1X" target="http://standards.ieee.org/findstds/standard/802.1X-2010.html">
        <front>
          <title>
                            IEEE Standard for Local and Metropolitan Area Networks: Port-Based Network Access Control
                            </title>
          <author fullname="WG802.1 - Higher Layer LAN Protocols Working Group">
            <organization>IEEE SA-Standards Board</organization>
          </author>
          <date month="February" year="2010"/>
        </front>
      </reference>
      <reference anchor="MACSEC" target="https://standards.ieee.org/findstds/standard/802.1AE-2006.html">
        <front>
          <title>
                            IEEE Standard for Local and Metropolitan Area Networks: Media Access Control (MAC) Security
                            </title>
          <author fullname="WG802.1 - Higher Layer LAN Protocols Working Group">
            <organization>IEEE SA-Standards Board</organization>
          </author>
          <date month="June" year="2006"/>
        </front>
      </reference>
      <reference anchor="LLDP" target="https://standards.ieee.org/findstds/standard/802.1AB-2016.html">
        <front>
          <title>
                            IEEE Standard for Local and Metropolitan Area Networks: Station and Media Access Control Connectivity Discovery
                            </title>
          <author fullname="WG802.1 - Higher Layer LAN Protocols Working Group">
            <organization>IEEE SA-Standards Board</organization>
          </author>
          <date month="June" year="2016"/>
        </front>
      </reference>
      <reference anchor="CABFORUM" target="https://cabforum.org/baseline-requirements-certificate-contents/">
        <front>
          <title>
                                Certificate Contents for Baseline SSL
                            </title>
          <author>
            <organization>CA/Browser Forum</organization>
          </author>
          <date month="Nov" year="2019"/>
        </front>
      </reference>

      <reference anchor="X.509" target="https://www.itu.int/rec/T-REC-X.509">
        <front>
          <title>Information technology - Open Systems Interconnection - The Directory: Public-key and attribute certificate frameworks</title>
          <seriesInfo name="ITU-T Recommendation X.509," value="ISO/IEC 9594-8"/>
          <author>
            <organization>International Telecommunication Union</organization>
          </author>
          <date month="October" year="2016"/>
        </front>
      </reference>

      <reference anchor="X.520" target="https://www.itu.int/rec/T-REC-X.520">
        <front>
          <title>Information technology - Open Systems Interconnection - The Directory: Selected attribute types</title>
          <seriesInfo name="ITU-T Recommendation X.520," value="ISO/IEC 9594-6"/>
          <author>
            <organization>International Telecommunication Union</organization>
          </author>
          <date month="October" year="2016"/>
        </front>
      </reference>

      <reference anchor="I-D.ietf-roll-applicability-template" target="http://www.ietf.org/internet-drafts/draft-ietf-roll-applicability-template-09.txt">
        <front>
          <title>ROLL Applicability Statement Template</title>
          <seriesInfo name="Internet-Draft" value="draft-ietf-roll-applicability-template-09"/>
          <author initials="M" surname="Richardson" fullname="Michael Richardson">
            <organization/>
          </author>
          <date month="May" day="3" year="2016"/>
          <abstract>
            <t>This document is a template applicability statement for the Routing over Low-power and Lossy Networks (ROLL) WG.  This document is not for publication, but rather is to be used as a template.</t>
          </abstract>
        </front>
      </reference>
    </references>
    <section anchor="further" numbered="true" toc="default">
      <name>Background and Futures (Informative)</name>
      <t>The following sections discuss additional background information about aspects of the normative parts of this document or associated mechanisms such as BRSKI (such as why specific choices were made by the ACP) and they provide discussion about possible future variations of the ACP.</t>
      <section anchor="address-spaces" numbered="true" toc="default">
        <name>ACP Address Space Schemes</name>
        <t>This document defines the Zone, Vlong and Manual sub
address schemes primarily to support address prefix assignment
via distributed, potentially uncoordinated ACP registrars as defined
in <xref target="acp-registrars" format="default"/>. This
costs 48/46-bit identifier so that these ACP registrar can assign
non-conflicting address prefixes. This design does not leave enough
bits to simultaneously support a large number of nodes (Node-ID)
plus a large prefix of local addresses for every node plus a
large enough set of bits to identify a routing Zone. In result,
Zone, Vlong 8/16 attempt to support all features, but in via 
separate prefixes.</t>
        <t>In networks that always expect to rely on a centralized PMS
as described above (<xref target="pms" format="default"/>), the 48/46-bits for
the Registrar-ID could be saved. Such variations of the ACP
addressing mechanisms could be introduced through future work
in different ways. If a new otherName was introduced, 
incompatible ACP variations could be created
where every design aspect of the ACP could be changed. Including
all addressing choices. If instead a new addressing sub-type
would be defined, it could be a backward compatible extension
of this ACP specification. Information such as the size of a
zone-prefix and the length of the prefix assigned to the ACP
node itself could be encoded via the extension field of the
acp-node-name.</t>
        <t>Note that an explicitly defined "Manual" addressing sub-scheme
is always beneficial to provide an easy way for ACP nodes to prohibit
incorrect manual configuration of any non-"Manual" ACP address spaces
and therefore ensure that "Manual" operations will never impact 
correct routing for any non-"Manual" ACP addresses assigned via
ACP certificates.</t>
      </section>
      <section anchor="bootstrap" numbered="true" toc="default">
        <name>BRSKI Bootstrap (ANI)</name>
        <t>BRSKI describes how nodes with an IDevID certificate can securely and zero-touch enroll with an LDevID certificate to support the ACP.  BRSKI also leverages the ACP to enable zero-touch bootstrap of new nodes across networks without any configuration requirements across the transit nodes (e.g., no DHCP/DNS forwarding/server setup).  This includes otherwise not configured networks as described in <xref target="secure-bootstrap" format="default"/>.  Therefore BRSKI in conjunction with ACP provides for a secure and zero-touch management solution for complete networks.  Nodes supporting such an infrastructure (BRSKI and ACP) are called ANI nodes (Autonomic Networking Infrastructure), see <xref target="I-D.ietf-anima-reference-model" format="default"/>.  Nodes that do not support an IDevID certiificate but only an (insecure) vendor specific Unique Device Identifier (UDI) or nodes whose manufacturer does not support a MASA could use some future security reduced version of BRSKI.</t>
        <t>When BRSKI is used to provision a domain certificate (which is called enrollment), the BRSKI registrar (acting as an enhanced EST server) must include the otherName / AcpNode encoded ACP address and domain name to the enrolling node (called pledge) via its response to the pledges EST CSR Attribute request that is mandatory in BRSKI.</t>
        <t>The Certification Authority in an ACP network must not change the otherName / AcpNode in the certificate.  The ACP nodes can therefore find their ACP address and domain using this field in the domain certificate, both for themselves, as well as for other nodes.</t>
        <t>The use of BRSKI in conjunction with the ACP can also help to further simplify maintenance and renewal of domain certificates.  Instead of relying on CRL, the lifetime of certificates can be made extremely small, for example in the order of hours.  When a node fails to connect to the ACP within its certificate lifetime, it cannot connect to the ACP to renew its certificate across it (using just EST), but it can still renew its certificate as an "enrolled/expired pledge" via the BRSKI bootstrap proxy.  This requires only that the BRSKI registrar honors expired domain certificates and that the pledge attempts to perform TLS authentication for BRSKI bootstrap using its expired domain certificate before falling back to attempting to use its IDevID certificate for BRSKI.  This mechanism could also render CRLs unnecessary because the BRSKI registrar in conjunction with the CA would not renew revoked certificates - only a "Do-not-renew" list would be necessary on BRSKI registrars/CA.</t>
        <t>In the absence of BRSKI or less secure variants thereof, provisioning of certificates may involve one or more touches or non-standardized automation.  Node vendors usually support provisioning of certificates into nodes via PKCS#7 (see <xref target="RFC2315" format="default"/>) and may support this provisioning through vendor specific models via Netconf (<xref target="RFC6241" format="default"/>).  If such nodes also support Netconf Zero-Touch (<xref target="RFC8572" format="default"/>) then this can be combined to zero-touch provisioning of domain certificates into nodes.  Unless there are equivalent integration of Netconf connections across the ACP as there is in BRSKI, this combination would not support zero-touch bootstrap across a not configured network though.</t>
      </section>
      <section anchor="discovery" numbered="true" toc="default">
        <name>ACP Neighbor discovery protocol selection</name>
        <t>This section discusses why GRASP DULL was chosen as the discovery protocol
for L2 adjacent candidate ACP neighbors.  The contenders considered where GRASP, mDNS or LLDP.</t>
        <section anchor="discovery-lldp" numbered="true" toc="default">
          <name>LLDP</name>
          <t>LLDP and Cisco's earlier Cisco Discovery Protocol (CDP) are example of L2 discovery protocols that terminate
their messages on L2 ports.  If those protocols would be chosen for ACP neighbor discovery,
ACP neighbor discovery would therefore also terminate on L2 ports.  This would prevent ACP construction
over non-ACP capable but LLDP or CDP enabled L2 switches.  LLDP has extensions using different MAC
addresses and this could have been an option for ACP discovery as well, but the additional required
IEEE standardization and definition of a profile for such a modified instance of LLDP seemed to be
more work than the benefit of "reusing the existing protocol" LLDP for this very simple purpose.</t>
        </section>
        <!-- discovery-lldp -->
        <section anchor="discovery-mdns" numbered="true" toc="default">
          <name>mDNS and L2 support</name>
          <t>Multicast DNNS (mDNS) <xref target="RFC6762" format="default"/> with DNS Service Discovery (DNS-SD) Resource Records (RRs) as defined in <xref target="RFC6763" format="default"/>
is a key contender as an ACP discovery protocol. because it relies on link-local IP multicast,
it does operates at the subnet level, and is also found in L2 switches.  The authors
of this document are not aware of mDNS implementation that terminate their mDNS messages
on L2 ports instead of the subnet level.  If mDNS was used as the ACP discovery mechanism on
an ACP capable (L3)/L2 switch as outlined in <xref target="acp-l2-switches" format="default"/>, then this would
be necessary to implement.  It is likely that termination of mDNS messages could only be applied to
all mDNS messages from such a port, which would then make it necessary to software forward any non-ACP
 related mDNS messages to maintain prior non-ACP mDNS functionality.  Adding support for ACP into such
 L2 switches with mDNS could therefore create regression problems for prior mDNS functionality on those nodes.
With low performance of software forwarding in many L2 switches, this could also make the ACP
risky to support on such L2 switches.</t>
        </section>
        <!-- discovery-mdns -->
        <section anchor="discovery-comparison" numbered="true" toc="default">
          <name>Why DULL GRASP</name>
          <t>LLDP was not considered because of the above mentioned issues. mDNS was not selected
because of the above L2 mDNS considerations and because of the following additional points:</t>
          <t>If mDNS was not already existing in a node, it would be more work to implement than
DULL GRASP, and if an existing implementation of mDNS was used, it would likely be more code
space than a separate implementation of DULL GRASP or a shared implementation of DULL
GRASP and GRASP in the ACP.</t>
        </section>
        <!-- discovery-comparison -->
      </section>
      <!-- discovery-->
      <section anchor="why-rpl" numbered="true" toc="default">
        <name>Choice of routing protocol (RPL)</name>
        <t>This section motivates why RPL - "IPv6 Routing Protocol for Low-Power and Lossy Networks (<xref target="RFC6550" format="default"/> was chosen as the default (and in this specification only) routing protocol for the ACP.  The choice and above explained profile was derived from a pre-standard implementation of ACP that was successfully deployed in operational networks.</t>
        <t>Requirements for routing in the ACP are:
                        </t>
        <ul spacing="compact">
          <li>Self-management: The ACP must build automatically, without human intervention.  Therefore routing protocol must also work completely automatically.  RPL is a simple, self-managing protocol, which does not require zones or areas; it is also self-configuring, since configuration is carried as part of the protocol (see Section 6.7.6 of <xref target="RFC6550" format="default"/>).</li>
          <li>Scale: The ACP builds over an entire domain, which could be a large enterprise or service provider network.  The routing protocol must therefore support domains of 100,000 nodes or more, ideally without the need for zoning or separation into areas.  RPL has this scale property.  This is based on extensive use of default routing.</li>
          <li>Low resource consumption: The ACP supports traditional network infrastructure, thus runs in addition to traditional protocols.  The ACP, and specifically the routing protocol must have low resource consumption both in terms of memory and CPU requirements.  Specifically, at edge nodes, where memory and CPU are scarce, consumption should be minimal.  RPL builds a DODAG, where the main resource consumption is at the root of the DODAG.  The closer to the edge of the network, the less state needs to be maintained.  This adapts nicely to the typical network design.  Also, all changes below a common parent node are kept below that parent node.</li>
          <li>Support for unstructured address space: In the Autonomic Networking Infrastructure, node addresses are identifiers, and may not be assigned in a topological way.  Also, nodes may move topologically, without changing their address.  Therefore, the routing protocol must support completely unstructured address space.  RPL is specifically made for mobile ad-hoc networks, with no assumptions on topologically aligned addressing.</li>
          <li>Modularity: To keep the initial implementation small, yet allow later for more complex methods, it is highly desirable that the routing protocol has a simple base functionality, but can import new functional modules if needed.  RPL has this property with the concept of "objective function", which is a plugin to modify routing behavior.</li>
          <li>Extensibility: Since the Autonomic Networking Infrastructure is a new concept, it is likely that changes in the way of operation will happen over time.  RPL allows for new objective functions to be introduced later, which allow changes to the way the routing protocol creates the DAGs.</li>
          <li>Multi-topology support: It may become necessary in the future to support more than one DODAG for different purposes, using different objective functions.  RPL allow for the creation of several parallel DODAGs, should this be required.  This could be used to create different topologies to reach different roots.</li>
          <li>No need for path optimization: RPL does not necessarily compute the optimal path between any two nodes.  However, the ACP does not require this today, since it carries mainly non-delay-sensitive feedback loops.  It is possible that different optimization schemes become necessary in the future, but RPL can be expanded (see point "Extensibility" above).</li>
        </ul>
      </section>
      <section anchor="acp-grasp" numbered="true" toc="default">
        <name>ACP Information Distribution and multicast</name>
        <t>IP multicast is not used by the ACP because the ANI (Autonomic Networking Infrastructure) itself does not require IP multicast 
        but only service announcement/discovery.  Using IP multicast for that would have made it
        necessary to develop a zero-touch auto configuring solution for ASM (Any Source Multicast - the original form of IP multicast defined in <xref target="RFC1112" format="default"/>), which
        would be quite complex and difficult to justify.  One aspect of complexity
        where no attempt at a solution has been described
        in IETF documents is the automatic-selection of 
        routers that should be PIM Sparse Mode (PIM-SM) Rendezvous Points (RPs) (see <xref target="RFC7761" format="default"/>).  The other aspects of complexity
        are the implementation of MLD (<xref target="RFC4604" format="default"/>), PIM-SM and Anycast-RP (see <xref target="RFC4610" format="default"/>).  If those implementations already
        exist in a product, then they would be very likely tied to accelerated forwarding
        which consumes hardware resources, and that in return is difficult to justify as a cost
        of performing only service discovery.</t>
        <t>Some future ASA may need high performance in-network data replication.  That is the case
        when the use of IP multicast is justified.  Such an ASA can then use service discovery
        from ACP GRASP, and then they do not need ASM but only SSM (Source Specific Multicast, see <xref target="RFC4607" format="default"/>)
        for the IP multicast replication.  SSM itself can simply be enabled in the Data-Plane
        (or even in an update to the ACP) without any other configuration than just enabling it
        on all nodes and only requires a simpler version of MLD (see <xref target="RFC5790" format="default"/>).</t>
        <t>LSP (Link State Protocol) based IGP routing protocols typically have a mechanism to
        flood information, and such a mechanism could be used to flood GRASP objectives by
        defining them to be information of that IGP.  This would be a possible optimization
        in future variations of the ACP that do use an LSP routing protocol.  Note though that 
        such a mechanism would not work easily for GRASP M_DISCOVERY messages which are intelligently
        (constrained) flooded not across the whole ACP, but only up to a node where a responder is found.
        We do expect that many future services in ASA will have only few consuming ASA, and for those cases,
        M_DISCOVERY is the more efficient method than flooding across the whole domain.</t>
        <t>Because the ACP uses RPL, one desirable future extension is to use RPLs existing 
        notion of DODAG, which are loop-free distribution trees, to make GRASP flooding more efficient
        both for M_FLOOD and M_DISCOVERY. See <xref target="ACP_interfaces" format="default"/> how this will be
        specifically beneficial when using NBMA interfaces.  This
        is not currently specified in this document because it is not quite clear yet what
        exactly the implications are to make GRASP flooding depend on RPL DODAG convergence
        and how difficult it would be to let GRASP flooding access the DODAG information.</t>
      </section>
      <section anchor="extending-acp-channels" numbered="true" toc="default">
        <name>Extending ACP channel negotiation (via GRASP)</name>

        <t>[RFC Editor: This section to be removed before RFC.</t>
        <t>[This section kept for informational purposes up until the last draft version as that would be the version that readers interested in the changelog would also go to to revisit it.]</t>
        <t>The mechanism described in the normative part of this document to support multiple different ACP secure channel protocols without a single network wide MTI protocol is important to allow extending secure ACP channel protocols beyond what is specified in this document, but it will run into problem if it would be used for multiple protocols:</t>
        <t>The need to potentially have multiple of these security associations even temporarily run in  parallel to determine which of them works best does not support the most lightweight implementation options.</t>
        <t>The simple policy of letting one side (the Decider) decide what is best may not lead to the mutual best result.</t>
        <t>The two limitations can easier be solved if the solution was more modular and as few as possible initial secure channel negotiation protocols would be used, and these protocols would then take on the responsibility to support more flexible objectives to negotiate the mutually preferred ACP security channel protocol.</t>
        <t>IKEv2 is the IETF standard protocol to negotiate network security associations.  It is meant to be extensible, but it is unclear whether it would be feasible to extend IKEv2 to support possible future requirements for ACP secure channel negotiation:</t>
        <t>Consider the simple case where the use of native IPsec vs. IPsec via GRE is to be negotiated and the objective is the maximum throughput.  Both sides would indicate some agreed upon performance metric and the preferred encapsulation is the one with the higher performance of the slower side.  IKEv2 does not support negotiation with such objectives.</t>
        <t>Consider DTLS and some form of MacSec are to be added as negotiation options - and the performance objective should work across all IPsec, DTLS and MacSec options.  In the case of MacSEC, the negotiation would also
need to determine a key for the peering.  It is unclear if it would be even appropriate to consider
extending the scope of negotiation in IKEv2 to those cases.  Even if feasible to define, it is unclear if
implementations of IKEv2 would be eager to adopt those type of extension given the long cycles of security
testing that necessarily goes along with core security protocols such as IKEv2 implementations.</t>
        <t>A more modular alternative to extending IKEv2 could be to layer a modular negotiation mechanism on top of
the multitude of existing or possible future secure channel protocols.  For this, GRASP over TLS could be
considered as a first ACP secure channel negotiation protocol.  The following are initial considerations for
such an approach.  A full specification is subject to a separate document:</t>
        <t>To explicitly allow negotiation of the ACP channel protocol, GRASP over a TLS connection using the GRASP_LISTEN_PORT and the node's and peer's link-local IPv6 address is used.  When both peers support GRASP negotiation, they do prefer it over any other non-explicitly negotiated security association protocol and should wait trying any non-negotiated ACP channel protocol until after it is clear that GRASP/TLS will not work to the peer.</t>
        <t>When the two peers successfully establish the GRASP/TSL session, they will negotiate the channel mechanism to use using objectives such as performance and perceived quality of the security.  After agreeing on a channel mechanism, they start the selected Channel protocol steps via appropriate GRASP messages.  Once the secure channel protocol is successfully running, the GRASP/TLS connection can be kept alive or timed out as long as the selected channel protocol has a secure association between the two peers.  When it terminates, it needs to be re-negotiated via GRASP/TLS.</t>
        <t>Notes:</t>
        <ul spacing="compact">
          <li>Negotiation of a channel type may require IANA assignments of code points.</li>
          <li>TLS is subject to reset attacks, which IKEv2 is not.  Normally, ACP connections (as specified in this document) will be over link-local addresses so the attack surface for this one issue in TCP should be reduced (note that this may not be true when ACP is tunneled as described in <xref target="conf-tunnel" format="default"/>.</li>
          <li>GRASP packets received inside a TLS connection established for GRASP/TLS ACP negotiation are assigned to a separate GRASP domain unique to that TLS connection.</li>
        </ul>
      </section>
      <section anchor="domain-usage" numbered="true" toc="default">
        <name>CAs, domains and routing subdomains</name>
        <t>There is a wide range of setting up different ACP solution by appropriately using CAs and the domain and rsub elements in the acp-node-name in the domain certificate.  We summarize these options here as they have been explained in different parts of the document in before and discuss possible and desirable extensions:</t>
        <t>An ACP domain is the set of all ACP nodes that can authenticate each other as belonging to the same ACP network using the ACP domain membership check (<xref target="certcheck" format="default"/>).  GRASP inside the ACP is run across all transitively connected ACP nodes in a domain.</t>
        <t>The rsub element in the acp-node-name permits the use of addresses from different ULA prefixes.  One use case is to create multiple physical networks that initially may be separated with one ACP domain but different routing subdomains, so that all nodes can mutual trust their ACP certificates (not depending on rsub) and so that they could connect later together into a contiguous ACP network.</t>
        <t>One instance of such a use case is an ACP for regions interconnected via a non-ACP enabled core, for example due to the absence of product support for ACP on the core nodes. ACP connect configurations as defined in this document can be used to extend and interconnect those ACP islands to the NOC and merge them into a single ACP when later that product support gap is closed.</t>
        <t>Note that RPL scales very well.  It is not necessary to use multiple routing subdomains to scale ACP domains in a way that would be required if other routing protocols where used.  They exist only as options for the above mentioned reasons.</t>
        <t>If different ACP domains are to be created that should not allow to connect to each other by default, these ACP domains simply need to have different domain elements in the acp-node-name.  These domain elements can be arbitrary, including subdomains of one another: Domains "example.com" and "research.example.com" are separate domains if both are domain elements in the acp-node-name of certificates.</t>
        <t>It is not necessary to have a separate CA for different ACP domains: an operator can use a single CA to sign certificates for multiple ACP domains that are not allowed to connect to each other because the checks for ACP adjacencies includes comparison of the domain part.</t>
        <t>If multiple independent networks choose the same domain name but had their own CA, these would not form a single ACP domain because of CA mismatch.  Therefore there is no problem in choosing domain names that are potentially also used by others.  Nevertheless it is highly recommended to use domain names that one can have high probability to be unique.  It is recommended to use domain names that start with a DNS domain names owned by the assigning organization and unique within it.  For example "acp.example.com" if you own "example.com".</t>
      </section>
      <section anchor="intent" numbered="true" toc="default">
        <name>Intent for the ACP</name>
        <t>Intent is the architecture component of autonomic networks according to
 <xref target="I-D.ietf-anima-reference-model" format="default"/> that allows operators to issue policies to
the network.  Its applicability for use is quite  flexible and freeform, with potential applications including
policies flooded across ACP GRASP and interpreted on every ACP node.</t>
        <t>One concern for future definitions of Intent solutions is the problem of circular dependencies
when expressing Intent policies about the ACP itself.</t>
        <t>For example, Intent could indicate the desire to build an ACP across all domains
that have a common parent domain (without relying on the rsub/routing-subdomain
solution defined in this document).  For example ACP nodes with domain "example.com",
 "access.example.com", "core.example.com" and "city.core.example.com"
should all establish one single ACP.</t>
        <t>If each domain has its own source of Intent, then the Intent would simply have to
allow adding the peer domains TA and domain names to the parameters for the ACP domain membership check
(<xref target="certcheck" format="default"/>) so that nodes from those other domains are accepted as ACP peers.</t>
        <t>If this Intent was to be originated only from one domain, it could likely not be made
to work because the other domains will not build any ACP connection amongst each other,
whether they use the same or different CA due to the ACP domain membership check.</t>
        <t>If the  domains use the same CA one could change the ACP setup to permit for the
ACP to be established between two ACP nodes with different acp-domain-names, but only
 for the purpose of disseminating limited information,
such as Intent, but not to set up full ACP connectivity, specifically not RPL routing
and passing of arbitrary GRASP information.  Unless the Intent policies permit this
 to happen across domain boundaries.</t>
        <t>This type of approach where the ACP first allows Intent to operate and only then
sets up the rest of ACP connectivity  based on Intent policy could also be used to
enable Intent policies that would limit functionality across the ACP inside a domain,
as long as no policy would disturb the distribution of Intent. For example to limit
reachability across the ACP to certain type of nodes or locations of nodes.</t>
      </section>
      <section anchor="reuse-acp" numbered="true" toc="default">
        <name>Adopting ACP concepts for other environments</name>
        <t>The ACP as specified in this document is very explicit about the choice of options to
allow interoperable implementations.  The choices made may not be the best for all environments,
but the concepts used by the ACP can be used to build derived solutions:</t>
        <t>The ACP specifies the use of ULA and deriving its prefix from the domain name
so that no address allocation is required to deploy the ACP. The ACP will equally
work not using ULA but any other /48 IPv6 prefix.  This prefix could simply be a configuration 
of the ACP registrars (for example when using BRSKI) to enroll the domain certificates - instead
of the ACP registrar deriving the /48 ULA prefix from the AN domain name.</t>

        <t>Some solutions may already have an auto-addressing scheme, for example derived from 
existing unique device identifiers (e.g., MAC addresses).  In those cases it may not be desirable
to assign addresses to devices via the ACP address information field in the way described
in this document.  The certificate may simply serve to identify the ACP domain, 
and the address field could be omitted. The only fix required in the remaining
way the ACP operate is to define another element in the domain certificate for
the two peers to decide who is the Decider and who is the Follower during secure channel building. 
Note though that future work may leverage the acp address to authenticate "ownership"
of the address by the device.  If the address used by a device is derived from some
pre-existing permanent local ID (such as MAC address), then it would be useful to
store that address in the certificate using the format of the access address information
field or in a similar way.</t>

        <t>The ACP is defined as a separate VRF because it intends to support well managed
networks with a wide variety of configurations.  Therefore, reliable,
configuration-indestructible connectivity cannot be achieved from the Data-Plane itself.
In solutions where all transit connectivity impacting functions are fully automated (including security),
indestructible and resilient, it would be possible to eliminate the need for the ACP to be a separate VRF.
Consider the most simple example system in which there is no separate Data-Plane, but the ACP is the Data-Plane.  Add
BRSKI, and it becomes a fully autonomic network - except that it does not support
automatic addressing for user equipment.  This gap can then be closed for example by adding a
solution derived from <xref target="I-D.ietf-anima-prefix-management" format="default"/>.</t>
        <t>TCP/TLS as the protocols to provide reliability and security to GRASP in the ACP
may not be the preferred choice in constrained networks. For example, CoAP/DTLS
(Constrained Application Protocol) may be preferred where they are already used, 
allowing to reduce the additional code space footprint for the ACP on
those devices. Hop-by-hop reliability for ACP GRASP messages could be made
to support protocols like DTLS by adding the same type of
negotiation as defined in this document for ACP secure channel protocol negotiation.
End-to-end GRASP connections can be made to select their transport protocol
in future extensions of the ACP meant to better support constrained devices by
indicating the supported transport protocols (e.g.: TLS/DTLS) via GRASP parameters
of the GRASP objective through which the transport endpoint is discovered.</t>
        <t>The routing protocol RPL used for the ACP does explicitly not optimize
for shortest paths and fastest convergence.  Variations of the ACP may want to use a
different routing protocol or introduce more advanced RPL profiles.</t>
        <t>Variations such as what routing protocol to use, or whether to instantiate an ACP
in a VRF or (as suggested above) as the actual Data-Plane, can be automatically chosen
in implementations built to support multiple options by deriving them from future parameters
in the certificate.  Parameters in certificates should be limited to those that would
not need to be changed more often than certificates would need to be updated anyhow;
Or by ensuring that these parameters can be provisioned before the
variation of an ACP is activated in a node.  Using BRSKI, this could be done for example
as additional follow-up signaling directly after the certificate enrollment, still 
leveraging the BRSKI TLS connection and therefore not introducing any additional
connectivity requirements.</t>
        <t>Last but not least, secure channel protocols including their encapsulations are
easily added to ACP solutions.  ACP hop-by-hop network layer secure channels could
also be replaced by end-to-end security plus other means for infrastructure
protection.  Any future network OAM should always use end-to-end security anyhow and can
leverage the domain certificates and is therefore not dependent on security to
be provided for by ACP secure channels.</t>
      </section>
      <section anchor="futures" numbered="true" toc="default">
        <name>Further (future) options</name>
        <section anchor="auto-aggregation" numbered="true" toc="default">
          <name>Auto-aggregation of routes</name>
          <t>Routing in the ACP according to this specification only leverages the
standard RPL mechanism of route optimization, e.g. keeping only routes that
are not towards the RPL root. This is known to scale to networks with 20,000 or more nodes.
There is no auto-aggregation of routes for /48 ULA prefixes (when using rsub
in the acp-node-name) and/or Zone-ID based prefixes.</t>
          <t>Automatic assignment of Zone-ID and auto-aggregation of routes could
be achieved for example by configuring zone-boundaries, announcing via GRASP
into the zones the zone parameters (zone-ID and /48 ULA prefix) and auto-aggegating
routes on the zone-boundaries. Nodes would assign their Zone-ID and potentially
even /48 prefix based on the GRASP announcements.</t>
        </section>
        <section anchor="dp-dependency" numbered="true" toc="default">
          <name>More options for avoiding IPv6 Data-Plane dependencies</name>
          <t>As described in <xref target="general_addressing" format="default"/>, the ACP depends on the
Data-Plane to establish IPv6 link-local addressing on interfaces. Using a separate
MAC address for the ACP allows to fully isolate the ACP from the Data-Plane in
a way that is compatible with this specification. It is also an ideal option
when using Single-root input/output virtualization (SR-IOV - see 
<eref target="https://en.wikipedia.org/wiki/Single-root_input/output_virtualization"/>)
 in an implementation to isolate the ACP because
different SR-IOV interfaces use different MAC addresses.</t>
          <t>When additional MAC address(es) are not available, separation of the
ACP could be done at different demux points. The same subnet interface could have
a separate IPv6 interface for the ACP and Data-Plane and therefore separate
link-local addresses for both, where the ACP interface is non-configurable on
the Data-Plane. This too would be compatible with this specification and not
impact interoperability.</t>
          <t>An option that would require additional specification is to use a different
Ethertype from 0x86DD (IPv6) to encapsulate IPv6 packets for the ACP. This would
be a similar approach as used for IP authentication packets in <xref target="IEEE-802.1X" format="default"/>
which use the Extensible Authentication Protocol over Local Area Network (EAPoL) 
ethertype (0x88A2).</t>
          <t>Note that in the case of ANI nodes, all the above considerations equally
apply to the encapsulation of BRSKI packets including GRASP used for BRSKI.</t>
        </section>
        <section anchor="acp-api" numbered="true" toc="default">
          <name>ACP APIs and operational models (YANG)</name>
          <t>Future work should define YANG (<xref target="RFC7950" format="default"/>) data model
and/or node internal APIs to monitor and manage the ACP.</t>
          <t>Support for the ACP Adjacency Table (<xref target="adj-table" format="default"/>) and ACP GRASP need to
be included into such model/API.</t>
        </section>
        <section anchor="future-rpl" numbered="true" toc="default">
          <name>RPL enhancements</name>
          <figure anchor="dual-noc">
            <name>Dual NOC</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[

   ..... USA ......              ..... Europe ......

        NOC1                           NOC2
         |                              |
         |            metric 100        |
       ACP1 --------------------------- ACP2  .
         |                              |     . WAN
         | metric 10          metric 20 |     . Core
         |                              |     . 
       ACP3 --------------------------- ACP4  .
         |            metric 100        |
         |                              |     .
         |                              |     . Sites
       ACP10                           ACP11  .
      
        ]]></artwork>
          </figure>
          <t>The profile for RPL specified in this document builds only one spanning-tree path set to a root, typically a registrar in one NOC. In the presence of multiple NOCs, routing toward the non-root NOCs may be suboptimal. <xref target="dual-noc" format="default"/> shows an extreme example. Assuming that node ACP1 becomes the RPL root, traffic between ACP11 and NOC2 will pass through ACP4-ACP3-ACP1-ACP2 instead of ACP4-ACP2 because the RPL calculated DODAG/routes are shortest paths towards the RPL root.</t>
          <t>To overcome these limitations, extensions/modifications to the RPL profile can provide optimality for multiple NOCs.  This requires utilizing Data-Plane artifact including IPinIP encap/decap on ACP routers and processing of IPv6 RPI headers.  Alternatively, (Src,Dst) routing table entries could be used.</t>
          <t>Flooding of ACP GRASP messages can be further constrained and therefore optimized by flooding only via links that are part of the RPL DODAG.</t>
        </section>
        <section anchor="role-assignments" numbered="true" toc="default">
          <name>Role assignments</name>
          <t>ACP connect is an explicit mechanism to "leak" ACP traffic explicitly (for example
in a NOC). It is therefore also a possible security gap when it is easy to enable ACP
 connect on arbitrary compromised ACP nodes.</t>
          <t>One simple solution is to define an extension in the ACP certificates ACP information
field indicating the permission for ACP connect to be configured on that ACP node. This
could similarly be done to decide whether a node is permitted to be a registrar or not.</t>
          <t>Tying the permitted "roles" of an ACP node to the ACP certificate provides
fairly strong protection against misconfiguration, but is still subject to code
modifications.</t>
          <t>Another interesting role to assign to certificates is that of a NOC node. This would allow to
limit certain type of connections such as OAM TLS connections to only NOC initiator
or responders.</t>
        </section>
        <section anchor="l3-transit" numbered="true" toc="default">
          <name>Autonomic L3 transit</name>
          <t>In this specification, the ACP can only establish autonomic connectivity across L2
hops and only explicitly configured options to tunnel across L3. Future work should
specify mechanisms to automatically tunnel ACP across L3 networks. A hub&amp;spoke
option would allow to tunnel across the Internet to a cloud or central instance of the ACP,
a peer-to-peer tunneling mechanism could tunnel ACP islands across an L3VPN infrastructure.</t>
        </section>
        <section anchor="future-diag" numbered="true" toc="default">
          <name>Diagnostics</name>
          <t><xref target="diagnostics" format="default"/> describes diagnostics options that can be done
without changing the external, interoperability affecting characteristics of ACP implementations.</t>
          <t>Even better diagnostics of ACP operations is possible with additional
signaling extensions, such as:</t>
          <ol type="1" spacing="compact">
            <li>Consider if LLDP should be a recommended functionality for ANI devices
    to improve diagnostics, and if so, which information elements it should
    signal (noting that such information is conveyed in an insecure manner). Includes potentially new information elements.</li>
            <li>In alternative to LLDP, A DULL GRASP diagnostics objective could
    be defined to carry these information elements.</li>
            <li>The IDevID certificate of BRSKI pledges should be included in the selected
    insecure diagnostics option. This may be undesirable when exposure of device information is seen as too much of a security issue (ability to deduce possible attack vectors from device model for example).</li>
            <li>A richer set of diagnostics information should be made available
    via the secured ACP channels, using either single-hop GRASP or
    network wide "topology discovery" mechanisms.</li>
          </ol>
        </section>

        <section anchor="compromised" numbered="true" toc="default">
          <name>Avoiding and dealing with compromised ACP nodes</name>
          <t>Compromised ACP nodes pose the biggest risk to the operations of the network.
The most common type of compromise is leakage of credentials to manage/configure
the device and the application of malicious configuration including the change
of access credentials, but not the change of software. Most of todays networking
equipment should have secure boot/software infrastructure anyhow, so attacks
that introduce malicious software should be a lot harder.</t>
          <t>The most important aspect of security design against these type of attacks is
to eliminate password based configuration access methods and instead rely on
certificate based credentials handed out only to nodes where it is clear that
the private keys can not leak. This limits unexpected propagation of credentials.</t>
          <t>If password based credentials to configure devices still need to be supported, they must not be
locally configurable, but only be remotely provisioned or verified (through
protocols like Radius or Diameter), and there must be no local configuration
permitting to change these authentication mechanisms, but ideally they should
be autoconfiguring across the ACP. See <xref target="I-D.eckert-anima-noc-autoconfig" format="default"/>.</t>
          <t>Without physical access to the compromised device, attackers with access to
configuration should not be able to break the ACP connectivity, even when they
can break or otherwise manipulate (spoof) the Data-Plane connectivity through configuration.
To achieve this, it is necessary to avoid providing configuration options for the
ACP, such as enabling/disabling it on interfaces. For example there could be an
ACP configuration that locks down the current ACP config unless factory reseet is done.</t>
          <t>With such means, the valid administration has the best chances to maintain
access to ACP nodes, discover malicious configuration though ongoing configuration
tracking from central locations for example, and to react accordingly.</t>
          <t>The primary reaction is withdrawal/change of credentials, terminate malicious
existing management sessions and fixing the configuration. Ensuring that management
sessions using invalidated credentials are terminated automatically without recourse will
likely require new work.</t>
          <t>Only when these steps are not feasible would it be necessary
to revoke or expire the ACP certificate credentials and consider the node kicked off the network -
until the situation can be further rectified, likely requiring direct physical access to the node.</t>
          <t>Without extensions, compromised ACP nodes can only be removed from the ACP
at the speed of CRL/OCSP information refresh or expiry (and non-removal)
of short lived  certificates. Future extensions to the ACP could for
example use GRASP flooding distribution of triggered updates of CRL/OCSP or
explicit removal indication of the compromised nodes domain certificate.</t>
        </section>

        <section anchor="downgrade" numbered="true" toc="default">
          <name>Detecting ACP secure channel downgrade attacks</name>
          <t>MITM attackers can force downgrade attacks for ACP secure channel selection by filtering/modifying DULL GRASP messages and/or actual secure channel data packets. For example if at some point in time DTLS traffic could be easier decrypted than traffic of IKEv2, the MITM could filter all IKEv2 packets to force ACP nodes to use DTLS (assuming the ACP nodes in question supported both DTLS and IKEv2).</t>
          <t>For cases where such MITM attacks are not capable to inject malicious traffic (but only to decrypt the traffic), a downgrade attack could be discovered after a secure channel connection is established, for example by use of the following type of mechanism:</t>
          <t>After the secure channel connection is established, the two ACP peers negotiate via an appropriate (To Be Defined) GRASP negotiation which ACP secure channel protocol should have been selected between them (in the absence of a MITM attacker). This negotiation would have to signal the DULL GRASP announced ACP secure channel options by each peer followed by an announcement of the preferred secure channel protocol by the ACP peer that is the Decider in the secure channel setup, e.g.: the ACP peer that is deciding which secure channel protocol to pick. If that choosen secure channel protocol is different from the one that actually was choosen, then this mismatch is an indication that there is a MITM attacker or other similar issue (firewall prohibiting the use of specific protocols) that caused a non-preferred secure channel protocol to be chosen. This discovery could then result in mitigation options such as logging and ensueing investigations.</t>
        </section>

      </section>
    </section>
    <!-- further considerations -->
  </back>
</rfc>
<!-- REMOVED this section in version 12 due to feedback by working group
     (Michael Richardson).  Let IETF feedback decide if this additional text
     is necessary

        <section anchor="up4291" title="RFC4291/RFC4193 Updates Considerations">

<t>This document may be considered to be updating the IPv6 addressing architecture
(<xref target="RFC4291"/>) and/or the Unique Local IPv6 Unicast addresses (<xref target="RFC4193"/>)
depending on how strict specific statements in those specs are to be interpreted.
This section summarized and explains the necessity and benefits of these changes.  The normative
parts of this document cover the actual updates.</t>

<t>ACP addresses (<xref target="addressing"/>) are used by network nodes supporting the ACP.  They are
assigned during bootstrap of the nodes or initial provisioning of the ACP.  They
are encoded in the Domain Certificate of the node  and are primarily used internally
within the node.  In that role they can be thought of as Loopback addresses.</t>

<t>Each ACP domain assigns ACP addresses from one or more ULA prefixes.
Within an ACP network, addresses are assigned by nodes called registrars.
A unique Registrar-ID(entifier) is used in ACP addresses to allow multiple registrars
to assign addresses autonomically and uncoordinated from each other.  Typically these
Registrar-IDs are derived from the IEEE 802 48-bit MAC addresses of registrars.</t>

<t>In the ACP Zone Addressing Sub-Scheme (<xref target="zone-scheme"/>), the registrar assigns
a unique 15-bit value to an ACP node.  The ACP address has a 64-bit Node-ID(entifier)
composed of the 48-bit Registrar-ID, the registrar assigned 15-bit Node-Number and 1 V(irtualization)
bit that allows for an ACP node to have two addresses.</t>

<t>The 64-bit Node-Identifier in the ACP Zone Addressing Sub-Scheme matches the 64-bit
Interface Identifier (IID) address part as specified in RFC4291 section 2.5.1.
IIDs are unique across ACP nodes, but all ACP nodes with the same ULA prefix
that use the ACP Zone Addressing Sub-Scheme will share the same subnet prefix
(according to the definition of that term in RFC4291).  Each ACP node injects a /127
route into the ACP routing table to cover its two assigned addresses (V(irtual) bit being 0 or 1).
This approach is used because these ACP addresses are identifiers and not locators.  The ACP node
can connect anywhere in the ACP domain without having to change its addresses.  The lightweight,
highly scaleable routing protocol RPL is used to allow for large scale ACP networks.</t>

<t>It is possible, that this scheme constitutes an update to RFC4191 because the
same 64-bit subnet prefix is used across many ACP nodes.  The ACP Zone Addressing
Sub-Scheme is very similar to the common operational practices of assigning /128
Loopback addresses to network nodes from the same /48 or /64 subnet prefix.</t>

<t>In the ACP Vlong Addressing Sub-Scheme (<xref target="Vlong"/>), the address elements
are the same as described for the Zone Addressing Sub-Scheme, but the V field is
expanded from 1-bit to 8 or 16-bits.  The ACP node with ACP Vlong addressing therefore injects
/120 or /112 prefixes into the ACP routing table to cover its internal addresses.</t>

<t>The goal for the 8 or 16-bit addresses available to an ACP node in this scheme
is to assign them as required to software components, which in autonomic networking
are called ASA (Autonomic Service Agents).  It could equally be used for existing
software components such as VNFs (Virtual Networking Functions).  The ACP interface would
then be the out-of-band management interface of such a VNF software component.
It should especially be possible to use these software components in a variety of contexts
to allow standardized modular system composition: Native applications (in some VRF context if available),
containers, virtual machines or other future ones.  To modularily compose a system with containers
and virtual machines and avoid problems such as port space collision or NAT, it is necessary not
only to assign separate addresses to those contexts, but also to use the notion of virtual
 interfaces between these contexts to compose the system.</t>

<t>In practical terms, the ACP should be enabled to create from its /8 or /16
prefix one or more node internal virtual subnets and to start software components
connected to those virtual subnets.  Ideally, these software components should be
able to auto configure their addresses on these virtual interfaces.  Future work
has to determine whether this address auto configuration for the virtual interface
is best done with DHCPv6, if SLAAC should be recommended for these /8 or /16 virtual
interfaces, or if some additional standardized method would be required.</t>

<t>In the ACP Vlong Addressing scheme, the Node-ID does not match the RFC4291/RFC4193
64-bith length for the Interface Identifier, so this addressing Sub-Scheme
in the ACP is an update to both standards.</t>

<t>This document also specifies the workaround solution of exposing the ACP
on native interfaces in support of adoption by existing hardware and software
solutions.  A NOC based NMS host could for example be configured with a second
native interface connecting to an ACP node that exposes the ACP to that NMS
host (called ACP edge node).  The desired evolution of this workaround is that
those two functions would merge into a single node, for example by making the ACP
router a container/virtual machine inside the NMS host or vice versa.  The addressing
for those native interfaces allows for manually configured address prefixes but
it could be fully autonomous if it could leverage the Vlong addressing format.  That would
 result in a non /64 IID boundary on those external interfaces (but instead in /112 or
/120 subnet prefixes).</t>

<t>Note that both in the internal as well as the workaround external use of ACP
addresses, all ACP addresses are meant to be used exclusively by components that
are part of network control and OAM, but not for network users such as normal hosts.
This implies that for example no requirements for privacy addressing have
been identified for ACP addresses.</t>

        </section>
-->
